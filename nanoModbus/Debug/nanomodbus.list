
nanomodbus.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000034f8  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  080035b8  080035b8  000045b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080035f0  080035f0  0000500c  2**0
                  CONTENTS
  4 .ARM          00000000  080035f0  080035f0  0000500c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080035f0  080035f0  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080035f0  080035f0  000045f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080035f4  080035f4  000045f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080035f8  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c4  2000000c  08003604  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000d0  08003604  000050d0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000afe7  00000000  00000000  00005034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001abd  00000000  00000000  0001001b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000918  00000000  00000000  00011ad8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000071a  00000000  00000000  000123f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000f8c9  00000000  00000000  00012b0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b22d  00000000  00000000  000223d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005db22  00000000  00000000  0002d600  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0008b122  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000020b4  00000000  00000000  0008b168  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  0008d21c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080035a0 	.word	0x080035a0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	080035a0 	.word	0x080035a0

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <RS485_SetTransmitMode>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void RS485_SetTransmitMode(void) {
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RS485_CTRL_GPIO_Port, RS485_CTRL_Pin, GPIO_PIN_SET); // DE ve RE'yi etkinle≈ütir
 8000224:	2380      	movs	r3, #128	@ 0x80
 8000226:	0059      	lsls	r1, r3, #1
 8000228:	2390      	movs	r3, #144	@ 0x90
 800022a:	05db      	lsls	r3, r3, #23
 800022c:	2201      	movs	r2, #1
 800022e:	0018      	movs	r0, r3
 8000230:	f001 fbe2 	bl	80019f8 <HAL_GPIO_WritePin>
}
 8000234:	46c0      	nop			@ (mov r8, r8)
 8000236:	46bd      	mov	sp, r7
 8000238:	bd80      	pop	{r7, pc}

0800023a <RS485_SetReceiveMode>:

void RS485_SetReceiveMode(void) {
 800023a:	b580      	push	{r7, lr}
 800023c:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RS485_CTRL_GPIO_Port, RS485_CTRL_Pin, GPIO_PIN_RESET); // DE ve RE'yi devre dƒ±≈üƒ± bƒ±rak
 800023e:	2380      	movs	r3, #128	@ 0x80
 8000240:	0059      	lsls	r1, r3, #1
 8000242:	2390      	movs	r3, #144	@ 0x90
 8000244:	05db      	lsls	r3, r3, #23
 8000246:	2200      	movs	r2, #0
 8000248:	0018      	movs	r0, r3
 800024a:	f001 fbd5 	bl	80019f8 <HAL_GPIO_WritePin>
}
 800024e:	46c0      	nop			@ (mov r8, r8)
 8000250:	46bd      	mov	sp, r7
 8000252:	bd80      	pop	{r7, pc}

08000254 <uart_read>:
int32_t uart_read(uint8_t *buf, uint16_t count, int32_t timeout_ms, void *arg) {
 8000254:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000256:	b087      	sub	sp, #28
 8000258:	af00      	add	r7, sp, #0
 800025a:	60f8      	str	r0, [r7, #12]
 800025c:	607a      	str	r2, [r7, #4]
 800025e:	603b      	str	r3, [r7, #0]
 8000260:	260a      	movs	r6, #10
 8000262:	19bb      	adds	r3, r7, r6
 8000264:	1c0a      	adds	r2, r1, #0
 8000266:	801a      	strh	r2, [r3, #0]
	RS485_SetReceiveMode(); // Alƒ±cƒ± moduna ge√ß
 8000268:	f7ff ffe7 	bl	800023a <RS485_SetReceiveMode>
	HAL_StatusTypeDef status = HAL_UART_Receive(&huart1, buf, count,
 800026c:	687d      	ldr	r5, [r7, #4]
 800026e:	2317      	movs	r3, #23
 8000270:	18fc      	adds	r4, r7, r3
 8000272:	19bb      	adds	r3, r7, r6
 8000274:	881a      	ldrh	r2, [r3, #0]
 8000276:	68f9      	ldr	r1, [r7, #12]
 8000278:	4809      	ldr	r0, [pc, #36]	@ (80002a0 <uart_read+0x4c>)
 800027a:	002b      	movs	r3, r5
 800027c:	f002 f9fa 	bl	8002674 <HAL_UART_Receive>
 8000280:	0003      	movs	r3, r0
 8000282:	7023      	strb	r3, [r4, #0]
			timeout_ms);
	if (status == HAL_OK)
 8000284:	2317      	movs	r3, #23
 8000286:	18fb      	adds	r3, r7, r3
 8000288:	781b      	ldrb	r3, [r3, #0]
 800028a:	2b00      	cmp	r3, #0
 800028c:	d102      	bne.n	8000294 <uart_read+0x40>
		return count;
 800028e:	19bb      	adds	r3, r7, r6
 8000290:	881b      	ldrh	r3, [r3, #0]
 8000292:	e001      	b.n	8000298 <uart_read+0x44>
	return -1;
 8000294:	2301      	movs	r3, #1
 8000296:	425b      	negs	r3, r3
}
 8000298:	0018      	movs	r0, r3
 800029a:	46bd      	mov	sp, r7
 800029c:	b007      	add	sp, #28
 800029e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002a0:	20000028 	.word	0x20000028

080002a4 <uart_write>:

int32_t uart_write(const uint8_t *buf, uint16_t count, int32_t timeout_ms,
		void *arg) {
 80002a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002a6:	b087      	sub	sp, #28
 80002a8:	af00      	add	r7, sp, #0
 80002aa:	60f8      	str	r0, [r7, #12]
 80002ac:	607a      	str	r2, [r7, #4]
 80002ae:	603b      	str	r3, [r7, #0]
 80002b0:	260a      	movs	r6, #10
 80002b2:	19bb      	adds	r3, r7, r6
 80002b4:	1c0a      	adds	r2, r1, #0
 80002b6:	801a      	strh	r2, [r3, #0]
	RS485_SetTransmitMode(); // Verici moduna ge√ß
 80002b8:	f7ff ffb2 	bl	8000220 <RS485_SetTransmitMode>
	HAL_StatusTypeDef status = HAL_UART_Transmit(&huart1, (uint8_t*) buf, count,
 80002bc:	687d      	ldr	r5, [r7, #4]
 80002be:	2317      	movs	r3, #23
 80002c0:	18fc      	adds	r4, r7, r3
 80002c2:	19bb      	adds	r3, r7, r6
 80002c4:	881a      	ldrh	r2, [r3, #0]
 80002c6:	68f9      	ldr	r1, [r7, #12]
 80002c8:	480a      	ldr	r0, [pc, #40]	@ (80002f4 <uart_write+0x50>)
 80002ca:	002b      	movs	r3, r5
 80002cc:	f002 f932 	bl	8002534 <HAL_UART_Transmit>
 80002d0:	0003      	movs	r3, r0
 80002d2:	7023      	strb	r3, [r4, #0]
			timeout_ms);
	if (status == HAL_OK) {
 80002d4:	2317      	movs	r3, #23
 80002d6:	18fb      	adds	r3, r7, r3
 80002d8:	781b      	ldrb	r3, [r3, #0]
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d104      	bne.n	80002e8 <uart_write+0x44>
		// G√∂nderme tamamlandƒ±ƒüƒ±nda tekrar alƒ±cƒ± moduna ge√ß
		RS485_SetReceiveMode();
 80002de:	f7ff ffac 	bl	800023a <RS485_SetReceiveMode>
		return count;
 80002e2:	19bb      	adds	r3, r7, r6
 80002e4:	881b      	ldrh	r3, [r3, #0]
 80002e6:	e001      	b.n	80002ec <uart_write+0x48>
	}
	return -1;
 80002e8:	2301      	movs	r3, #1
 80002ea:	425b      	negs	r3, r3

}
 80002ec:	0018      	movs	r0, r3
 80002ee:	46bd      	mov	sp, r7
 80002f0:	b007      	add	sp, #28
 80002f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002f4:	20000028 	.word	0x20000028

080002f8 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80002f8:	b5b0      	push	{r4, r5, r7, lr}
 80002fa:	b0dc      	sub	sp, #368	@ 0x170
 80002fc:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80002fe:	f001 f84b 	bl	8001398 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000302:	f000 f863 	bl	80003cc <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000306:	f000 f8f3 	bl	80004f0 <MX_GPIO_Init>
	MX_USART1_UART_Init();
 800030a:	f000 f8c1 	bl	8000490 <MX_USART1_UART_Init>
	/* USER CODE BEGIN 2 */
	nmbs_platform_conf_create(&platform_conf);
 800030e:	4b29      	ldr	r3, [pc, #164]	@ (80003b4 <main+0xbc>)
 8000310:	0018      	movs	r0, r3
 8000312:	f000 fb13 	bl	800093c <nmbs_platform_conf_create>
	platform_conf.transport = NMBS_TRANSPORT_RTU;
 8000316:	4b27      	ldr	r3, [pc, #156]	@ (80003b4 <main+0xbc>)
 8000318:	2201      	movs	r2, #1
 800031a:	701a      	strb	r2, [r3, #0]
	platform_conf.read = uart_read;
 800031c:	4b25      	ldr	r3, [pc, #148]	@ (80003b4 <main+0xbc>)
 800031e:	4a26      	ldr	r2, [pc, #152]	@ (80003b8 <main+0xc0>)
 8000320:	605a      	str	r2, [r3, #4]
	platform_conf.write = uart_write;
 8000322:	4b24      	ldr	r3, [pc, #144]	@ (80003b4 <main+0xbc>)
 8000324:	4a25      	ldr	r2, [pc, #148]	@ (80003bc <main+0xc4>)
 8000326:	609a      	str	r2, [r3, #8]

	// MODBUS istemcisini olu≈ütur
	nmbs_t nmbs;
	nmbs_error err = nmbs_client_create(&nmbs, &platform_conf);
 8000328:	2570      	movs	r5, #112	@ 0x70
 800032a:	35ff      	adds	r5, #255	@ 0xff
 800032c:	197c      	adds	r4, r7, r5
 800032e:	4a21      	ldr	r2, [pc, #132]	@ (80003b4 <main+0xbc>)
 8000330:	1d3b      	adds	r3, r7, #4
 8000332:	0011      	movs	r1, r2
 8000334:	0018      	movs	r0, r3
 8000336:	f000 feb8 	bl	80010aa <nmbs_client_create>
 800033a:	0003      	movs	r3, r0
 800033c:	7023      	strb	r3, [r4, #0]
	if (err != NMBS_ERROR_NONE) {
 800033e:	197b      	adds	r3, r7, r5
 8000340:	781b      	ldrb	r3, [r3, #0]
 8000342:	b25b      	sxtb	r3, r3
 8000344:	2b00      	cmp	r3, #0
 8000346:	d001      	beq.n	800034c <main+0x54>
		Error_Handler();
 8000348:	f000 f954 	bl	80005f4 <Error_Handler>
	}

	// Timeout deƒüerlerini ayarla
	nmbs_set_byte_timeout(&nmbs, 100);
 800034c:	1d3b      	adds	r3, r7, #4
 800034e:	2164      	movs	r1, #100	@ 0x64
 8000350:	0018      	movs	r0, r3
 8000352:	f000 fae5 	bl	8000920 <nmbs_set_byte_timeout>
	nmbs_set_read_timeout(&nmbs, 1000);
 8000356:	23fa      	movs	r3, #250	@ 0xfa
 8000358:	009a      	lsls	r2, r3, #2
 800035a:	1d3b      	adds	r3, r7, #4
 800035c:	0011      	movs	r1, r2
 800035e:	0018      	movs	r0, r3
 8000360:	f000 fad0 	bl	8000904 <nmbs_set_read_timeout>

	// Hedef slave adresini ayarla (√∂rn: 1)
	nmbs_set_destination_rtu_address(&nmbs, 1);
 8000364:	1d3b      	adds	r3, r7, #4
 8000366:	2101      	movs	r1, #1
 8000368:	0018      	movs	r0, r3
 800036a:	f000 faff 	bl	800096c <nmbs_set_destination_rtu_address>
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
//				nmbs_write_single_register(&nmbs, 1, counter);
//				nmbs_write_single_register(&nmbs, 2, counter);
				uint16_t w_regs[2] = {counter, counter2};
 800036e:	4b14      	ldr	r3, [pc, #80]	@ (80003c0 <main+0xc8>)
 8000370:	881a      	ldrh	r2, [r3, #0]
 8000372:	4b14      	ldr	r3, [pc, #80]	@ (80003c4 <main+0xcc>)
 8000374:	21b8      	movs	r1, #184	@ 0xb8
 8000376:	0049      	lsls	r1, r1, #1
 8000378:	185b      	adds	r3, r3, r1
 800037a:	19db      	adds	r3, r3, r7
 800037c:	801a      	strh	r2, [r3, #0]
 800037e:	4b12      	ldr	r3, [pc, #72]	@ (80003c8 <main+0xd0>)
 8000380:	881a      	ldrh	r2, [r3, #0]
 8000382:	4b10      	ldr	r3, [pc, #64]	@ (80003c4 <main+0xcc>)
 8000384:	185b      	adds	r3, r3, r1
 8000386:	19db      	adds	r3, r3, r7
 8000388:	805a      	strh	r2, [r3, #2]
				nmbs_write_multiple_registers(&nmbs, 1, 2, w_regs);
 800038a:	003b      	movs	r3, r7
 800038c:	1d38      	adds	r0, r7, #4
 800038e:	2202      	movs	r2, #2
 8000390:	2101      	movs	r1, #1
 8000392:	f000 fe9a 	bl	80010ca <nmbs_write_multiple_registers>
				counter++;
 8000396:	4b0a      	ldr	r3, [pc, #40]	@ (80003c0 <main+0xc8>)
 8000398:	881b      	ldrh	r3, [r3, #0]
 800039a:	3301      	adds	r3, #1
 800039c:	b29a      	uxth	r2, r3
 800039e:	4b08      	ldr	r3, [pc, #32]	@ (80003c0 <main+0xc8>)
 80003a0:	801a      	strh	r2, [r3, #0]
				counter2 += 2;
 80003a2:	4b09      	ldr	r3, [pc, #36]	@ (80003c8 <main+0xd0>)
 80003a4:	881b      	ldrh	r3, [r3, #0]
 80003a6:	3302      	adds	r3, #2
 80003a8:	b29a      	uxth	r2, r3
 80003aa:	4b07      	ldr	r3, [pc, #28]	@ (80003c8 <main+0xd0>)
 80003ac:	801a      	strh	r2, [r3, #0]
	while (1) {
 80003ae:	46c0      	nop			@ (mov r8, r8)
 80003b0:	e7dd      	b.n	800036e <main+0x76>
 80003b2:	46c0      	nop			@ (mov r8, r8)
 80003b4:	200000b0 	.word	0x200000b0
 80003b8:	08000255 	.word	0x08000255
 80003bc:	080002a5 	.word	0x080002a5
 80003c0:	200000c8 	.word	0x200000c8
 80003c4:	fffffe90 	.word	0xfffffe90
 80003c8:	200000ca 	.word	0x200000ca

080003cc <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80003cc:	b590      	push	{r4, r7, lr}
 80003ce:	b095      	sub	sp, #84	@ 0x54
 80003d0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80003d2:	2420      	movs	r4, #32
 80003d4:	193b      	adds	r3, r7, r4
 80003d6:	0018      	movs	r0, r3
 80003d8:	2330      	movs	r3, #48	@ 0x30
 80003da:	001a      	movs	r2, r3
 80003dc:	2100      	movs	r1, #0
 80003de:	f003 f8b3 	bl	8003548 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80003e2:	2310      	movs	r3, #16
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	0018      	movs	r0, r3
 80003e8:	2310      	movs	r3, #16
 80003ea:	001a      	movs	r2, r3
 80003ec:	2100      	movs	r1, #0
 80003ee:	f003 f8ab 	bl	8003548 <memset>
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 80003f2:	003b      	movs	r3, r7
 80003f4:	0018      	movs	r0, r3
 80003f6:	2310      	movs	r3, #16
 80003f8:	001a      	movs	r2, r3
 80003fa:	2100      	movs	r1, #0
 80003fc:	f003 f8a4 	bl	8003548 <memset>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000400:	0021      	movs	r1, r4
 8000402:	187b      	adds	r3, r7, r1
 8000404:	2202      	movs	r2, #2
 8000406:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000408:	187b      	adds	r3, r7, r1
 800040a:	2201      	movs	r2, #1
 800040c:	60da      	str	r2, [r3, #12]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800040e:	187b      	adds	r3, r7, r1
 8000410:	2210      	movs	r2, #16
 8000412:	611a      	str	r2, [r3, #16]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000414:	187b      	adds	r3, r7, r1
 8000416:	2202      	movs	r2, #2
 8000418:	621a      	str	r2, [r3, #32]
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800041a:	187b      	adds	r3, r7, r1
 800041c:	2200      	movs	r2, #0
 800041e:	625a      	str	r2, [r3, #36]	@ 0x24
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000420:	187b      	adds	r3, r7, r1
 8000422:	22a0      	movs	r2, #160	@ 0xa0
 8000424:	0392      	lsls	r2, r2, #14
 8000426:	629a      	str	r2, [r3, #40]	@ 0x28
	RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000428:	187b      	adds	r3, r7, r1
 800042a:	2200      	movs	r2, #0
 800042c:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800042e:	187b      	adds	r3, r7, r1
 8000430:	0018      	movs	r0, r3
 8000432:	f001 faff 	bl	8001a34 <HAL_RCC_OscConfig>
 8000436:	1e03      	subs	r3, r0, #0
 8000438:	d001      	beq.n	800043e <SystemClock_Config+0x72>
		Error_Handler();
 800043a:	f000 f8db 	bl	80005f4 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800043e:	2110      	movs	r1, #16
 8000440:	187b      	adds	r3, r7, r1
 8000442:	2207      	movs	r2, #7
 8000444:	601a      	str	r2, [r3, #0]
			| RCC_CLOCKTYPE_PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000446:	187b      	adds	r3, r7, r1
 8000448:	2202      	movs	r2, #2
 800044a:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800044c:	187b      	adds	r3, r7, r1
 800044e:	2200      	movs	r2, #0
 8000450:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000452:	187b      	adds	r3, r7, r1
 8000454:	2200      	movs	r2, #0
 8000456:	60da      	str	r2, [r3, #12]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 8000458:	187b      	adds	r3, r7, r1
 800045a:	2101      	movs	r1, #1
 800045c:	0018      	movs	r0, r3
 800045e:	f001 fe03 	bl	8002068 <HAL_RCC_ClockConfig>
 8000462:	1e03      	subs	r3, r0, #0
 8000464:	d001      	beq.n	800046a <SystemClock_Config+0x9e>
		Error_Handler();
 8000466:	f000 f8c5 	bl	80005f4 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800046a:	003b      	movs	r3, r7
 800046c:	2201      	movs	r2, #1
 800046e:	601a      	str	r2, [r3, #0]
	PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000470:	003b      	movs	r3, r7
 8000472:	2200      	movs	r2, #0
 8000474:	609a      	str	r2, [r3, #8]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8000476:	003b      	movs	r3, r7
 8000478:	0018      	movs	r0, r3
 800047a:	f001 ff39 	bl	80022f0 <HAL_RCCEx_PeriphCLKConfig>
 800047e:	1e03      	subs	r3, r0, #0
 8000480:	d001      	beq.n	8000486 <SystemClock_Config+0xba>
		Error_Handler();
 8000482:	f000 f8b7 	bl	80005f4 <Error_Handler>
	}
}
 8000486:	46c0      	nop			@ (mov r8, r8)
 8000488:	46bd      	mov	sp, r7
 800048a:	b015      	add	sp, #84	@ 0x54
 800048c:	bd90      	pop	{r4, r7, pc}
	...

08000490 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8000490:	b580      	push	{r7, lr}
 8000492:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8000494:	4b14      	ldr	r3, [pc, #80]	@ (80004e8 <MX_USART1_UART_Init+0x58>)
 8000496:	4a15      	ldr	r2, [pc, #84]	@ (80004ec <MX_USART1_UART_Init+0x5c>)
 8000498:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 9600;
 800049a:	4b13      	ldr	r3, [pc, #76]	@ (80004e8 <MX_USART1_UART_Init+0x58>)
 800049c:	2296      	movs	r2, #150	@ 0x96
 800049e:	0192      	lsls	r2, r2, #6
 80004a0:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80004a2:	4b11      	ldr	r3, [pc, #68]	@ (80004e8 <MX_USART1_UART_Init+0x58>)
 80004a4:	2200      	movs	r2, #0
 80004a6:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 80004a8:	4b0f      	ldr	r3, [pc, #60]	@ (80004e8 <MX_USART1_UART_Init+0x58>)
 80004aa:	2200      	movs	r2, #0
 80004ac:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 80004ae:	4b0e      	ldr	r3, [pc, #56]	@ (80004e8 <MX_USART1_UART_Init+0x58>)
 80004b0:	2200      	movs	r2, #0
 80004b2:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 80004b4:	4b0c      	ldr	r3, [pc, #48]	@ (80004e8 <MX_USART1_UART_Init+0x58>)
 80004b6:	220c      	movs	r2, #12
 80004b8:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004ba:	4b0b      	ldr	r3, [pc, #44]	@ (80004e8 <MX_USART1_UART_Init+0x58>)
 80004bc:	2200      	movs	r2, #0
 80004be:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80004c0:	4b09      	ldr	r3, [pc, #36]	@ (80004e8 <MX_USART1_UART_Init+0x58>)
 80004c2:	2200      	movs	r2, #0
 80004c4:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80004c6:	4b08      	ldr	r3, [pc, #32]	@ (80004e8 <MX_USART1_UART_Init+0x58>)
 80004c8:	2200      	movs	r2, #0
 80004ca:	621a      	str	r2, [r3, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80004cc:	4b06      	ldr	r3, [pc, #24]	@ (80004e8 <MX_USART1_UART_Init+0x58>)
 80004ce:	2200      	movs	r2, #0
 80004d0:	625a      	str	r2, [r3, #36]	@ 0x24
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 80004d2:	4b05      	ldr	r3, [pc, #20]	@ (80004e8 <MX_USART1_UART_Init+0x58>)
 80004d4:	0018      	movs	r0, r3
 80004d6:	f001 ffd9 	bl	800248c <HAL_UART_Init>
 80004da:	1e03      	subs	r3, r0, #0
 80004dc:	d001      	beq.n	80004e2 <MX_USART1_UART_Init+0x52>
		Error_Handler();
 80004de:	f000 f889 	bl	80005f4 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 80004e2:	46c0      	nop			@ (mov r8, r8)
 80004e4:	46bd      	mov	sp, r7
 80004e6:	bd80      	pop	{r7, pc}
 80004e8:	20000028 	.word	0x20000028
 80004ec:	40013800 	.word	0x40013800

080004f0 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80004f0:	b590      	push	{r4, r7, lr}
 80004f2:	b089      	sub	sp, #36	@ 0x24
 80004f4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80004f6:	240c      	movs	r4, #12
 80004f8:	193b      	adds	r3, r7, r4
 80004fa:	0018      	movs	r0, r3
 80004fc:	2314      	movs	r3, #20
 80004fe:	001a      	movs	r2, r3
 8000500:	2100      	movs	r1, #0
 8000502:	f003 f821 	bl	8003548 <memset>
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000506:	4b39      	ldr	r3, [pc, #228]	@ (80005ec <MX_GPIO_Init+0xfc>)
 8000508:	695a      	ldr	r2, [r3, #20]
 800050a:	4b38      	ldr	r3, [pc, #224]	@ (80005ec <MX_GPIO_Init+0xfc>)
 800050c:	2180      	movs	r1, #128	@ 0x80
 800050e:	0309      	lsls	r1, r1, #12
 8000510:	430a      	orrs	r2, r1
 8000512:	615a      	str	r2, [r3, #20]
 8000514:	4b35      	ldr	r3, [pc, #212]	@ (80005ec <MX_GPIO_Init+0xfc>)
 8000516:	695a      	ldr	r2, [r3, #20]
 8000518:	2380      	movs	r3, #128	@ 0x80
 800051a:	031b      	lsls	r3, r3, #12
 800051c:	4013      	ands	r3, r2
 800051e:	60bb      	str	r3, [r7, #8]
 8000520:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8000522:	4b32      	ldr	r3, [pc, #200]	@ (80005ec <MX_GPIO_Init+0xfc>)
 8000524:	695a      	ldr	r2, [r3, #20]
 8000526:	4b31      	ldr	r3, [pc, #196]	@ (80005ec <MX_GPIO_Init+0xfc>)
 8000528:	2180      	movs	r1, #128	@ 0x80
 800052a:	03c9      	lsls	r1, r1, #15
 800052c:	430a      	orrs	r2, r1
 800052e:	615a      	str	r2, [r3, #20]
 8000530:	4b2e      	ldr	r3, [pc, #184]	@ (80005ec <MX_GPIO_Init+0xfc>)
 8000532:	695a      	ldr	r2, [r3, #20]
 8000534:	2380      	movs	r3, #128	@ 0x80
 8000536:	03db      	lsls	r3, r3, #15
 8000538:	4013      	ands	r3, r2
 800053a:	607b      	str	r3, [r7, #4]
 800053c:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800053e:	4b2b      	ldr	r3, [pc, #172]	@ (80005ec <MX_GPIO_Init+0xfc>)
 8000540:	695a      	ldr	r2, [r3, #20]
 8000542:	4b2a      	ldr	r3, [pc, #168]	@ (80005ec <MX_GPIO_Init+0xfc>)
 8000544:	2180      	movs	r1, #128	@ 0x80
 8000546:	0289      	lsls	r1, r1, #10
 8000548:	430a      	orrs	r2, r1
 800054a:	615a      	str	r2, [r3, #20]
 800054c:	4b27      	ldr	r3, [pc, #156]	@ (80005ec <MX_GPIO_Init+0xfc>)
 800054e:	695a      	ldr	r2, [r3, #20]
 8000550:	2380      	movs	r3, #128	@ 0x80
 8000552:	029b      	lsls	r3, r3, #10
 8000554:	4013      	ands	r3, r2
 8000556:	603b      	str	r3, [r7, #0]
 8000558:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, LD2_Pin | RS485_CTRL_Pin, GPIO_PIN_RESET);
 800055a:	2390      	movs	r3, #144	@ 0x90
 800055c:	0059      	lsls	r1, r3, #1
 800055e:	2390      	movs	r3, #144	@ 0x90
 8000560:	05db      	lsls	r3, r3, #23
 8000562:	2200      	movs	r2, #0
 8000564:	0018      	movs	r0, r3
 8000566:	f001 fa47 	bl	80019f8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 800056a:	193b      	adds	r3, r7, r4
 800056c:	2280      	movs	r2, #128	@ 0x80
 800056e:	0192      	lsls	r2, r2, #6
 8000570:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000572:	193b      	adds	r3, r7, r4
 8000574:	2284      	movs	r2, #132	@ 0x84
 8000576:	0392      	lsls	r2, r2, #14
 8000578:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800057a:	193b      	adds	r3, r7, r4
 800057c:	2200      	movs	r2, #0
 800057e:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000580:	193b      	adds	r3, r7, r4
 8000582:	4a1b      	ldr	r2, [pc, #108]	@ (80005f0 <MX_GPIO_Init+0x100>)
 8000584:	0019      	movs	r1, r3
 8000586:	0010      	movs	r0, r2
 8000588:	f001 f8c6 	bl	8001718 <HAL_GPIO_Init>

	/*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
	GPIO_InitStruct.Pin = USART_TX_Pin | USART_RX_Pin;
 800058c:	193b      	adds	r3, r7, r4
 800058e:	220c      	movs	r2, #12
 8000590:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000592:	193b      	adds	r3, r7, r4
 8000594:	2202      	movs	r2, #2
 8000596:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000598:	193b      	adds	r3, r7, r4
 800059a:	2200      	movs	r2, #0
 800059c:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800059e:	193b      	adds	r3, r7, r4
 80005a0:	2200      	movs	r2, #0
 80005a2:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80005a4:	193b      	adds	r3, r7, r4
 80005a6:	2201      	movs	r2, #1
 80005a8:	611a      	str	r2, [r3, #16]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005aa:	193a      	adds	r2, r7, r4
 80005ac:	2390      	movs	r3, #144	@ 0x90
 80005ae:	05db      	lsls	r3, r3, #23
 80005b0:	0011      	movs	r1, r2
 80005b2:	0018      	movs	r0, r3
 80005b4:	f001 f8b0 	bl	8001718 <HAL_GPIO_Init>

	/*Configure GPIO pins : LD2_Pin RS485_CTRL_Pin */
	GPIO_InitStruct.Pin = LD2_Pin | RS485_CTRL_Pin;
 80005b8:	0021      	movs	r1, r4
 80005ba:	187b      	adds	r3, r7, r1
 80005bc:	2290      	movs	r2, #144	@ 0x90
 80005be:	0052      	lsls	r2, r2, #1
 80005c0:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005c2:	187b      	adds	r3, r7, r1
 80005c4:	2201      	movs	r2, #1
 80005c6:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c8:	187b      	adds	r3, r7, r1
 80005ca:	2200      	movs	r2, #0
 80005cc:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005ce:	187b      	adds	r3, r7, r1
 80005d0:	2200      	movs	r2, #0
 80005d2:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005d4:	187a      	adds	r2, r7, r1
 80005d6:	2390      	movs	r3, #144	@ 0x90
 80005d8:	05db      	lsls	r3, r3, #23
 80005da:	0011      	movs	r1, r2
 80005dc:	0018      	movs	r0, r3
 80005de:	f001 f89b 	bl	8001718 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 80005e2:	46c0      	nop			@ (mov r8, r8)
 80005e4:	46bd      	mov	sp, r7
 80005e6:	b009      	add	sp, #36	@ 0x24
 80005e8:	bd90      	pop	{r4, r7, pc}
 80005ea:	46c0      	nop			@ (mov r8, r8)
 80005ec:	40021000 	.word	0x40021000
 80005f0:	48000800 	.word	0x48000800

080005f4 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80005f4:	b580      	push	{r7, lr}
 80005f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005f8:	b672      	cpsid	i
}
 80005fa:	46c0      	nop			@ (mov r8, r8)
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80005fc:	46c0      	nop			@ (mov r8, r8)
 80005fe:	e7fd      	b.n	80005fc <Error_Handler+0x8>

08000600 <get_1>:
#else
#define NMBS_DEBUG_PRINT(...) (void) (0)
#endif


static uint8_t get_1(nmbs_t* nmbs) {
 8000600:	b580      	push	{r7, lr}
 8000602:	b084      	sub	sp, #16
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
    uint8_t result = nmbs->msg.buf[nmbs->msg.buf_idx];
 8000608:	687a      	ldr	r2, [r7, #4]
 800060a:	2382      	movs	r3, #130	@ 0x82
 800060c:	005b      	lsls	r3, r3, #1
 800060e:	5ad3      	ldrh	r3, [r2, r3]
 8000610:	0019      	movs	r1, r3
 8000612:	200f      	movs	r0, #15
 8000614:	183b      	adds	r3, r7, r0
 8000616:	687a      	ldr	r2, [r7, #4]
 8000618:	5c52      	ldrb	r2, [r2, r1]
 800061a:	701a      	strb	r2, [r3, #0]
    nmbs->msg.buf_idx++;
 800061c:	687a      	ldr	r2, [r7, #4]
 800061e:	2382      	movs	r3, #130	@ 0x82
 8000620:	005b      	lsls	r3, r3, #1
 8000622:	5ad3      	ldrh	r3, [r2, r3]
 8000624:	3301      	adds	r3, #1
 8000626:	b299      	uxth	r1, r3
 8000628:	687a      	ldr	r2, [r7, #4]
 800062a:	2382      	movs	r3, #130	@ 0x82
 800062c:	005b      	lsls	r3, r3, #1
 800062e:	52d1      	strh	r1, [r2, r3]
    return result;
 8000630:	183b      	adds	r3, r7, r0
 8000632:	781b      	ldrb	r3, [r3, #0]
}
 8000634:	0018      	movs	r0, r3
 8000636:	46bd      	mov	sp, r7
 8000638:	b004      	add	sp, #16
 800063a:	bd80      	pop	{r7, pc}

0800063c <put_1>:


static void put_1(nmbs_t* nmbs, uint8_t data) {
 800063c:	b580      	push	{r7, lr}
 800063e:	b082      	sub	sp, #8
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
 8000644:	000a      	movs	r2, r1
 8000646:	1cfb      	adds	r3, r7, #3
 8000648:	701a      	strb	r2, [r3, #0]
    nmbs->msg.buf[nmbs->msg.buf_idx] = data;
 800064a:	687a      	ldr	r2, [r7, #4]
 800064c:	2382      	movs	r3, #130	@ 0x82
 800064e:	005b      	lsls	r3, r3, #1
 8000650:	5ad3      	ldrh	r3, [r2, r3]
 8000652:	0019      	movs	r1, r3
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	1cfa      	adds	r2, r7, #3
 8000658:	7812      	ldrb	r2, [r2, #0]
 800065a:	545a      	strb	r2, [r3, r1]
    nmbs->msg.buf_idx++;
 800065c:	687a      	ldr	r2, [r7, #4]
 800065e:	2382      	movs	r3, #130	@ 0x82
 8000660:	005b      	lsls	r3, r3, #1
 8000662:	5ad3      	ldrh	r3, [r2, r3]
 8000664:	3301      	adds	r3, #1
 8000666:	b299      	uxth	r1, r3
 8000668:	687a      	ldr	r2, [r7, #4]
 800066a:	2382      	movs	r3, #130	@ 0x82
 800066c:	005b      	lsls	r3, r3, #1
 800066e:	52d1      	strh	r1, [r2, r3]
}
 8000670:	46c0      	nop			@ (mov r8, r8)
 8000672:	46bd      	mov	sp, r7
 8000674:	b002      	add	sp, #8
 8000676:	bd80      	pop	{r7, pc}

08000678 <discard_1>:


static void discard_1(nmbs_t* nmbs) {
 8000678:	b580      	push	{r7, lr}
 800067a:	b082      	sub	sp, #8
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
    nmbs->msg.buf_idx++;
 8000680:	687a      	ldr	r2, [r7, #4]
 8000682:	2382      	movs	r3, #130	@ 0x82
 8000684:	005b      	lsls	r3, r3, #1
 8000686:	5ad3      	ldrh	r3, [r2, r3]
 8000688:	3301      	adds	r3, #1
 800068a:	b299      	uxth	r1, r3
 800068c:	687a      	ldr	r2, [r7, #4]
 800068e:	2382      	movs	r3, #130	@ 0x82
 8000690:	005b      	lsls	r3, r3, #1
 8000692:	52d1      	strh	r1, [r2, r3]
}
 8000694:	46c0      	nop			@ (mov r8, r8)
 8000696:	46bd      	mov	sp, r7
 8000698:	b002      	add	sp, #8
 800069a:	bd80      	pop	{r7, pc}

0800069c <get_2>:
}
#endif
#endif


static uint16_t get_2(nmbs_t* nmbs) {
 800069c:	b580      	push	{r7, lr}
 800069e:	b084      	sub	sp, #16
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
    uint16_t result =
            ((uint16_t) nmbs->msg.buf[nmbs->msg.buf_idx]) << 8 | (uint16_t) nmbs->msg.buf[nmbs->msg.buf_idx + 1];
 80006a4:	687a      	ldr	r2, [r7, #4]
 80006a6:	2382      	movs	r3, #130	@ 0x82
 80006a8:	005b      	lsls	r3, r3, #1
 80006aa:	5ad3      	ldrh	r3, [r2, r3]
 80006ac:	001a      	movs	r2, r3
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	5c9b      	ldrb	r3, [r3, r2]
 80006b2:	021b      	lsls	r3, r3, #8
 80006b4:	b21a      	sxth	r2, r3
 80006b6:	6879      	ldr	r1, [r7, #4]
 80006b8:	2382      	movs	r3, #130	@ 0x82
 80006ba:	005b      	lsls	r3, r3, #1
 80006bc:	5acb      	ldrh	r3, [r1, r3]
 80006be:	3301      	adds	r3, #1
 80006c0:	6879      	ldr	r1, [r7, #4]
 80006c2:	5ccb      	ldrb	r3, [r1, r3]
 80006c4:	b21b      	sxth	r3, r3
 80006c6:	4313      	orrs	r3, r2
 80006c8:	b21a      	sxth	r2, r3
    uint16_t result =
 80006ca:	200e      	movs	r0, #14
 80006cc:	183b      	adds	r3, r7, r0
 80006ce:	801a      	strh	r2, [r3, #0]
    nmbs->msg.buf_idx += 2;
 80006d0:	687a      	ldr	r2, [r7, #4]
 80006d2:	2382      	movs	r3, #130	@ 0x82
 80006d4:	005b      	lsls	r3, r3, #1
 80006d6:	5ad3      	ldrh	r3, [r2, r3]
 80006d8:	3302      	adds	r3, #2
 80006da:	b299      	uxth	r1, r3
 80006dc:	687a      	ldr	r2, [r7, #4]
 80006de:	2382      	movs	r3, #130	@ 0x82
 80006e0:	005b      	lsls	r3, r3, #1
 80006e2:	52d1      	strh	r1, [r2, r3]
    return result;
 80006e4:	183b      	adds	r3, r7, r0
 80006e6:	881b      	ldrh	r3, [r3, #0]
}
 80006e8:	0018      	movs	r0, r3
 80006ea:	46bd      	mov	sp, r7
 80006ec:	b004      	add	sp, #16
 80006ee:	bd80      	pop	{r7, pc}

080006f0 <put_2>:


static void put_2(nmbs_t* nmbs, uint16_t data) {
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b082      	sub	sp, #8
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
 80006f8:	000a      	movs	r2, r1
 80006fa:	1cbb      	adds	r3, r7, #2
 80006fc:	801a      	strh	r2, [r3, #0]
    nmbs->msg.buf[nmbs->msg.buf_idx] = (uint8_t) ((data >> 8) & 0xFFU);
 80006fe:	1cbb      	adds	r3, r7, #2
 8000700:	881b      	ldrh	r3, [r3, #0]
 8000702:	0a1b      	lsrs	r3, r3, #8
 8000704:	b299      	uxth	r1, r3
 8000706:	687a      	ldr	r2, [r7, #4]
 8000708:	2382      	movs	r3, #130	@ 0x82
 800070a:	005b      	lsls	r3, r3, #1
 800070c:	5ad3      	ldrh	r3, [r2, r3]
 800070e:	001a      	movs	r2, r3
 8000710:	b2c9      	uxtb	r1, r1
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	5499      	strb	r1, [r3, r2]
    nmbs->msg.buf[nmbs->msg.buf_idx + 1] = (uint8_t) data;
 8000716:	687a      	ldr	r2, [r7, #4]
 8000718:	2382      	movs	r3, #130	@ 0x82
 800071a:	005b      	lsls	r3, r3, #1
 800071c:	5ad3      	ldrh	r3, [r2, r3]
 800071e:	3301      	adds	r3, #1
 8000720:	1cba      	adds	r2, r7, #2
 8000722:	8812      	ldrh	r2, [r2, #0]
 8000724:	b2d1      	uxtb	r1, r2
 8000726:	687a      	ldr	r2, [r7, #4]
 8000728:	54d1      	strb	r1, [r2, r3]
    nmbs->msg.buf_idx += 2;
 800072a:	687a      	ldr	r2, [r7, #4]
 800072c:	2382      	movs	r3, #130	@ 0x82
 800072e:	005b      	lsls	r3, r3, #1
 8000730:	5ad3      	ldrh	r3, [r2, r3]
 8000732:	3302      	adds	r3, #2
 8000734:	b299      	uxth	r1, r3
 8000736:	687a      	ldr	r2, [r7, #4]
 8000738:	2382      	movs	r3, #130	@ 0x82
 800073a:	005b      	lsls	r3, r3, #1
 800073c:	52d1      	strh	r1, [r2, r3]
}
 800073e:	46c0      	nop			@ (mov r8, r8)
 8000740:	46bd      	mov	sp, r7
 8000742:	b002      	add	sp, #8
 8000744:	bd80      	pop	{r7, pc}

08000746 <msg_buf_reset>:
        data[n] = (data[n] << 8) | ((data[n] >> 8) & 0xFF);
    }
}


static void msg_buf_reset(nmbs_t* nmbs) {
 8000746:	b580      	push	{r7, lr}
 8000748:	b082      	sub	sp, #8
 800074a:	af00      	add	r7, sp, #0
 800074c:	6078      	str	r0, [r7, #4]
    nmbs->msg.buf_idx = 0;
 800074e:	687a      	ldr	r2, [r7, #4]
 8000750:	2382      	movs	r3, #130	@ 0x82
 8000752:	005b      	lsls	r3, r3, #1
 8000754:	2100      	movs	r1, #0
 8000756:	52d1      	strh	r1, [r2, r3]
}
 8000758:	46c0      	nop			@ (mov r8, r8)
 800075a:	46bd      	mov	sp, r7
 800075c:	b002      	add	sp, #8
 800075e:	bd80      	pop	{r7, pc}

08000760 <msg_state_reset>:


static void msg_state_reset(nmbs_t* nmbs) {
 8000760:	b580      	push	{r7, lr}
 8000762:	b082      	sub	sp, #8
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
    msg_buf_reset(nmbs);
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	0018      	movs	r0, r3
 800076c:	f7ff ffeb 	bl	8000746 <msg_buf_reset>
    nmbs->msg.unit_id = 0;
 8000770:	687a      	ldr	r2, [r7, #4]
 8000772:	2383      	movs	r3, #131	@ 0x83
 8000774:	005b      	lsls	r3, r3, #1
 8000776:	2100      	movs	r1, #0
 8000778:	54d1      	strb	r1, [r2, r3]
    nmbs->msg.fc = 0;
 800077a:	687a      	ldr	r2, [r7, #4]
 800077c:	2308      	movs	r3, #8
 800077e:	33ff      	adds	r3, #255	@ 0xff
 8000780:	2100      	movs	r1, #0
 8000782:	54d1      	strb	r1, [r2, r3]
    nmbs->msg.transaction_id = 0;
 8000784:	687a      	ldr	r2, [r7, #4]
 8000786:	2384      	movs	r3, #132	@ 0x84
 8000788:	005b      	lsls	r3, r3, #1
 800078a:	2100      	movs	r1, #0
 800078c:	52d1      	strh	r1, [r2, r3]
    nmbs->msg.broadcast = false;
 800078e:	687a      	ldr	r2, [r7, #4]
 8000790:	2385      	movs	r3, #133	@ 0x85
 8000792:	005b      	lsls	r3, r3, #1
 8000794:	2100      	movs	r1, #0
 8000796:	54d1      	strb	r1, [r2, r3]
    nmbs->msg.ignored = false;
 8000798:	687a      	ldr	r2, [r7, #4]
 800079a:	230c      	movs	r3, #12
 800079c:	33ff      	adds	r3, #255	@ 0xff
 800079e:	2100      	movs	r1, #0
 80007a0:	54d1      	strb	r1, [r2, r3]
}
 80007a2:	46c0      	nop			@ (mov r8, r8)
 80007a4:	46bd      	mov	sp, r7
 80007a6:	b002      	add	sp, #8
 80007a8:	bd80      	pop	{r7, pc}
	...

080007ac <msg_state_req>:


#ifndef NMBS_CLIENT_DISABLED
static void msg_state_req(nmbs_t* nmbs, uint8_t fc) {
 80007ac:	b590      	push	{r4, r7, lr}
 80007ae:	b083      	sub	sp, #12
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
 80007b4:	000a      	movs	r2, r1
 80007b6:	1cfb      	adds	r3, r7, #3
 80007b8:	701a      	strb	r2, [r3, #0]
    if (nmbs->current_tid == UINT16_MAX)
 80007ba:	687a      	ldr	r2, [r7, #4]
 80007bc:	23b3      	movs	r3, #179	@ 0xb3
 80007be:	005b      	lsls	r3, r3, #1
 80007c0:	5ad3      	ldrh	r3, [r2, r3]
 80007c2:	4a27      	ldr	r2, [pc, #156]	@ (8000860 <msg_state_req+0xb4>)
 80007c4:	4293      	cmp	r3, r2
 80007c6:	d105      	bne.n	80007d4 <msg_state_req+0x28>
        nmbs->current_tid = 1;
 80007c8:	687a      	ldr	r2, [r7, #4]
 80007ca:	23b3      	movs	r3, #179	@ 0xb3
 80007cc:	005b      	lsls	r3, r3, #1
 80007ce:	2101      	movs	r1, #1
 80007d0:	52d1      	strh	r1, [r2, r3]
 80007d2:	e009      	b.n	80007e8 <msg_state_req+0x3c>
    else
        nmbs->current_tid++;
 80007d4:	687a      	ldr	r2, [r7, #4]
 80007d6:	23b3      	movs	r3, #179	@ 0xb3
 80007d8:	005b      	lsls	r3, r3, #1
 80007da:	5ad3      	ldrh	r3, [r2, r3]
 80007dc:	3301      	adds	r3, #1
 80007de:	b299      	uxth	r1, r3
 80007e0:	687a      	ldr	r2, [r7, #4]
 80007e2:	23b3      	movs	r3, #179	@ 0xb3
 80007e4:	005b      	lsls	r3, r3, #1
 80007e6:	52d1      	strh	r1, [r2, r3]

    // Flush the remaining data on the line before sending the request
    nmbs->platform.read(nmbs->msg.buf, sizeof(nmbs->msg.buf), 0, nmbs->platform.arg);
 80007e8:	687a      	ldr	r2, [r7, #4]
 80007ea:	23a8      	movs	r3, #168	@ 0xa8
 80007ec:	005b      	lsls	r3, r3, #1
 80007ee:	58d4      	ldr	r4, [r2, r3]
 80007f0:	6878      	ldr	r0, [r7, #4]
 80007f2:	687a      	ldr	r2, [r7, #4]
 80007f4:	23ae      	movs	r3, #174	@ 0xae
 80007f6:	005b      	lsls	r3, r3, #1
 80007f8:	58d3      	ldr	r3, [r2, r3]
 80007fa:	2282      	movs	r2, #130	@ 0x82
 80007fc:	0051      	lsls	r1, r2, #1
 80007fe:	2200      	movs	r2, #0
 8000800:	47a0      	blx	r4

    msg_state_reset(nmbs);
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	0018      	movs	r0, r3
 8000806:	f7ff ffab 	bl	8000760 <msg_state_reset>
    nmbs->msg.unit_id = nmbs->dest_address_rtu;
 800080a:	687a      	ldr	r2, [r7, #4]
 800080c:	2366      	movs	r3, #102	@ 0x66
 800080e:	33ff      	adds	r3, #255	@ 0xff
 8000810:	5cd1      	ldrb	r1, [r2, r3]
 8000812:	687a      	ldr	r2, [r7, #4]
 8000814:	2383      	movs	r3, #131	@ 0x83
 8000816:	005b      	lsls	r3, r3, #1
 8000818:	54d1      	strb	r1, [r2, r3]
    nmbs->msg.fc = fc;
 800081a:	687a      	ldr	r2, [r7, #4]
 800081c:	1cf9      	adds	r1, r7, #3
 800081e:	2308      	movs	r3, #8
 8000820:	33ff      	adds	r3, #255	@ 0xff
 8000822:	7809      	ldrb	r1, [r1, #0]
 8000824:	54d1      	strb	r1, [r2, r3]
    nmbs->msg.transaction_id = nmbs->current_tid;
 8000826:	687a      	ldr	r2, [r7, #4]
 8000828:	23b3      	movs	r3, #179	@ 0xb3
 800082a:	005b      	lsls	r3, r3, #1
 800082c:	5ad1      	ldrh	r1, [r2, r3]
 800082e:	687a      	ldr	r2, [r7, #4]
 8000830:	2384      	movs	r3, #132	@ 0x84
 8000832:	005b      	lsls	r3, r3, #1
 8000834:	52d1      	strh	r1, [r2, r3]
    if (nmbs->msg.unit_id == 0 && nmbs->platform.transport == NMBS_TRANSPORT_RTU)
 8000836:	687a      	ldr	r2, [r7, #4]
 8000838:	2383      	movs	r3, #131	@ 0x83
 800083a:	005b      	lsls	r3, r3, #1
 800083c:	5cd3      	ldrb	r3, [r2, r3]
 800083e:	2b00      	cmp	r3, #0
 8000840:	d10a      	bne.n	8000858 <msg_state_req+0xac>
 8000842:	687a      	ldr	r2, [r7, #4]
 8000844:	23a6      	movs	r3, #166	@ 0xa6
 8000846:	005b      	lsls	r3, r3, #1
 8000848:	5cd3      	ldrb	r3, [r2, r3]
 800084a:	2b01      	cmp	r3, #1
 800084c:	d104      	bne.n	8000858 <msg_state_req+0xac>
        nmbs->msg.broadcast = true;
 800084e:	687a      	ldr	r2, [r7, #4]
 8000850:	2385      	movs	r3, #133	@ 0x85
 8000852:	005b      	lsls	r3, r3, #1
 8000854:	2101      	movs	r1, #1
 8000856:	54d1      	strb	r1, [r2, r3]
}
 8000858:	46c0      	nop			@ (mov r8, r8)
 800085a:	46bd      	mov	sp, r7
 800085c:	b003      	add	sp, #12
 800085e:	bd90      	pop	{r4, r7, pc}
 8000860:	0000ffff 	.word	0x0000ffff

08000864 <nmbs_create>:
#endif


nmbs_error nmbs_create(nmbs_t* nmbs, const nmbs_platform_conf* platform_conf) {
 8000864:	b590      	push	{r4, r7, lr}
 8000866:	b083      	sub	sp, #12
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
 800086c:	6039      	str	r1, [r7, #0]
    if (!nmbs)
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	2b00      	cmp	r3, #0
 8000872:	d102      	bne.n	800087a <nmbs_create+0x16>
        return NMBS_ERROR_INVALID_ARGUMENT;
 8000874:	2301      	movs	r3, #1
 8000876:	425b      	negs	r3, r3
 8000878:	e03e      	b.n	80008f8 <nmbs_create+0x94>

    memset(nmbs, 0, sizeof(nmbs_t));
 800087a:	23b4      	movs	r3, #180	@ 0xb4
 800087c:	005a      	lsls	r2, r3, #1
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	2100      	movs	r1, #0
 8000882:	0018      	movs	r0, r3
 8000884:	f002 fe60 	bl	8003548 <memset>

    nmbs->byte_timeout_ms = -1;
 8000888:	687a      	ldr	r2, [r7, #4]
 800088a:	23a2      	movs	r3, #162	@ 0xa2
 800088c:	005b      	lsls	r3, r3, #1
 800088e:	2101      	movs	r1, #1
 8000890:	4249      	negs	r1, r1
 8000892:	50d1      	str	r1, [r2, r3]
    nmbs->read_timeout_ms = -1;
 8000894:	687a      	ldr	r2, [r7, #4]
 8000896:	23a4      	movs	r3, #164	@ 0xa4
 8000898:	005b      	lsls	r3, r3, #1
 800089a:	2101      	movs	r1, #1
 800089c:	4249      	negs	r1, r1
 800089e:	50d1      	str	r1, [r2, r3]

    if (!platform_conf || platform_conf->initialized != 0xFFFFDEBE)
 80008a0:	683b      	ldr	r3, [r7, #0]
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d004      	beq.n	80008b0 <nmbs_create+0x4c>
 80008a6:	683b      	ldr	r3, [r7, #0]
 80008a8:	695b      	ldr	r3, [r3, #20]
 80008aa:	4a15      	ldr	r2, [pc, #84]	@ (8000900 <nmbs_create+0x9c>)
 80008ac:	4293      	cmp	r3, r2
 80008ae:	d002      	beq.n	80008b6 <nmbs_create+0x52>
        return NMBS_ERROR_INVALID_ARGUMENT;
 80008b0:	2301      	movs	r3, #1
 80008b2:	425b      	negs	r3, r3
 80008b4:	e020      	b.n	80008f8 <nmbs_create+0x94>

    if (platform_conf->transport != NMBS_TRANSPORT_RTU && platform_conf->transport != NMBS_TRANSPORT_TCP)
 80008b6:	683b      	ldr	r3, [r7, #0]
 80008b8:	781b      	ldrb	r3, [r3, #0]
 80008ba:	2b01      	cmp	r3, #1
 80008bc:	d006      	beq.n	80008cc <nmbs_create+0x68>
 80008be:	683b      	ldr	r3, [r7, #0]
 80008c0:	781b      	ldrb	r3, [r3, #0]
 80008c2:	2b02      	cmp	r3, #2
 80008c4:	d002      	beq.n	80008cc <nmbs_create+0x68>
        return NMBS_ERROR_INVALID_ARGUMENT;
 80008c6:	2301      	movs	r3, #1
 80008c8:	425b      	negs	r3, r3
 80008ca:	e015      	b.n	80008f8 <nmbs_create+0x94>

    if (!platform_conf->read || !platform_conf->write)
 80008cc:	683b      	ldr	r3, [r7, #0]
 80008ce:	685b      	ldr	r3, [r3, #4]
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d003      	beq.n	80008dc <nmbs_create+0x78>
 80008d4:	683b      	ldr	r3, [r7, #0]
 80008d6:	689b      	ldr	r3, [r3, #8]
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d102      	bne.n	80008e2 <nmbs_create+0x7e>
        return NMBS_ERROR_INVALID_ARGUMENT;
 80008dc:	2301      	movs	r3, #1
 80008de:	425b      	negs	r3, r3
 80008e0:	e00a      	b.n	80008f8 <nmbs_create+0x94>

    nmbs->platform = *platform_conf;
 80008e2:	687a      	ldr	r2, [r7, #4]
 80008e4:	23a6      	movs	r3, #166	@ 0xa6
 80008e6:	005b      	lsls	r3, r3, #1
 80008e8:	6839      	ldr	r1, [r7, #0]
 80008ea:	18d3      	adds	r3, r2, r3
 80008ec:	000a      	movs	r2, r1
 80008ee:	ca13      	ldmia	r2!, {r0, r1, r4}
 80008f0:	c313      	stmia	r3!, {r0, r1, r4}
 80008f2:	ca13      	ldmia	r2!, {r0, r1, r4}
 80008f4:	c313      	stmia	r3!, {r0, r1, r4}

    return NMBS_ERROR_NONE;
 80008f6:	2300      	movs	r3, #0
}
 80008f8:	0018      	movs	r0, r3
 80008fa:	46bd      	mov	sp, r7
 80008fc:	b003      	add	sp, #12
 80008fe:	bd90      	pop	{r4, r7, pc}
 8000900:	ffffdebe 	.word	0xffffdebe

08000904 <nmbs_set_read_timeout>:


void nmbs_set_read_timeout(nmbs_t* nmbs, int32_t timeout_ms) {
 8000904:	b580      	push	{r7, lr}
 8000906:	b082      	sub	sp, #8
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
 800090c:	6039      	str	r1, [r7, #0]
    nmbs->read_timeout_ms = timeout_ms;
 800090e:	687a      	ldr	r2, [r7, #4]
 8000910:	23a4      	movs	r3, #164	@ 0xa4
 8000912:	005b      	lsls	r3, r3, #1
 8000914:	6839      	ldr	r1, [r7, #0]
 8000916:	50d1      	str	r1, [r2, r3]
}
 8000918:	46c0      	nop			@ (mov r8, r8)
 800091a:	46bd      	mov	sp, r7
 800091c:	b002      	add	sp, #8
 800091e:	bd80      	pop	{r7, pc}

08000920 <nmbs_set_byte_timeout>:


void nmbs_set_byte_timeout(nmbs_t* nmbs, int32_t timeout_ms) {
 8000920:	b580      	push	{r7, lr}
 8000922:	b082      	sub	sp, #8
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
 8000928:	6039      	str	r1, [r7, #0]
    nmbs->byte_timeout_ms = timeout_ms;
 800092a:	687a      	ldr	r2, [r7, #4]
 800092c:	23a2      	movs	r3, #162	@ 0xa2
 800092e:	005b      	lsls	r3, r3, #1
 8000930:	6839      	ldr	r1, [r7, #0]
 8000932:	50d1      	str	r1, [r2, r3]
}
 8000934:	46c0      	nop			@ (mov r8, r8)
 8000936:	46bd      	mov	sp, r7
 8000938:	b002      	add	sp, #8
 800093a:	bd80      	pop	{r7, pc}

0800093c <nmbs_platform_conf_create>:


void nmbs_platform_conf_create(nmbs_platform_conf* platform_conf) {
 800093c:	b580      	push	{r7, lr}
 800093e:	b082      	sub	sp, #8
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
    memset(platform_conf, 0, sizeof(nmbs_platform_conf));
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	2218      	movs	r2, #24
 8000948:	2100      	movs	r1, #0
 800094a:	0018      	movs	r0, r3
 800094c:	f002 fdfc 	bl	8003548 <memset>
    platform_conf->crc_calc = nmbs_crc_calc;
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	4a04      	ldr	r2, [pc, #16]	@ (8000964 <nmbs_platform_conf_create+0x28>)
 8000954:	60da      	str	r2, [r3, #12]
    // Workaround for older user code not calling nmbs_platform_conf_create()
    platform_conf->initialized = 0xFFFFDEBE;
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	4a03      	ldr	r2, [pc, #12]	@ (8000968 <nmbs_platform_conf_create+0x2c>)
 800095a:	615a      	str	r2, [r3, #20]
}
 800095c:	46c0      	nop			@ (mov r8, r8)
 800095e:	46bd      	mov	sp, r7
 8000960:	b002      	add	sp, #8
 8000962:	bd80      	pop	{r7, pc}
 8000964:	08000991 	.word	0x08000991
 8000968:	ffffdebe 	.word	0xffffdebe

0800096c <nmbs_set_destination_rtu_address>:


void nmbs_set_destination_rtu_address(nmbs_t* nmbs, uint8_t address) {
 800096c:	b580      	push	{r7, lr}
 800096e:	b082      	sub	sp, #8
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
 8000974:	000a      	movs	r2, r1
 8000976:	1cfb      	adds	r3, r7, #3
 8000978:	701a      	strb	r2, [r3, #0]
    nmbs->dest_address_rtu = address;
 800097a:	687a      	ldr	r2, [r7, #4]
 800097c:	1cf9      	adds	r1, r7, #3
 800097e:	2366      	movs	r3, #102	@ 0x66
 8000980:	33ff      	adds	r3, #255	@ 0xff
 8000982:	7809      	ldrb	r1, [r1, #0]
 8000984:	54d1      	strb	r1, [r2, r3]
}
 8000986:	46c0      	nop			@ (mov r8, r8)
 8000988:	46bd      	mov	sp, r7
 800098a:	b002      	add	sp, #8
 800098c:	bd80      	pop	{r7, pc}
	...

08000990 <nmbs_crc_calc>:
void nmbs_set_platform_arg(nmbs_t* nmbs, void* arg) {
    nmbs->platform.arg = arg;
}


uint16_t nmbs_crc_calc(const uint8_t* data, uint32_t length, void* arg) {
 8000990:	b580      	push	{r7, lr}
 8000992:	b088      	sub	sp, #32
 8000994:	af00      	add	r7, sp, #0
 8000996:	60f8      	str	r0, [r7, #12]
 8000998:	60b9      	str	r1, [r7, #8]
 800099a:	607a      	str	r2, [r7, #4]
    NMBS_UNUSED_PARAM(arg);
    uint16_t crc = 0xFFFF;
 800099c:	231e      	movs	r3, #30
 800099e:	18fb      	adds	r3, r7, r3
 80009a0:	2201      	movs	r2, #1
 80009a2:	4252      	negs	r2, r2
 80009a4:	801a      	strh	r2, [r3, #0]
    for (uint32_t i = 0; i < length; i++) {
 80009a6:	2300      	movs	r3, #0
 80009a8:	61bb      	str	r3, [r7, #24]
 80009aa:	e02e      	b.n	8000a0a <nmbs_crc_calc+0x7a>
        crc ^= (uint16_t) data[i];
 80009ac:	68fa      	ldr	r2, [r7, #12]
 80009ae:	69bb      	ldr	r3, [r7, #24]
 80009b0:	18d3      	adds	r3, r2, r3
 80009b2:	781b      	ldrb	r3, [r3, #0]
 80009b4:	0019      	movs	r1, r3
 80009b6:	221e      	movs	r2, #30
 80009b8:	18bb      	adds	r3, r7, r2
 80009ba:	18ba      	adds	r2, r7, r2
 80009bc:	8812      	ldrh	r2, [r2, #0]
 80009be:	404a      	eors	r2, r1
 80009c0:	801a      	strh	r2, [r3, #0]
        for (int j = 8; j != 0; j--) {
 80009c2:	2308      	movs	r3, #8
 80009c4:	617b      	str	r3, [r7, #20]
 80009c6:	e01a      	b.n	80009fe <nmbs_crc_calc+0x6e>
            if ((crc & 0x0001) != 0) {
 80009c8:	211e      	movs	r1, #30
 80009ca:	187b      	adds	r3, r7, r1
 80009cc:	881b      	ldrh	r3, [r3, #0]
 80009ce:	2201      	movs	r2, #1
 80009d0:	4013      	ands	r3, r2
 80009d2:	d00b      	beq.n	80009ec <nmbs_crc_calc+0x5c>
                crc >>= 1;
 80009d4:	187b      	adds	r3, r7, r1
 80009d6:	187a      	adds	r2, r7, r1
 80009d8:	8812      	ldrh	r2, [r2, #0]
 80009da:	0852      	lsrs	r2, r2, #1
 80009dc:	801a      	strh	r2, [r3, #0]
                crc ^= 0xA001;
 80009de:	187b      	adds	r3, r7, r1
 80009e0:	187a      	adds	r2, r7, r1
 80009e2:	8812      	ldrh	r2, [r2, #0]
 80009e4:	490f      	ldr	r1, [pc, #60]	@ (8000a24 <nmbs_crc_calc+0x94>)
 80009e6:	404a      	eors	r2, r1
 80009e8:	801a      	strh	r2, [r3, #0]
 80009ea:	e005      	b.n	80009f8 <nmbs_crc_calc+0x68>
            }
            else
                crc >>= 1;
 80009ec:	221e      	movs	r2, #30
 80009ee:	18bb      	adds	r3, r7, r2
 80009f0:	18ba      	adds	r2, r7, r2
 80009f2:	8812      	ldrh	r2, [r2, #0]
 80009f4:	0852      	lsrs	r2, r2, #1
 80009f6:	801a      	strh	r2, [r3, #0]
        for (int j = 8; j != 0; j--) {
 80009f8:	697b      	ldr	r3, [r7, #20]
 80009fa:	3b01      	subs	r3, #1
 80009fc:	617b      	str	r3, [r7, #20]
 80009fe:	697b      	ldr	r3, [r7, #20]
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d1e1      	bne.n	80009c8 <nmbs_crc_calc+0x38>
    for (uint32_t i = 0; i < length; i++) {
 8000a04:	69bb      	ldr	r3, [r7, #24]
 8000a06:	3301      	adds	r3, #1
 8000a08:	61bb      	str	r3, [r7, #24]
 8000a0a:	69ba      	ldr	r2, [r7, #24]
 8000a0c:	68bb      	ldr	r3, [r7, #8]
 8000a0e:	429a      	cmp	r2, r3
 8000a10:	d3cc      	bcc.n	80009ac <nmbs_crc_calc+0x1c>
        }
    }

    return (uint16_t) (crc << 8) | (uint16_t) (crc >> 8);
 8000a12:	231e      	movs	r3, #30
 8000a14:	18fb      	adds	r3, r7, r3
 8000a16:	881b      	ldrh	r3, [r3, #0]
 8000a18:	ba5b      	rev16	r3, r3
 8000a1a:	b29b      	uxth	r3, r3
}
 8000a1c:	0018      	movs	r0, r3
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	b008      	add	sp, #32
 8000a22:	bd80      	pop	{r7, pc}
 8000a24:	ffffa001 	.word	0xffffa001

08000a28 <recv>:


static nmbs_error recv(nmbs_t* nmbs, uint16_t count) {
 8000a28:	b5b0      	push	{r4, r5, r7, lr}
 8000a2a:	b084      	sub	sp, #16
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
 8000a30:	000a      	movs	r2, r1
 8000a32:	1cbb      	adds	r3, r7, #2
 8000a34:	801a      	strh	r2, [r3, #0]
    int32_t ret =
            nmbs->platform.read(nmbs->msg.buf + nmbs->msg.buf_idx, count, nmbs->byte_timeout_ms, nmbs->platform.arg);
 8000a36:	687a      	ldr	r2, [r7, #4]
 8000a38:	23a8      	movs	r3, #168	@ 0xa8
 8000a3a:	005b      	lsls	r3, r3, #1
 8000a3c:	58d4      	ldr	r4, [r2, r3]
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	6879      	ldr	r1, [r7, #4]
 8000a42:	2282      	movs	r2, #130	@ 0x82
 8000a44:	0052      	lsls	r2, r2, #1
 8000a46:	5a8a      	ldrh	r2, [r1, r2]
 8000a48:	1898      	adds	r0, r3, r2
 8000a4a:	687a      	ldr	r2, [r7, #4]
 8000a4c:	23a2      	movs	r3, #162	@ 0xa2
 8000a4e:	005b      	lsls	r3, r3, #1
 8000a50:	58d5      	ldr	r5, [r2, r3]
 8000a52:	687a      	ldr	r2, [r7, #4]
 8000a54:	23ae      	movs	r3, #174	@ 0xae
 8000a56:	005b      	lsls	r3, r3, #1
 8000a58:	58d2      	ldr	r2, [r2, r3]
 8000a5a:	1cbb      	adds	r3, r7, #2
 8000a5c:	8819      	ldrh	r1, [r3, #0]
 8000a5e:	0013      	movs	r3, r2
 8000a60:	002a      	movs	r2, r5
 8000a62:	47a0      	blx	r4
 8000a64:	0003      	movs	r3, r0
 8000a66:	60fb      	str	r3, [r7, #12]

    if (ret == count)
 8000a68:	1cbb      	adds	r3, r7, #2
 8000a6a:	881b      	ldrh	r3, [r3, #0]
 8000a6c:	68fa      	ldr	r2, [r7, #12]
 8000a6e:	429a      	cmp	r2, r3
 8000a70:	d101      	bne.n	8000a76 <recv+0x4e>
        return NMBS_ERROR_NONE;
 8000a72:	2300      	movs	r3, #0
 8000a74:	e00f      	b.n	8000a96 <recv+0x6e>

    if (ret < count) {
 8000a76:	1cbb      	adds	r3, r7, #2
 8000a78:	881b      	ldrh	r3, [r3, #0]
 8000a7a:	68fa      	ldr	r2, [r7, #12]
 8000a7c:	429a      	cmp	r2, r3
 8000a7e:	da08      	bge.n	8000a92 <recv+0x6a>
        if (ret < 0)
 8000a80:	68fb      	ldr	r3, [r7, #12]
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	da02      	bge.n	8000a8c <recv+0x64>
            return NMBS_ERROR_TRANSPORT;
 8000a86:	2304      	movs	r3, #4
 8000a88:	425b      	negs	r3, r3
 8000a8a:	e004      	b.n	8000a96 <recv+0x6e>

        return NMBS_ERROR_TIMEOUT;
 8000a8c:	2303      	movs	r3, #3
 8000a8e:	425b      	negs	r3, r3
 8000a90:	e001      	b.n	8000a96 <recv+0x6e>
    }

    return NMBS_ERROR_TRANSPORT;
 8000a92:	2304      	movs	r3, #4
 8000a94:	425b      	negs	r3, r3
}
 8000a96:	0018      	movs	r0, r3
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	b004      	add	sp, #16
 8000a9c:	bdb0      	pop	{r4, r5, r7, pc}

08000a9e <send>:


static nmbs_error send(nmbs_t* nmbs, uint16_t count) {
 8000a9e:	b5b0      	push	{r4, r5, r7, lr}
 8000aa0:	b084      	sub	sp, #16
 8000aa2:	af00      	add	r7, sp, #0
 8000aa4:	6078      	str	r0, [r7, #4]
 8000aa6:	000a      	movs	r2, r1
 8000aa8:	1cbb      	adds	r3, r7, #2
 8000aaa:	801a      	strh	r2, [r3, #0]
    int32_t ret = nmbs->platform.write(nmbs->msg.buf, count, nmbs->byte_timeout_ms, nmbs->platform.arg);
 8000aac:	687a      	ldr	r2, [r7, #4]
 8000aae:	23aa      	movs	r3, #170	@ 0xaa
 8000ab0:	005b      	lsls	r3, r3, #1
 8000ab2:	58d4      	ldr	r4, [r2, r3]
 8000ab4:	6878      	ldr	r0, [r7, #4]
 8000ab6:	687a      	ldr	r2, [r7, #4]
 8000ab8:	23a2      	movs	r3, #162	@ 0xa2
 8000aba:	005b      	lsls	r3, r3, #1
 8000abc:	58d5      	ldr	r5, [r2, r3]
 8000abe:	687a      	ldr	r2, [r7, #4]
 8000ac0:	23ae      	movs	r3, #174	@ 0xae
 8000ac2:	005b      	lsls	r3, r3, #1
 8000ac4:	58d2      	ldr	r2, [r2, r3]
 8000ac6:	1cbb      	adds	r3, r7, #2
 8000ac8:	8819      	ldrh	r1, [r3, #0]
 8000aca:	0013      	movs	r3, r2
 8000acc:	002a      	movs	r2, r5
 8000ace:	47a0      	blx	r4
 8000ad0:	0003      	movs	r3, r0
 8000ad2:	60fb      	str	r3, [r7, #12]

    if (ret == count)
 8000ad4:	1cbb      	adds	r3, r7, #2
 8000ad6:	881b      	ldrh	r3, [r3, #0]
 8000ad8:	68fa      	ldr	r2, [r7, #12]
 8000ada:	429a      	cmp	r2, r3
 8000adc:	d101      	bne.n	8000ae2 <send+0x44>
        return NMBS_ERROR_NONE;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	e00f      	b.n	8000b02 <send+0x64>

    if (ret < count) {
 8000ae2:	1cbb      	adds	r3, r7, #2
 8000ae4:	881b      	ldrh	r3, [r3, #0]
 8000ae6:	68fa      	ldr	r2, [r7, #12]
 8000ae8:	429a      	cmp	r2, r3
 8000aea:	da08      	bge.n	8000afe <send+0x60>
        if (ret < 0)
 8000aec:	68fb      	ldr	r3, [r7, #12]
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	da02      	bge.n	8000af8 <send+0x5a>
            return NMBS_ERROR_TRANSPORT;
 8000af2:	2304      	movs	r3, #4
 8000af4:	425b      	negs	r3, r3
 8000af6:	e004      	b.n	8000b02 <send+0x64>

        return NMBS_ERROR_TIMEOUT;
 8000af8:	2303      	movs	r3, #3
 8000afa:	425b      	negs	r3, r3
 8000afc:	e001      	b.n	8000b02 <send+0x64>
    }

    return NMBS_ERROR_TRANSPORT;
 8000afe:	2304      	movs	r3, #4
 8000b00:	425b      	negs	r3, r3
}
 8000b02:	0018      	movs	r0, r3
 8000b04:	46bd      	mov	sp, r7
 8000b06:	b004      	add	sp, #16
 8000b08:	bdb0      	pop	{r4, r5, r7, pc}

08000b0a <recv_msg_footer>:


static nmbs_error recv_msg_footer(nmbs_t* nmbs) {
 8000b0a:	b5b0      	push	{r4, r5, r7, lr}
 8000b0c:	b084      	sub	sp, #16
 8000b0e:	af00      	add	r7, sp, #0
 8000b10:	6078      	str	r0, [r7, #4]
    NMBS_DEBUG_PRINT("\n");

    if (nmbs->platform.transport == NMBS_TRANSPORT_RTU) {
 8000b12:	687a      	ldr	r2, [r7, #4]
 8000b14:	23a6      	movs	r3, #166	@ 0xa6
 8000b16:	005b      	lsls	r3, r3, #1
 8000b18:	5cd3      	ldrb	r3, [r2, r3]
 8000b1a:	2b01      	cmp	r3, #1
 8000b1c:	d137      	bne.n	8000b8e <recv_msg_footer+0x84>
        uint16_t crc = nmbs->platform.crc_calc(nmbs->msg.buf, nmbs->msg.buf_idx, nmbs->platform.arg);
 8000b1e:	687a      	ldr	r2, [r7, #4]
 8000b20:	23ac      	movs	r3, #172	@ 0xac
 8000b22:	005b      	lsls	r3, r3, #1
 8000b24:	58d3      	ldr	r3, [r2, r3]
 8000b26:	6878      	ldr	r0, [r7, #4]
 8000b28:	6879      	ldr	r1, [r7, #4]
 8000b2a:	2282      	movs	r2, #130	@ 0x82
 8000b2c:	0052      	lsls	r2, r2, #1
 8000b2e:	5a8a      	ldrh	r2, [r1, r2]
 8000b30:	0015      	movs	r5, r2
 8000b32:	6879      	ldr	r1, [r7, #4]
 8000b34:	22ae      	movs	r2, #174	@ 0xae
 8000b36:	0052      	lsls	r2, r2, #1
 8000b38:	588a      	ldr	r2, [r1, r2]
 8000b3a:	210e      	movs	r1, #14
 8000b3c:	187c      	adds	r4, r7, r1
 8000b3e:	0029      	movs	r1, r5
 8000b40:	4798      	blx	r3
 8000b42:	0003      	movs	r3, r0
 8000b44:	8023      	strh	r3, [r4, #0]

        nmbs_error err = recv(nmbs, 2);
 8000b46:	250d      	movs	r5, #13
 8000b48:	197c      	adds	r4, r7, r5
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	2102      	movs	r1, #2
 8000b4e:	0018      	movs	r0, r3
 8000b50:	f7ff ff6a 	bl	8000a28 <recv>
 8000b54:	0003      	movs	r3, r0
 8000b56:	7023      	strb	r3, [r4, #0]
        if (err != NMBS_ERROR_NONE)
 8000b58:	197b      	adds	r3, r7, r5
 8000b5a:	781b      	ldrb	r3, [r3, #0]
 8000b5c:	b25b      	sxtb	r3, r3
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d003      	beq.n	8000b6a <recv_msg_footer+0x60>
            return err;
 8000b62:	197b      	adds	r3, r7, r5
 8000b64:	781b      	ldrb	r3, [r3, #0]
 8000b66:	b25b      	sxtb	r3, r3
 8000b68:	e012      	b.n	8000b90 <recv_msg_footer+0x86>

        uint16_t recv_crc = get_2(nmbs);
 8000b6a:	250a      	movs	r5, #10
 8000b6c:	197c      	adds	r4, r7, r5
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	0018      	movs	r0, r3
 8000b72:	f7ff fd93 	bl	800069c <get_2>
 8000b76:	0003      	movs	r3, r0
 8000b78:	8023      	strh	r3, [r4, #0]

        if (recv_crc != crc)
 8000b7a:	197a      	adds	r2, r7, r5
 8000b7c:	230e      	movs	r3, #14
 8000b7e:	18fb      	adds	r3, r7, r3
 8000b80:	8812      	ldrh	r2, [r2, #0]
 8000b82:	881b      	ldrh	r3, [r3, #0]
 8000b84:	429a      	cmp	r2, r3
 8000b86:	d002      	beq.n	8000b8e <recv_msg_footer+0x84>
            return NMBS_ERROR_CRC;
 8000b88:	2305      	movs	r3, #5
 8000b8a:	425b      	negs	r3, r3
 8000b8c:	e000      	b.n	8000b90 <recv_msg_footer+0x86>
    }

    return NMBS_ERROR_NONE;
 8000b8e:	2300      	movs	r3, #0
}
 8000b90:	0018      	movs	r0, r3
 8000b92:	46bd      	mov	sp, r7
 8000b94:	b004      	add	sp, #16
 8000b96:	bdb0      	pop	{r4, r5, r7, pc}

08000b98 <recv_msg_header>:


static nmbs_error recv_msg_header(nmbs_t* nmbs, bool* first_byte_received) {
 8000b98:	b5b0      	push	{r4, r5, r7, lr}
 8000b9a:	b086      	sub	sp, #24
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
 8000ba0:	6039      	str	r1, [r7, #0]
    // We wait for the read timeout here, just for the first message byte
    int32_t old_byte_timeout = nmbs->byte_timeout_ms;
 8000ba2:	687a      	ldr	r2, [r7, #4]
 8000ba4:	23a2      	movs	r3, #162	@ 0xa2
 8000ba6:	005b      	lsls	r3, r3, #1
 8000ba8:	58d3      	ldr	r3, [r2, r3]
 8000baa:	617b      	str	r3, [r7, #20]
    nmbs->byte_timeout_ms = nmbs->read_timeout_ms;
 8000bac:	687a      	ldr	r2, [r7, #4]
 8000bae:	23a4      	movs	r3, #164	@ 0xa4
 8000bb0:	005b      	lsls	r3, r3, #1
 8000bb2:	58d1      	ldr	r1, [r2, r3]
 8000bb4:	687a      	ldr	r2, [r7, #4]
 8000bb6:	23a2      	movs	r3, #162	@ 0xa2
 8000bb8:	005b      	lsls	r3, r3, #1
 8000bba:	50d1      	str	r1, [r2, r3]

    msg_state_reset(nmbs);
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	0018      	movs	r0, r3
 8000bc0:	f7ff fdce 	bl	8000760 <msg_state_reset>

    *first_byte_received = false;
 8000bc4:	683b      	ldr	r3, [r7, #0]
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	701a      	strb	r2, [r3, #0]

    if (nmbs->platform.transport == NMBS_TRANSPORT_RTU) {
 8000bca:	687a      	ldr	r2, [r7, #4]
 8000bcc:	23a6      	movs	r3, #166	@ 0xa6
 8000bce:	005b      	lsls	r3, r3, #1
 8000bd0:	5cd3      	ldrb	r3, [r2, r3]
 8000bd2:	2b01      	cmp	r3, #1
 8000bd4:	d140      	bne.n	8000c58 <recv_msg_header+0xc0>
        nmbs_error err = recv(nmbs, 1);
 8000bd6:	250d      	movs	r5, #13
 8000bd8:	197c      	adds	r4, r7, r5
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	2101      	movs	r1, #1
 8000bde:	0018      	movs	r0, r3
 8000be0:	f7ff ff22 	bl	8000a28 <recv>
 8000be4:	0003      	movs	r3, r0
 8000be6:	7023      	strb	r3, [r4, #0]

        nmbs->byte_timeout_ms = old_byte_timeout;
 8000be8:	687a      	ldr	r2, [r7, #4]
 8000bea:	23a2      	movs	r3, #162	@ 0xa2
 8000bec:	005b      	lsls	r3, r3, #1
 8000bee:	6979      	ldr	r1, [r7, #20]
 8000bf0:	50d1      	str	r1, [r2, r3]

        if (err != NMBS_ERROR_NONE)
 8000bf2:	197b      	adds	r3, r7, r5
 8000bf4:	781b      	ldrb	r3, [r3, #0]
 8000bf6:	b25b      	sxtb	r3, r3
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d003      	beq.n	8000c04 <recv_msg_header+0x6c>
            return err;
 8000bfc:	197b      	adds	r3, r7, r5
 8000bfe:	781b      	ldrb	r3, [r3, #0]
 8000c00:	b25b      	sxtb	r3, r3
 8000c02:	e0a1      	b.n	8000d48 <recv_msg_header+0x1b0>

        *first_byte_received = true;
 8000c04:	683b      	ldr	r3, [r7, #0]
 8000c06:	2201      	movs	r2, #1
 8000c08:	701a      	strb	r2, [r3, #0]

        nmbs->msg.unit_id = get_1(nmbs);
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	0018      	movs	r0, r3
 8000c0e:	f7ff fcf7 	bl	8000600 <get_1>
 8000c12:	0003      	movs	r3, r0
 8000c14:	0019      	movs	r1, r3
 8000c16:	687a      	ldr	r2, [r7, #4]
 8000c18:	2383      	movs	r3, #131	@ 0x83
 8000c1a:	005b      	lsls	r3, r3, #1
 8000c1c:	54d1      	strb	r1, [r2, r3]

        err = recv(nmbs, 1);
 8000c1e:	250d      	movs	r5, #13
 8000c20:	197c      	adds	r4, r7, r5
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	2101      	movs	r1, #1
 8000c26:	0018      	movs	r0, r3
 8000c28:	f7ff fefe 	bl	8000a28 <recv>
 8000c2c:	0003      	movs	r3, r0
 8000c2e:	7023      	strb	r3, [r4, #0]
        if (err != NMBS_ERROR_NONE)
 8000c30:	197b      	adds	r3, r7, r5
 8000c32:	781b      	ldrb	r3, [r3, #0]
 8000c34:	b25b      	sxtb	r3, r3
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d003      	beq.n	8000c42 <recv_msg_header+0xaa>
            return err;
 8000c3a:	197b      	adds	r3, r7, r5
 8000c3c:	781b      	ldrb	r3, [r3, #0]
 8000c3e:	b25b      	sxtb	r3, r3
 8000c40:	e082      	b.n	8000d48 <recv_msg_header+0x1b0>

        nmbs->msg.fc = get_1(nmbs);
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	0018      	movs	r0, r3
 8000c46:	f7ff fcdb 	bl	8000600 <get_1>
 8000c4a:	0003      	movs	r3, r0
 8000c4c:	0019      	movs	r1, r3
 8000c4e:	687a      	ldr	r2, [r7, #4]
 8000c50:	2308      	movs	r3, #8
 8000c52:	33ff      	adds	r3, #255	@ 0xff
 8000c54:	54d1      	strb	r1, [r2, r3]
 8000c56:	e076      	b.n	8000d46 <recv_msg_header+0x1ae>
    }
    else if (nmbs->platform.transport == NMBS_TRANSPORT_TCP) {
 8000c58:	687a      	ldr	r2, [r7, #4]
 8000c5a:	23a6      	movs	r3, #166	@ 0xa6
 8000c5c:	005b      	lsls	r3, r3, #1
 8000c5e:	5cd3      	ldrb	r3, [r2, r3]
 8000c60:	2b02      	cmp	r3, #2
 8000c62:	d170      	bne.n	8000d46 <recv_msg_header+0x1ae>
        nmbs_error err = recv(nmbs, 1);
 8000c64:	2513      	movs	r5, #19
 8000c66:	197c      	adds	r4, r7, r5
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	2101      	movs	r1, #1
 8000c6c:	0018      	movs	r0, r3
 8000c6e:	f7ff fedb 	bl	8000a28 <recv>
 8000c72:	0003      	movs	r3, r0
 8000c74:	7023      	strb	r3, [r4, #0]

        nmbs->byte_timeout_ms = old_byte_timeout;
 8000c76:	687a      	ldr	r2, [r7, #4]
 8000c78:	23a2      	movs	r3, #162	@ 0xa2
 8000c7a:	005b      	lsls	r3, r3, #1
 8000c7c:	6979      	ldr	r1, [r7, #20]
 8000c7e:	50d1      	str	r1, [r2, r3]

        if (err != NMBS_ERROR_NONE)
 8000c80:	197b      	adds	r3, r7, r5
 8000c82:	781b      	ldrb	r3, [r3, #0]
 8000c84:	b25b      	sxtb	r3, r3
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d003      	beq.n	8000c92 <recv_msg_header+0xfa>
            return err;
 8000c8a:	197b      	adds	r3, r7, r5
 8000c8c:	781b      	ldrb	r3, [r3, #0]
 8000c8e:	b25b      	sxtb	r3, r3
 8000c90:	e05a      	b.n	8000d48 <recv_msg_header+0x1b0>

        *first_byte_received = true;
 8000c92:	683b      	ldr	r3, [r7, #0]
 8000c94:	2201      	movs	r2, #1
 8000c96:	701a      	strb	r2, [r3, #0]

        // Advance buf_idx
        discard_1(nmbs);
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	0018      	movs	r0, r3
 8000c9c:	f7ff fcec 	bl	8000678 <discard_1>

        err = recv(nmbs, 7);
 8000ca0:	2513      	movs	r5, #19
 8000ca2:	197c      	adds	r4, r7, r5
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	2107      	movs	r1, #7
 8000ca8:	0018      	movs	r0, r3
 8000caa:	f7ff febd 	bl	8000a28 <recv>
 8000cae:	0003      	movs	r3, r0
 8000cb0:	7023      	strb	r3, [r4, #0]
        if (err != NMBS_ERROR_NONE)
 8000cb2:	197b      	adds	r3, r7, r5
 8000cb4:	781b      	ldrb	r3, [r3, #0]
 8000cb6:	b25b      	sxtb	r3, r3
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d003      	beq.n	8000cc4 <recv_msg_header+0x12c>
            return err;
 8000cbc:	197b      	adds	r3, r7, r5
 8000cbe:	781b      	ldrb	r3, [r3, #0]
 8000cc0:	b25b      	sxtb	r3, r3
 8000cc2:	e041      	b.n	8000d48 <recv_msg_header+0x1b0>

        // Starting over
        msg_buf_reset(nmbs);
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	0018      	movs	r0, r3
 8000cc8:	f7ff fd3d 	bl	8000746 <msg_buf_reset>

        nmbs->msg.transaction_id = get_2(nmbs);
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	0018      	movs	r0, r3
 8000cd0:	f7ff fce4 	bl	800069c <get_2>
 8000cd4:	0003      	movs	r3, r0
 8000cd6:	0019      	movs	r1, r3
 8000cd8:	687a      	ldr	r2, [r7, #4]
 8000cda:	2384      	movs	r3, #132	@ 0x84
 8000cdc:	005b      	lsls	r3, r3, #1
 8000cde:	52d1      	strh	r1, [r2, r3]
        uint16_t protocol_id = get_2(nmbs);
 8000ce0:	2510      	movs	r5, #16
 8000ce2:	197c      	adds	r4, r7, r5
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	0018      	movs	r0, r3
 8000ce8:	f7ff fcd8 	bl	800069c <get_2>
 8000cec:	0003      	movs	r3, r0
 8000cee:	8023      	strh	r3, [r4, #0]
        uint16_t length = get_2(nmbs);    // We should actually check the length of the request against this value
 8000cf0:	230e      	movs	r3, #14
 8000cf2:	18fc      	adds	r4, r7, r3
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	0018      	movs	r0, r3
 8000cf8:	f7ff fcd0 	bl	800069c <get_2>
 8000cfc:	0003      	movs	r3, r0
 8000cfe:	8023      	strh	r3, [r4, #0]
        nmbs->msg.unit_id = get_1(nmbs);
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	0018      	movs	r0, r3
 8000d04:	f7ff fc7c 	bl	8000600 <get_1>
 8000d08:	0003      	movs	r3, r0
 8000d0a:	0019      	movs	r1, r3
 8000d0c:	687a      	ldr	r2, [r7, #4]
 8000d0e:	2383      	movs	r3, #131	@ 0x83
 8000d10:	005b      	lsls	r3, r3, #1
 8000d12:	54d1      	strb	r1, [r2, r3]
        nmbs->msg.fc = get_1(nmbs);
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	0018      	movs	r0, r3
 8000d18:	f7ff fc72 	bl	8000600 <get_1>
 8000d1c:	0003      	movs	r3, r0
 8000d1e:	0019      	movs	r1, r3
 8000d20:	687a      	ldr	r2, [r7, #4]
 8000d22:	2308      	movs	r3, #8
 8000d24:	33ff      	adds	r3, #255	@ 0xff
 8000d26:	54d1      	strb	r1, [r2, r3]

        if (protocol_id != 0)
 8000d28:	197b      	adds	r3, r7, r5
 8000d2a:	881b      	ldrh	r3, [r3, #0]
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d002      	beq.n	8000d36 <recv_msg_header+0x19e>
            return NMBS_ERROR_INVALID_TCP_MBAP;
 8000d30:	2306      	movs	r3, #6
 8000d32:	425b      	negs	r3, r3
 8000d34:	e008      	b.n	8000d48 <recv_msg_header+0x1b0>

        if (length > 255)
 8000d36:	230e      	movs	r3, #14
 8000d38:	18fb      	adds	r3, r7, r3
 8000d3a:	881b      	ldrh	r3, [r3, #0]
 8000d3c:	2bff      	cmp	r3, #255	@ 0xff
 8000d3e:	d902      	bls.n	8000d46 <recv_msg_header+0x1ae>
            return NMBS_ERROR_INVALID_TCP_MBAP;
 8000d40:	2306      	movs	r3, #6
 8000d42:	425b      	negs	r3, r3
 8000d44:	e000      	b.n	8000d48 <recv_msg_header+0x1b0>
    }

    return NMBS_ERROR_NONE;
 8000d46:	2300      	movs	r3, #0
}
 8000d48:	0018      	movs	r0, r3
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	b006      	add	sp, #24
 8000d4e:	bdb0      	pop	{r4, r5, r7, pc}

08000d50 <put_msg_header>:


static void put_msg_header(nmbs_t* nmbs, uint16_t data_length) {
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b082      	sub	sp, #8
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
 8000d58:	000a      	movs	r2, r1
 8000d5a:	1cbb      	adds	r3, r7, #2
 8000d5c:	801a      	strh	r2, [r3, #0]
    msg_buf_reset(nmbs);
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	0018      	movs	r0, r3
 8000d62:	f7ff fcf0 	bl	8000746 <msg_buf_reset>

    if (nmbs->platform.transport == NMBS_TRANSPORT_RTU) {
 8000d66:	687a      	ldr	r2, [r7, #4]
 8000d68:	23a6      	movs	r3, #166	@ 0xa6
 8000d6a:	005b      	lsls	r3, r3, #1
 8000d6c:	5cd3      	ldrb	r3, [r2, r3]
 8000d6e:	2b01      	cmp	r3, #1
 8000d70:	d109      	bne.n	8000d86 <put_msg_header+0x36>
        put_1(nmbs, nmbs->msg.unit_id);
 8000d72:	687a      	ldr	r2, [r7, #4]
 8000d74:	2383      	movs	r3, #131	@ 0x83
 8000d76:	005b      	lsls	r3, r3, #1
 8000d78:	5cd2      	ldrb	r2, [r2, r3]
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	0011      	movs	r1, r2
 8000d7e:	0018      	movs	r0, r3
 8000d80:	f7ff fc5c 	bl	800063c <put_1>
 8000d84:	e025      	b.n	8000dd2 <put_msg_header+0x82>
    }
    else if (nmbs->platform.transport == NMBS_TRANSPORT_TCP) {
 8000d86:	687a      	ldr	r2, [r7, #4]
 8000d88:	23a6      	movs	r3, #166	@ 0xa6
 8000d8a:	005b      	lsls	r3, r3, #1
 8000d8c:	5cd3      	ldrb	r3, [r2, r3]
 8000d8e:	2b02      	cmp	r3, #2
 8000d90:	d11f      	bne.n	8000dd2 <put_msg_header+0x82>
        put_2(nmbs, nmbs->msg.transaction_id);
 8000d92:	687a      	ldr	r2, [r7, #4]
 8000d94:	2384      	movs	r3, #132	@ 0x84
 8000d96:	005b      	lsls	r3, r3, #1
 8000d98:	5ad2      	ldrh	r2, [r2, r3]
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	0011      	movs	r1, r2
 8000d9e:	0018      	movs	r0, r3
 8000da0:	f7ff fca6 	bl	80006f0 <put_2>
        put_2(nmbs, 0);
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	2100      	movs	r1, #0
 8000da8:	0018      	movs	r0, r3
 8000daa:	f7ff fca1 	bl	80006f0 <put_2>
        put_2(nmbs, (uint16_t) (1 + 1 + data_length));
 8000dae:	1cbb      	adds	r3, r7, #2
 8000db0:	881b      	ldrh	r3, [r3, #0]
 8000db2:	3302      	adds	r3, #2
 8000db4:	b29a      	uxth	r2, r3
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	0011      	movs	r1, r2
 8000dba:	0018      	movs	r0, r3
 8000dbc:	f7ff fc98 	bl	80006f0 <put_2>
        put_1(nmbs, nmbs->msg.unit_id);
 8000dc0:	687a      	ldr	r2, [r7, #4]
 8000dc2:	2383      	movs	r3, #131	@ 0x83
 8000dc4:	005b      	lsls	r3, r3, #1
 8000dc6:	5cd2      	ldrb	r2, [r2, r3]
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	0011      	movs	r1, r2
 8000dcc:	0018      	movs	r0, r3
 8000dce:	f7ff fc35 	bl	800063c <put_1>
    }

    put_1(nmbs, nmbs->msg.fc);
 8000dd2:	687a      	ldr	r2, [r7, #4]
 8000dd4:	2308      	movs	r3, #8
 8000dd6:	33ff      	adds	r3, #255	@ 0xff
 8000dd8:	5cd2      	ldrb	r2, [r2, r3]
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	0011      	movs	r1, r2
 8000dde:	0018      	movs	r0, r3
 8000de0:	f7ff fc2c 	bl	800063c <put_1>
}
 8000de4:	46c0      	nop			@ (mov r8, r8)
 8000de6:	46bd      	mov	sp, r7
 8000de8:	b002      	add	sp, #8
 8000dea:	bd80      	pop	{r7, pc}

08000dec <send_msg>:
}
#endif
#endif


static nmbs_error send_msg(nmbs_t* nmbs) {
 8000dec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000dee:	b085      	sub	sp, #20
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
    NMBS_DEBUG_PRINT("\n");

    if (nmbs->platform.transport == NMBS_TRANSPORT_RTU) {
 8000df4:	687a      	ldr	r2, [r7, #4]
 8000df6:	23a6      	movs	r3, #166	@ 0xa6
 8000df8:	005b      	lsls	r3, r3, #1
 8000dfa:	5cd3      	ldrb	r3, [r2, r3]
 8000dfc:	2b01      	cmp	r3, #1
 8000dfe:	d11a      	bne.n	8000e36 <send_msg+0x4a>
        uint16_t crc = nmbs->platform.crc_calc(nmbs->msg.buf, nmbs->msg.buf_idx, nmbs->platform.arg);
 8000e00:	687a      	ldr	r2, [r7, #4]
 8000e02:	23ac      	movs	r3, #172	@ 0xac
 8000e04:	005b      	lsls	r3, r3, #1
 8000e06:	58d3      	ldr	r3, [r2, r3]
 8000e08:	6878      	ldr	r0, [r7, #4]
 8000e0a:	6879      	ldr	r1, [r7, #4]
 8000e0c:	2282      	movs	r2, #130	@ 0x82
 8000e0e:	0052      	lsls	r2, r2, #1
 8000e10:	5a8a      	ldrh	r2, [r1, r2]
 8000e12:	0015      	movs	r5, r2
 8000e14:	6879      	ldr	r1, [r7, #4]
 8000e16:	22ae      	movs	r2, #174	@ 0xae
 8000e18:	0052      	lsls	r2, r2, #1
 8000e1a:	588a      	ldr	r2, [r1, r2]
 8000e1c:	260e      	movs	r6, #14
 8000e1e:	19bc      	adds	r4, r7, r6
 8000e20:	0029      	movs	r1, r5
 8000e22:	4798      	blx	r3
 8000e24:	0003      	movs	r3, r0
 8000e26:	8023      	strh	r3, [r4, #0]
        put_2(nmbs, crc);
 8000e28:	19bb      	adds	r3, r7, r6
 8000e2a:	881a      	ldrh	r2, [r3, #0]
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	0011      	movs	r1, r2
 8000e30:	0018      	movs	r0, r3
 8000e32:	f7ff fc5d 	bl	80006f0 <put_2>
    }

    nmbs_error err = send(nmbs, nmbs->msg.buf_idx);
 8000e36:	687a      	ldr	r2, [r7, #4]
 8000e38:	2382      	movs	r3, #130	@ 0x82
 8000e3a:	005b      	lsls	r3, r3, #1
 8000e3c:	5ad2      	ldrh	r2, [r2, r3]
 8000e3e:	250d      	movs	r5, #13
 8000e40:	197c      	adds	r4, r7, r5
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	0011      	movs	r1, r2
 8000e46:	0018      	movs	r0, r3
 8000e48:	f7ff fe29 	bl	8000a9e <send>
 8000e4c:	0003      	movs	r3, r0
 8000e4e:	7023      	strb	r3, [r4, #0]

    return err;
 8000e50:	197b      	adds	r3, r7, r5
 8000e52:	781b      	ldrb	r3, [r3, #0]
 8000e54:	b25b      	sxtb	r3, r3
}
 8000e56:	0018      	movs	r0, r3
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	b005      	add	sp, #20
 8000e5c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000e5e <recv_res_header>:
    return send_msg(nmbs);
}
#endif


static nmbs_error recv_res_header(nmbs_t* nmbs) {
 8000e5e:	b5b0      	push	{r4, r5, r7, lr}
 8000e60:	b084      	sub	sp, #16
 8000e62:	af00      	add	r7, sp, #0
 8000e64:	6078      	str	r0, [r7, #4]
    uint16_t req_transaction_id = nmbs->msg.transaction_id;
 8000e66:	230e      	movs	r3, #14
 8000e68:	18fb      	adds	r3, r7, r3
 8000e6a:	6879      	ldr	r1, [r7, #4]
 8000e6c:	2284      	movs	r2, #132	@ 0x84
 8000e6e:	0052      	lsls	r2, r2, #1
 8000e70:	5a8a      	ldrh	r2, [r1, r2]
 8000e72:	801a      	strh	r2, [r3, #0]
    uint8_t req_unit_id = nmbs->msg.unit_id;
 8000e74:	230d      	movs	r3, #13
 8000e76:	18fb      	adds	r3, r7, r3
 8000e78:	6879      	ldr	r1, [r7, #4]
 8000e7a:	2283      	movs	r2, #131	@ 0x83
 8000e7c:	0052      	lsls	r2, r2, #1
 8000e7e:	5c8a      	ldrb	r2, [r1, r2]
 8000e80:	701a      	strb	r2, [r3, #0]
    uint8_t req_fc = nmbs->msg.fc;
 8000e82:	230c      	movs	r3, #12
 8000e84:	18fb      	adds	r3, r7, r3
 8000e86:	6879      	ldr	r1, [r7, #4]
 8000e88:	2208      	movs	r2, #8
 8000e8a:	32ff      	adds	r2, #255	@ 0xff
 8000e8c:	5c8a      	ldrb	r2, [r1, r2]
 8000e8e:	701a      	strb	r2, [r3, #0]

    bool first_byte_received = false;
 8000e90:	2109      	movs	r1, #9
 8000e92:	187b      	adds	r3, r7, r1
 8000e94:	2200      	movs	r2, #0
 8000e96:	701a      	strb	r2, [r3, #0]
    nmbs_error err = recv_msg_header(nmbs, &first_byte_received);
 8000e98:	250b      	movs	r5, #11
 8000e9a:	197c      	adds	r4, r7, r5
 8000e9c:	187a      	adds	r2, r7, r1
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	0011      	movs	r1, r2
 8000ea2:	0018      	movs	r0, r3
 8000ea4:	f7ff fe78 	bl	8000b98 <recv_msg_header>
 8000ea8:	0003      	movs	r3, r0
 8000eaa:	7023      	strb	r3, [r4, #0]
    if (err != NMBS_ERROR_NONE)
 8000eac:	197b      	adds	r3, r7, r5
 8000eae:	781b      	ldrb	r3, [r3, #0]
 8000eb0:	b25b      	sxtb	r3, r3
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d003      	beq.n	8000ebe <recv_res_header+0x60>
        return err;
 8000eb6:	197b      	adds	r3, r7, r5
 8000eb8:	781b      	ldrb	r3, [r3, #0]
 8000eba:	b25b      	sxtb	r3, r3
 8000ebc:	e076      	b.n	8000fac <recv_res_header+0x14e>

    if (nmbs->platform.transport == NMBS_TRANSPORT_TCP) {
 8000ebe:	687a      	ldr	r2, [r7, #4]
 8000ec0:	23a6      	movs	r3, #166	@ 0xa6
 8000ec2:	005b      	lsls	r3, r3, #1
 8000ec4:	5cd3      	ldrb	r3, [r2, r3]
 8000ec6:	2b02      	cmp	r3, #2
 8000ec8:	d10b      	bne.n	8000ee2 <recv_res_header+0x84>
        if (nmbs->msg.transaction_id != req_transaction_id)
 8000eca:	687a      	ldr	r2, [r7, #4]
 8000ecc:	2384      	movs	r3, #132	@ 0x84
 8000ece:	005b      	lsls	r3, r3, #1
 8000ed0:	5ad3      	ldrh	r3, [r2, r3]
 8000ed2:	220e      	movs	r2, #14
 8000ed4:	18ba      	adds	r2, r7, r2
 8000ed6:	8812      	ldrh	r2, [r2, #0]
 8000ed8:	429a      	cmp	r2, r3
 8000eda:	d002      	beq.n	8000ee2 <recv_res_header+0x84>
            return NMBS_ERROR_INVALID_TCP_MBAP;
 8000edc:	2306      	movs	r3, #6
 8000ede:	425b      	negs	r3, r3
 8000ee0:	e064      	b.n	8000fac <recv_res_header+0x14e>
    }

    if (nmbs->platform.transport == NMBS_TRANSPORT_RTU && nmbs->msg.unit_id != req_unit_id)
 8000ee2:	687a      	ldr	r2, [r7, #4]
 8000ee4:	23a6      	movs	r3, #166	@ 0xa6
 8000ee6:	005b      	lsls	r3, r3, #1
 8000ee8:	5cd3      	ldrb	r3, [r2, r3]
 8000eea:	2b01      	cmp	r3, #1
 8000eec:	d10b      	bne.n	8000f06 <recv_res_header+0xa8>
 8000eee:	687a      	ldr	r2, [r7, #4]
 8000ef0:	2383      	movs	r3, #131	@ 0x83
 8000ef2:	005b      	lsls	r3, r3, #1
 8000ef4:	5cd3      	ldrb	r3, [r2, r3]
 8000ef6:	220d      	movs	r2, #13
 8000ef8:	18ba      	adds	r2, r7, r2
 8000efa:	7812      	ldrb	r2, [r2, #0]
 8000efc:	429a      	cmp	r2, r3
 8000efe:	d002      	beq.n	8000f06 <recv_res_header+0xa8>
        return NMBS_ERROR_INVALID_UNIT_ID;
 8000f00:	2307      	movs	r3, #7
 8000f02:	425b      	negs	r3, r3
 8000f04:	e052      	b.n	8000fac <recv_res_header+0x14e>

    if (nmbs->msg.fc != req_fc) {
 8000f06:	687a      	ldr	r2, [r7, #4]
 8000f08:	2308      	movs	r3, #8
 8000f0a:	33ff      	adds	r3, #255	@ 0xff
 8000f0c:	5cd3      	ldrb	r3, [r2, r3]
 8000f0e:	210c      	movs	r1, #12
 8000f10:	187a      	adds	r2, r7, r1
 8000f12:	7812      	ldrb	r2, [r2, #0]
 8000f14:	429a      	cmp	r2, r3
 8000f16:	d048      	beq.n	8000faa <recv_res_header+0x14c>
        if (nmbs->msg.fc - 0x80 == req_fc) {
 8000f18:	687a      	ldr	r2, [r7, #4]
 8000f1a:	2308      	movs	r3, #8
 8000f1c:	33ff      	adds	r3, #255	@ 0xff
 8000f1e:	5cd3      	ldrb	r3, [r2, r3]
 8000f20:	3b80      	subs	r3, #128	@ 0x80
 8000f22:	001a      	movs	r2, r3
 8000f24:	187b      	adds	r3, r7, r1
 8000f26:	781b      	ldrb	r3, [r3, #0]
 8000f28:	429a      	cmp	r2, r3
 8000f2a:	d13b      	bne.n	8000fa4 <recv_res_header+0x146>
            err = recv(nmbs, 1);
 8000f2c:	250b      	movs	r5, #11
 8000f2e:	197c      	adds	r4, r7, r5
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	2101      	movs	r1, #1
 8000f34:	0018      	movs	r0, r3
 8000f36:	f7ff fd77 	bl	8000a28 <recv>
 8000f3a:	0003      	movs	r3, r0
 8000f3c:	7023      	strb	r3, [r4, #0]
            if (err != NMBS_ERROR_NONE)
 8000f3e:	197b      	adds	r3, r7, r5
 8000f40:	781b      	ldrb	r3, [r3, #0]
 8000f42:	b25b      	sxtb	r3, r3
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d003      	beq.n	8000f50 <recv_res_header+0xf2>
                return err;
 8000f48:	197b      	adds	r3, r7, r5
 8000f4a:	781b      	ldrb	r3, [r3, #0]
 8000f4c:	b25b      	sxtb	r3, r3
 8000f4e:	e02d      	b.n	8000fac <recv_res_header+0x14e>

            uint8_t exception = get_1(nmbs);
 8000f50:	230a      	movs	r3, #10
 8000f52:	18fc      	adds	r4, r7, r3
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	0018      	movs	r0, r3
 8000f58:	f7ff fb52 	bl	8000600 <get_1>
 8000f5c:	0003      	movs	r3, r0
 8000f5e:	7023      	strb	r3, [r4, #0]
            err = recv_msg_footer(nmbs);
 8000f60:	250b      	movs	r5, #11
 8000f62:	197c      	adds	r4, r7, r5
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	0018      	movs	r0, r3
 8000f68:	f7ff fdcf 	bl	8000b0a <recv_msg_footer>
 8000f6c:	0003      	movs	r3, r0
 8000f6e:	7023      	strb	r3, [r4, #0]
            if (err != NMBS_ERROR_NONE)
 8000f70:	197b      	adds	r3, r7, r5
 8000f72:	781b      	ldrb	r3, [r3, #0]
 8000f74:	b25b      	sxtb	r3, r3
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d003      	beq.n	8000f82 <recv_res_header+0x124>
                return err;
 8000f7a:	197b      	adds	r3, r7, r5
 8000f7c:	781b      	ldrb	r3, [r3, #0]
 8000f7e:	b25b      	sxtb	r3, r3
 8000f80:	e014      	b.n	8000fac <recv_res_header+0x14e>

            if (exception < 1 || exception > 4)
 8000f82:	220a      	movs	r2, #10
 8000f84:	18bb      	adds	r3, r7, r2
 8000f86:	781b      	ldrb	r3, [r3, #0]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d003      	beq.n	8000f94 <recv_res_header+0x136>
 8000f8c:	18bb      	adds	r3, r7, r2
 8000f8e:	781b      	ldrb	r3, [r3, #0]
 8000f90:	2b04      	cmp	r3, #4
 8000f92:	d902      	bls.n	8000f9a <recv_res_header+0x13c>
                return NMBS_ERROR_INVALID_RESPONSE;
 8000f94:	2302      	movs	r3, #2
 8000f96:	425b      	negs	r3, r3
 8000f98:	e008      	b.n	8000fac <recv_res_header+0x14e>

            NMBS_DEBUG_PRINT("%d NMBS res <- address_rtu %d\texception %d\n", nmbs->address_rtu, nmbs->msg.unit_id,
                             exception);
            return (nmbs_error) exception;
 8000f9a:	230a      	movs	r3, #10
 8000f9c:	18fb      	adds	r3, r7, r3
 8000f9e:	781b      	ldrb	r3, [r3, #0]
 8000fa0:	b25b      	sxtb	r3, r3
 8000fa2:	e003      	b.n	8000fac <recv_res_header+0x14e>
        }

        return NMBS_ERROR_INVALID_RESPONSE;
 8000fa4:	2302      	movs	r3, #2
 8000fa6:	425b      	negs	r3, r3
 8000fa8:	e000      	b.n	8000fac <recv_res_header+0x14e>
    }

    NMBS_DEBUG_PRINT("%d NMBS res <- address_rtu %d\tfc %d\t", nmbs->address_rtu, nmbs->msg.unit_id, nmbs->msg.fc);

    return NMBS_ERROR_NONE;
 8000faa:	2300      	movs	r3, #0
}
 8000fac:	0018      	movs	r0, r3
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	b004      	add	sp, #16
 8000fb2:	bdb0      	pop	{r4, r5, r7, pc}

08000fb4 <put_req_header>:


#ifndef NMBS_CLIENT_DISABLED
static void put_req_header(nmbs_t* nmbs, uint16_t data_length) {
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b082      	sub	sp, #8
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
 8000fbc:	000a      	movs	r2, r1
 8000fbe:	1cbb      	adds	r3, r7, #2
 8000fc0:	801a      	strh	r2, [r3, #0]
    put_msg_header(nmbs, data_length);
 8000fc2:	1cbb      	adds	r3, r7, #2
 8000fc4:	881a      	ldrh	r2, [r3, #0]
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	0011      	movs	r1, r2
 8000fca:	0018      	movs	r0, r3
 8000fcc:	f7ff fec0 	bl	8000d50 <put_msg_header>
            printf("address_rtu %d\t", nmbs->dest_address_rtu);
    }

    printf("fc %d\t", nmbs->msg.fc);
#endif
}
 8000fd0:	46c0      	nop			@ (mov r8, r8)
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	b002      	add	sp, #8
 8000fd6:	bd80      	pop	{r7, pc}

08000fd8 <recv_write_single_register_res>:

    return NMBS_ERROR_NONE;
}


nmbs_error recv_write_single_register_res(nmbs_t* nmbs, uint16_t address, uint16_t value_req) {
 8000fd8:	b5b0      	push	{r4, r5, r7, lr}
 8000fda:	b084      	sub	sp, #16
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
 8000fe0:	0008      	movs	r0, r1
 8000fe2:	0011      	movs	r1, r2
 8000fe4:	1cbb      	adds	r3, r7, #2
 8000fe6:	1c02      	adds	r2, r0, #0
 8000fe8:	801a      	strh	r2, [r3, #0]
 8000fea:	003b      	movs	r3, r7
 8000fec:	1c0a      	adds	r2, r1, #0
 8000fee:	801a      	strh	r2, [r3, #0]
    nmbs_error err = recv_res_header(nmbs);
 8000ff0:	250f      	movs	r5, #15
 8000ff2:	197c      	adds	r4, r7, r5
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	0018      	movs	r0, r3
 8000ff8:	f7ff ff31 	bl	8000e5e <recv_res_header>
 8000ffc:	0003      	movs	r3, r0
 8000ffe:	7023      	strb	r3, [r4, #0]
    if (err != NMBS_ERROR_NONE)
 8001000:	197b      	adds	r3, r7, r5
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	b25b      	sxtb	r3, r3
 8001006:	2b00      	cmp	r3, #0
 8001008:	d003      	beq.n	8001012 <recv_write_single_register_res+0x3a>
        return err;
 800100a:	197b      	adds	r3, r7, r5
 800100c:	781b      	ldrb	r3, [r3, #0]
 800100e:	b25b      	sxtb	r3, r3
 8001010:	e047      	b.n	80010a2 <recv_write_single_register_res+0xca>

    err = recv(nmbs, 4);
 8001012:	250f      	movs	r5, #15
 8001014:	197c      	adds	r4, r7, r5
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	2104      	movs	r1, #4
 800101a:	0018      	movs	r0, r3
 800101c:	f7ff fd04 	bl	8000a28 <recv>
 8001020:	0003      	movs	r3, r0
 8001022:	7023      	strb	r3, [r4, #0]
    if (err != NMBS_ERROR_NONE)
 8001024:	197b      	adds	r3, r7, r5
 8001026:	781b      	ldrb	r3, [r3, #0]
 8001028:	b25b      	sxtb	r3, r3
 800102a:	2b00      	cmp	r3, #0
 800102c:	d003      	beq.n	8001036 <recv_write_single_register_res+0x5e>
        return err;
 800102e:	197b      	adds	r3, r7, r5
 8001030:	781b      	ldrb	r3, [r3, #0]
 8001032:	b25b      	sxtb	r3, r3
 8001034:	e035      	b.n	80010a2 <recv_write_single_register_res+0xca>

    uint16_t address_res = get_2(nmbs);
 8001036:	230c      	movs	r3, #12
 8001038:	18fc      	adds	r4, r7, r3
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	0018      	movs	r0, r3
 800103e:	f7ff fb2d 	bl	800069c <get_2>
 8001042:	0003      	movs	r3, r0
 8001044:	8023      	strh	r3, [r4, #0]
    uint16_t value_res = get_2(nmbs);
 8001046:	230a      	movs	r3, #10
 8001048:	18fc      	adds	r4, r7, r3
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	0018      	movs	r0, r3
 800104e:	f7ff fb25 	bl	800069c <get_2>
 8001052:	0003      	movs	r3, r0
 8001054:	8023      	strh	r3, [r4, #0]
    NMBS_DEBUG_PRINT("a %d\tvalue %d ", address, value_res);

    err = recv_msg_footer(nmbs);
 8001056:	250f      	movs	r5, #15
 8001058:	197c      	adds	r4, r7, r5
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	0018      	movs	r0, r3
 800105e:	f7ff fd54 	bl	8000b0a <recv_msg_footer>
 8001062:	0003      	movs	r3, r0
 8001064:	7023      	strb	r3, [r4, #0]
    if (err != NMBS_ERROR_NONE)
 8001066:	197b      	adds	r3, r7, r5
 8001068:	781b      	ldrb	r3, [r3, #0]
 800106a:	b25b      	sxtb	r3, r3
 800106c:	2b00      	cmp	r3, #0
 800106e:	d003      	beq.n	8001078 <recv_write_single_register_res+0xa0>
        return err;
 8001070:	197b      	adds	r3, r7, r5
 8001072:	781b      	ldrb	r3, [r3, #0]
 8001074:	b25b      	sxtb	r3, r3
 8001076:	e014      	b.n	80010a2 <recv_write_single_register_res+0xca>

    if (address_res != address)
 8001078:	230c      	movs	r3, #12
 800107a:	18fa      	adds	r2, r7, r3
 800107c:	1cbb      	adds	r3, r7, #2
 800107e:	8812      	ldrh	r2, [r2, #0]
 8001080:	881b      	ldrh	r3, [r3, #0]
 8001082:	429a      	cmp	r2, r3
 8001084:	d002      	beq.n	800108c <recv_write_single_register_res+0xb4>
        return NMBS_ERROR_INVALID_RESPONSE;
 8001086:	2302      	movs	r3, #2
 8001088:	425b      	negs	r3, r3
 800108a:	e00a      	b.n	80010a2 <recv_write_single_register_res+0xca>

    if (value_res != value_req)
 800108c:	230a      	movs	r3, #10
 800108e:	18fa      	adds	r2, r7, r3
 8001090:	003b      	movs	r3, r7
 8001092:	8812      	ldrh	r2, [r2, #0]
 8001094:	881b      	ldrh	r3, [r3, #0]
 8001096:	429a      	cmp	r2, r3
 8001098:	d002      	beq.n	80010a0 <recv_write_single_register_res+0xc8>
        return NMBS_ERROR_INVALID_RESPONSE;
 800109a:	2302      	movs	r3, #2
 800109c:	425b      	negs	r3, r3
 800109e:	e000      	b.n	80010a2 <recv_write_single_register_res+0xca>

    return NMBS_ERROR_NONE;
 80010a0:	2300      	movs	r3, #0
}
 80010a2:	0018      	movs	r0, r3
 80010a4:	46bd      	mov	sp, r7
 80010a6:	b004      	add	sp, #16
 80010a8:	bdb0      	pop	{r4, r5, r7, pc}

080010aa <nmbs_client_create>:
}
#endif


#ifndef NMBS_CLIENT_DISABLED
nmbs_error nmbs_client_create(nmbs_t* nmbs, const nmbs_platform_conf* platform_conf) {
 80010aa:	b580      	push	{r7, lr}
 80010ac:	b082      	sub	sp, #8
 80010ae:	af00      	add	r7, sp, #0
 80010b0:	6078      	str	r0, [r7, #4]
 80010b2:	6039      	str	r1, [r7, #0]
    return nmbs_create(nmbs, platform_conf);
 80010b4:	683a      	ldr	r2, [r7, #0]
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	0011      	movs	r1, r2
 80010ba:	0018      	movs	r0, r3
 80010bc:	f7ff fbd2 	bl	8000864 <nmbs_create>
 80010c0:	0003      	movs	r3, r0
}
 80010c2:	0018      	movs	r0, r3
 80010c4:	46bd      	mov	sp, r7
 80010c6:	b002      	add	sp, #8
 80010c8:	bd80      	pop	{r7, pc}

080010ca <nmbs_write_multiple_registers>:

    return NMBS_ERROR_NONE;
}


nmbs_error nmbs_write_multiple_registers(nmbs_t* nmbs, uint16_t address, uint16_t quantity, const uint16_t* registers) {
 80010ca:	b5b0      	push	{r4, r5, r7, lr}
 80010cc:	b086      	sub	sp, #24
 80010ce:	af00      	add	r7, sp, #0
 80010d0:	60f8      	str	r0, [r7, #12]
 80010d2:	0008      	movs	r0, r1
 80010d4:	0011      	movs	r1, r2
 80010d6:	607b      	str	r3, [r7, #4]
 80010d8:	230a      	movs	r3, #10
 80010da:	18fb      	adds	r3, r7, r3
 80010dc:	1c02      	adds	r2, r0, #0
 80010de:	801a      	strh	r2, [r3, #0]
 80010e0:	2008      	movs	r0, #8
 80010e2:	183b      	adds	r3, r7, r0
 80010e4:	1c0a      	adds	r2, r1, #0
 80010e6:	801a      	strh	r2, [r3, #0]
    if (quantity < 1 || quantity > 0x007B)
 80010e8:	0002      	movs	r2, r0
 80010ea:	18bb      	adds	r3, r7, r2
 80010ec:	881b      	ldrh	r3, [r3, #0]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d003      	beq.n	80010fa <nmbs_write_multiple_registers+0x30>
 80010f2:	18bb      	adds	r3, r7, r2
 80010f4:	881b      	ldrh	r3, [r3, #0]
 80010f6:	2b7b      	cmp	r3, #123	@ 0x7b
 80010f8:	d902      	bls.n	8001100 <nmbs_write_multiple_registers+0x36>
        return NMBS_ERROR_INVALID_ARGUMENT;
 80010fa:	2301      	movs	r3, #1
 80010fc:	425b      	negs	r3, r3
 80010fe:	e077      	b.n	80011f0 <nmbs_write_multiple_registers+0x126>

    if ((uint32_t) address + (uint32_t) quantity > ((uint32_t) 0xFFFF) + 1)
 8001100:	230a      	movs	r3, #10
 8001102:	18fb      	adds	r3, r7, r3
 8001104:	881a      	ldrh	r2, [r3, #0]
 8001106:	2308      	movs	r3, #8
 8001108:	18fb      	adds	r3, r7, r3
 800110a:	881b      	ldrh	r3, [r3, #0]
 800110c:	18d2      	adds	r2, r2, r3
 800110e:	2380      	movs	r3, #128	@ 0x80
 8001110:	025b      	lsls	r3, r3, #9
 8001112:	429a      	cmp	r2, r3
 8001114:	d902      	bls.n	800111c <nmbs_write_multiple_registers+0x52>
        return NMBS_ERROR_INVALID_ARGUMENT;
 8001116:	2301      	movs	r3, #1
 8001118:	425b      	negs	r3, r3
 800111a:	e069      	b.n	80011f0 <nmbs_write_multiple_registers+0x126>

    uint8_t registers_bytes = quantity * 2;
 800111c:	2508      	movs	r5, #8
 800111e:	197b      	adds	r3, r7, r5
 8001120:	881b      	ldrh	r3, [r3, #0]
 8001122:	b2db      	uxtb	r3, r3
 8001124:	2413      	movs	r4, #19
 8001126:	193a      	adds	r2, r7, r4
 8001128:	18db      	adds	r3, r3, r3
 800112a:	7013      	strb	r3, [r2, #0]

    msg_state_req(nmbs, 16);
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	2110      	movs	r1, #16
 8001130:	0018      	movs	r0, r3
 8001132:	f7ff fb3b 	bl	80007ac <msg_state_req>
    put_req_header(nmbs, 5 + registers_bytes);
 8001136:	193b      	adds	r3, r7, r4
 8001138:	781b      	ldrb	r3, [r3, #0]
 800113a:	b29b      	uxth	r3, r3
 800113c:	3305      	adds	r3, #5
 800113e:	b29a      	uxth	r2, r3
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	0011      	movs	r1, r2
 8001144:	0018      	movs	r0, r3
 8001146:	f7ff ff35 	bl	8000fb4 <put_req_header>

    put_2(nmbs, address);
 800114a:	230a      	movs	r3, #10
 800114c:	18fb      	adds	r3, r7, r3
 800114e:	881a      	ldrh	r2, [r3, #0]
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	0011      	movs	r1, r2
 8001154:	0018      	movs	r0, r3
 8001156:	f7ff facb 	bl	80006f0 <put_2>
    put_2(nmbs, quantity);
 800115a:	197b      	adds	r3, r7, r5
 800115c:	881a      	ldrh	r2, [r3, #0]
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	0011      	movs	r1, r2
 8001162:	0018      	movs	r0, r3
 8001164:	f7ff fac4 	bl	80006f0 <put_2>
    put_1(nmbs, registers_bytes);
 8001168:	193b      	adds	r3, r7, r4
 800116a:	781a      	ldrb	r2, [r3, #0]
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	0011      	movs	r1, r2
 8001170:	0018      	movs	r0, r3
 8001172:	f7ff fa63 	bl	800063c <put_1>
    NMBS_DEBUG_PRINT("a %d\tq %d\tb %d\t", address, quantity, registers_bytes);

    NMBS_DEBUG_PRINT("regs ");
    for (int i = 0; i < quantity; i++) {
 8001176:	2300      	movs	r3, #0
 8001178:	617b      	str	r3, [r7, #20]
 800117a:	e00c      	b.n	8001196 <nmbs_write_multiple_registers+0xcc>
        put_2(nmbs, registers[i]);
 800117c:	697b      	ldr	r3, [r7, #20]
 800117e:	005b      	lsls	r3, r3, #1
 8001180:	687a      	ldr	r2, [r7, #4]
 8001182:	18d3      	adds	r3, r2, r3
 8001184:	881a      	ldrh	r2, [r3, #0]
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	0011      	movs	r1, r2
 800118a:	0018      	movs	r0, r3
 800118c:	f7ff fab0 	bl	80006f0 <put_2>
    for (int i = 0; i < quantity; i++) {
 8001190:	697b      	ldr	r3, [r7, #20]
 8001192:	3301      	adds	r3, #1
 8001194:	617b      	str	r3, [r7, #20]
 8001196:	2308      	movs	r3, #8
 8001198:	18fb      	adds	r3, r7, r3
 800119a:	881b      	ldrh	r3, [r3, #0]
 800119c:	697a      	ldr	r2, [r7, #20]
 800119e:	429a      	cmp	r2, r3
 80011a0:	dbec      	blt.n	800117c <nmbs_write_multiple_registers+0xb2>
        NMBS_DEBUG_PRINT("%d ", registers[i]);
    }

    nmbs_error err = send_msg(nmbs);
 80011a2:	2512      	movs	r5, #18
 80011a4:	197c      	adds	r4, r7, r5
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	0018      	movs	r0, r3
 80011aa:	f7ff fe1f 	bl	8000dec <send_msg>
 80011ae:	0003      	movs	r3, r0
 80011b0:	7023      	strb	r3, [r4, #0]
    if (err != NMBS_ERROR_NONE)
 80011b2:	197b      	adds	r3, r7, r5
 80011b4:	781b      	ldrb	r3, [r3, #0]
 80011b6:	b25b      	sxtb	r3, r3
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d003      	beq.n	80011c4 <nmbs_write_multiple_registers+0xfa>
        return err;
 80011bc:	197b      	adds	r3, r7, r5
 80011be:	781b      	ldrb	r3, [r3, #0]
 80011c0:	b25b      	sxtb	r3, r3
 80011c2:	e015      	b.n	80011f0 <nmbs_write_multiple_registers+0x126>

    if (!nmbs->msg.broadcast)
 80011c4:	68fa      	ldr	r2, [r7, #12]
 80011c6:	2385      	movs	r3, #133	@ 0x85
 80011c8:	005b      	lsls	r3, r3, #1
 80011ca:	5cd3      	ldrb	r3, [r2, r3]
 80011cc:	2201      	movs	r2, #1
 80011ce:	4053      	eors	r3, r2
 80011d0:	b2db      	uxtb	r3, r3
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d00b      	beq.n	80011ee <nmbs_write_multiple_registers+0x124>
        return recv_write_single_register_res(nmbs, address, quantity);
 80011d6:	2308      	movs	r3, #8
 80011d8:	18fb      	adds	r3, r7, r3
 80011da:	881a      	ldrh	r2, [r3, #0]
 80011dc:	230a      	movs	r3, #10
 80011de:	18fb      	adds	r3, r7, r3
 80011e0:	8819      	ldrh	r1, [r3, #0]
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	0018      	movs	r0, r3
 80011e6:	f7ff fef7 	bl	8000fd8 <recv_write_single_register_res>
 80011ea:	0003      	movs	r3, r0
 80011ec:	e000      	b.n	80011f0 <nmbs_write_multiple_registers+0x126>

    return NMBS_ERROR_NONE;
 80011ee:	2300      	movs	r3, #0
}
 80011f0:	0018      	movs	r0, r3
 80011f2:	46bd      	mov	sp, r7
 80011f4:	b006      	add	sp, #24
 80011f6:	bdb0      	pop	{r4, r5, r7, pc}

080011f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b082      	sub	sp, #8
 80011fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011fe:	4b0f      	ldr	r3, [pc, #60]	@ (800123c <HAL_MspInit+0x44>)
 8001200:	699a      	ldr	r2, [r3, #24]
 8001202:	4b0e      	ldr	r3, [pc, #56]	@ (800123c <HAL_MspInit+0x44>)
 8001204:	2101      	movs	r1, #1
 8001206:	430a      	orrs	r2, r1
 8001208:	619a      	str	r2, [r3, #24]
 800120a:	4b0c      	ldr	r3, [pc, #48]	@ (800123c <HAL_MspInit+0x44>)
 800120c:	699b      	ldr	r3, [r3, #24]
 800120e:	2201      	movs	r2, #1
 8001210:	4013      	ands	r3, r2
 8001212:	607b      	str	r3, [r7, #4]
 8001214:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001216:	4b09      	ldr	r3, [pc, #36]	@ (800123c <HAL_MspInit+0x44>)
 8001218:	69da      	ldr	r2, [r3, #28]
 800121a:	4b08      	ldr	r3, [pc, #32]	@ (800123c <HAL_MspInit+0x44>)
 800121c:	2180      	movs	r1, #128	@ 0x80
 800121e:	0549      	lsls	r1, r1, #21
 8001220:	430a      	orrs	r2, r1
 8001222:	61da      	str	r2, [r3, #28]
 8001224:	4b05      	ldr	r3, [pc, #20]	@ (800123c <HAL_MspInit+0x44>)
 8001226:	69da      	ldr	r2, [r3, #28]
 8001228:	2380      	movs	r3, #128	@ 0x80
 800122a:	055b      	lsls	r3, r3, #21
 800122c:	4013      	ands	r3, r2
 800122e:	603b      	str	r3, [r7, #0]
 8001230:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001232:	46c0      	nop			@ (mov r8, r8)
 8001234:	46bd      	mov	sp, r7
 8001236:	b002      	add	sp, #8
 8001238:	bd80      	pop	{r7, pc}
 800123a:	46c0      	nop			@ (mov r8, r8)
 800123c:	40021000 	.word	0x40021000

08001240 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001240:	b590      	push	{r4, r7, lr}
 8001242:	b08b      	sub	sp, #44	@ 0x2c
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001248:	2414      	movs	r4, #20
 800124a:	193b      	adds	r3, r7, r4
 800124c:	0018      	movs	r0, r3
 800124e:	2314      	movs	r3, #20
 8001250:	001a      	movs	r2, r3
 8001252:	2100      	movs	r1, #0
 8001254:	f002 f978 	bl	8003548 <memset>
  if(huart->Instance==USART1)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4a21      	ldr	r2, [pc, #132]	@ (80012e4 <HAL_UART_MspInit+0xa4>)
 800125e:	4293      	cmp	r3, r2
 8001260:	d13b      	bne.n	80012da <HAL_UART_MspInit+0x9a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001262:	4b21      	ldr	r3, [pc, #132]	@ (80012e8 <HAL_UART_MspInit+0xa8>)
 8001264:	699a      	ldr	r2, [r3, #24]
 8001266:	4b20      	ldr	r3, [pc, #128]	@ (80012e8 <HAL_UART_MspInit+0xa8>)
 8001268:	2180      	movs	r1, #128	@ 0x80
 800126a:	01c9      	lsls	r1, r1, #7
 800126c:	430a      	orrs	r2, r1
 800126e:	619a      	str	r2, [r3, #24]
 8001270:	4b1d      	ldr	r3, [pc, #116]	@ (80012e8 <HAL_UART_MspInit+0xa8>)
 8001272:	699a      	ldr	r2, [r3, #24]
 8001274:	2380      	movs	r3, #128	@ 0x80
 8001276:	01db      	lsls	r3, r3, #7
 8001278:	4013      	ands	r3, r2
 800127a:	613b      	str	r3, [r7, #16]
 800127c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800127e:	4b1a      	ldr	r3, [pc, #104]	@ (80012e8 <HAL_UART_MspInit+0xa8>)
 8001280:	695a      	ldr	r2, [r3, #20]
 8001282:	4b19      	ldr	r3, [pc, #100]	@ (80012e8 <HAL_UART_MspInit+0xa8>)
 8001284:	2180      	movs	r1, #128	@ 0x80
 8001286:	0289      	lsls	r1, r1, #10
 8001288:	430a      	orrs	r2, r1
 800128a:	615a      	str	r2, [r3, #20]
 800128c:	4b16      	ldr	r3, [pc, #88]	@ (80012e8 <HAL_UART_MspInit+0xa8>)
 800128e:	695a      	ldr	r2, [r3, #20]
 8001290:	2380      	movs	r3, #128	@ 0x80
 8001292:	029b      	lsls	r3, r3, #10
 8001294:	4013      	ands	r3, r2
 8001296:	60fb      	str	r3, [r7, #12]
 8001298:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800129a:	193b      	adds	r3, r7, r4
 800129c:	22c0      	movs	r2, #192	@ 0xc0
 800129e:	00d2      	lsls	r2, r2, #3
 80012a0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012a2:	0021      	movs	r1, r4
 80012a4:	187b      	adds	r3, r7, r1
 80012a6:	2202      	movs	r2, #2
 80012a8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012aa:	187b      	adds	r3, r7, r1
 80012ac:	2200      	movs	r2, #0
 80012ae:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012b0:	187b      	adds	r3, r7, r1
 80012b2:	2203      	movs	r2, #3
 80012b4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80012b6:	187b      	adds	r3, r7, r1
 80012b8:	2201      	movs	r2, #1
 80012ba:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012bc:	187a      	adds	r2, r7, r1
 80012be:	2390      	movs	r3, #144	@ 0x90
 80012c0:	05db      	lsls	r3, r3, #23
 80012c2:	0011      	movs	r1, r2
 80012c4:	0018      	movs	r0, r3
 80012c6:	f000 fa27 	bl	8001718 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80012ca:	2200      	movs	r2, #0
 80012cc:	2100      	movs	r1, #0
 80012ce:	201b      	movs	r0, #27
 80012d0:	f000 f972 	bl	80015b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80012d4:	201b      	movs	r0, #27
 80012d6:	f000 f984 	bl	80015e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80012da:	46c0      	nop			@ (mov r8, r8)
 80012dc:	46bd      	mov	sp, r7
 80012de:	b00b      	add	sp, #44	@ 0x2c
 80012e0:	bd90      	pop	{r4, r7, pc}
 80012e2:	46c0      	nop			@ (mov r8, r8)
 80012e4:	40013800 	.word	0x40013800
 80012e8:	40021000 	.word	0x40021000

080012ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80012f0:	46c0      	nop			@ (mov r8, r8)
 80012f2:	e7fd      	b.n	80012f0 <NMI_Handler+0x4>

080012f4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012f8:	46c0      	nop			@ (mov r8, r8)
 80012fa:	e7fd      	b.n	80012f8 <HardFault_Handler+0x4>

080012fc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001300:	46c0      	nop			@ (mov r8, r8)
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}

08001306 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001306:	b580      	push	{r7, lr}
 8001308:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800130a:	46c0      	nop			@ (mov r8, r8)
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}

08001310 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001314:	f000 f888 	bl	8001428 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001318:	46c0      	nop			@ (mov r8, r8)
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
	...

08001320 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001324:	4b03      	ldr	r3, [pc, #12]	@ (8001334 <USART1_IRQHandler+0x14>)
 8001326:	0018      	movs	r0, r3
 8001328:	f001 fa78 	bl	800281c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800132c:	46c0      	nop			@ (mov r8, r8)
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
 8001332:	46c0      	nop			@ (mov r8, r8)
 8001334:	20000028 	.word	0x20000028

08001338 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 800133c:	46c0      	nop			@ (mov r8, r8)
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
	...

08001344 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001344:	480d      	ldr	r0, [pc, #52]	@ (800137c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001346:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001348:	f7ff fff6 	bl	8001338 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800134c:	480c      	ldr	r0, [pc, #48]	@ (8001380 <LoopForever+0x6>)
  ldr r1, =_edata
 800134e:	490d      	ldr	r1, [pc, #52]	@ (8001384 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001350:	4a0d      	ldr	r2, [pc, #52]	@ (8001388 <LoopForever+0xe>)
  movs r3, #0
 8001352:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001354:	e002      	b.n	800135c <LoopCopyDataInit>

08001356 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001356:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001358:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800135a:	3304      	adds	r3, #4

0800135c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800135c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800135e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001360:	d3f9      	bcc.n	8001356 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001362:	4a0a      	ldr	r2, [pc, #40]	@ (800138c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001364:	4c0a      	ldr	r4, [pc, #40]	@ (8001390 <LoopForever+0x16>)
  movs r3, #0
 8001366:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001368:	e001      	b.n	800136e <LoopFillZerobss>

0800136a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800136a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800136c:	3204      	adds	r2, #4

0800136e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800136e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001370:	d3fb      	bcc.n	800136a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001372:	f002 f8f1 	bl	8003558 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001376:	f7fe ffbf 	bl	80002f8 <main>

0800137a <LoopForever>:

LoopForever:
    b LoopForever
 800137a:	e7fe      	b.n	800137a <LoopForever>
  ldr   r0, =_estack
 800137c:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001380:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001384:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001388:	080035f8 	.word	0x080035f8
  ldr r2, =_sbss
 800138c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001390:	200000d0 	.word	0x200000d0

08001394 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001394:	e7fe      	b.n	8001394 <ADC1_IRQHandler>
	...

08001398 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800139c:	4b07      	ldr	r3, [pc, #28]	@ (80013bc <HAL_Init+0x24>)
 800139e:	681a      	ldr	r2, [r3, #0]
 80013a0:	4b06      	ldr	r3, [pc, #24]	@ (80013bc <HAL_Init+0x24>)
 80013a2:	2110      	movs	r1, #16
 80013a4:	430a      	orrs	r2, r1
 80013a6:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80013a8:	2000      	movs	r0, #0
 80013aa:	f000 f809 	bl	80013c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013ae:	f7ff ff23 	bl	80011f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013b2:	2300      	movs	r3, #0
}
 80013b4:	0018      	movs	r0, r3
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	46c0      	nop			@ (mov r8, r8)
 80013bc:	40022000 	.word	0x40022000

080013c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013c0:	b590      	push	{r4, r7, lr}
 80013c2:	b083      	sub	sp, #12
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013c8:	4b14      	ldr	r3, [pc, #80]	@ (800141c <HAL_InitTick+0x5c>)
 80013ca:	681c      	ldr	r4, [r3, #0]
 80013cc:	4b14      	ldr	r3, [pc, #80]	@ (8001420 <HAL_InitTick+0x60>)
 80013ce:	781b      	ldrb	r3, [r3, #0]
 80013d0:	0019      	movs	r1, r3
 80013d2:	23fa      	movs	r3, #250	@ 0xfa
 80013d4:	0098      	lsls	r0, r3, #2
 80013d6:	f7fe fe97 	bl	8000108 <__udivsi3>
 80013da:	0003      	movs	r3, r0
 80013dc:	0019      	movs	r1, r3
 80013de:	0020      	movs	r0, r4
 80013e0:	f7fe fe92 	bl	8000108 <__udivsi3>
 80013e4:	0003      	movs	r3, r0
 80013e6:	0018      	movs	r0, r3
 80013e8:	f000 f90b 	bl	8001602 <HAL_SYSTICK_Config>
 80013ec:	1e03      	subs	r3, r0, #0
 80013ee:	d001      	beq.n	80013f4 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80013f0:	2301      	movs	r3, #1
 80013f2:	e00f      	b.n	8001414 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	2b03      	cmp	r3, #3
 80013f8:	d80b      	bhi.n	8001412 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013fa:	6879      	ldr	r1, [r7, #4]
 80013fc:	2301      	movs	r3, #1
 80013fe:	425b      	negs	r3, r3
 8001400:	2200      	movs	r2, #0
 8001402:	0018      	movs	r0, r3
 8001404:	f000 f8d8 	bl	80015b8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001408:	4b06      	ldr	r3, [pc, #24]	@ (8001424 <HAL_InitTick+0x64>)
 800140a:	687a      	ldr	r2, [r7, #4]
 800140c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800140e:	2300      	movs	r3, #0
 8001410:	e000      	b.n	8001414 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001412:	2301      	movs	r3, #1
}
 8001414:	0018      	movs	r0, r3
 8001416:	46bd      	mov	sp, r7
 8001418:	b003      	add	sp, #12
 800141a:	bd90      	pop	{r4, r7, pc}
 800141c:	20000000 	.word	0x20000000
 8001420:	20000008 	.word	0x20000008
 8001424:	20000004 	.word	0x20000004

08001428 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800142c:	4b05      	ldr	r3, [pc, #20]	@ (8001444 <HAL_IncTick+0x1c>)
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	001a      	movs	r2, r3
 8001432:	4b05      	ldr	r3, [pc, #20]	@ (8001448 <HAL_IncTick+0x20>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	18d2      	adds	r2, r2, r3
 8001438:	4b03      	ldr	r3, [pc, #12]	@ (8001448 <HAL_IncTick+0x20>)
 800143a:	601a      	str	r2, [r3, #0]
}
 800143c:	46c0      	nop			@ (mov r8, r8)
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}
 8001442:	46c0      	nop			@ (mov r8, r8)
 8001444:	20000008 	.word	0x20000008
 8001448:	200000cc 	.word	0x200000cc

0800144c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	af00      	add	r7, sp, #0
  return uwTick;
 8001450:	4b02      	ldr	r3, [pc, #8]	@ (800145c <HAL_GetTick+0x10>)
 8001452:	681b      	ldr	r3, [r3, #0]
}
 8001454:	0018      	movs	r0, r3
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}
 800145a:	46c0      	nop			@ (mov r8, r8)
 800145c:	200000cc 	.word	0x200000cc

08001460 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b082      	sub	sp, #8
 8001464:	af00      	add	r7, sp, #0
 8001466:	0002      	movs	r2, r0
 8001468:	1dfb      	adds	r3, r7, #7
 800146a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800146c:	1dfb      	adds	r3, r7, #7
 800146e:	781b      	ldrb	r3, [r3, #0]
 8001470:	2b7f      	cmp	r3, #127	@ 0x7f
 8001472:	d809      	bhi.n	8001488 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001474:	1dfb      	adds	r3, r7, #7
 8001476:	781b      	ldrb	r3, [r3, #0]
 8001478:	001a      	movs	r2, r3
 800147a:	231f      	movs	r3, #31
 800147c:	401a      	ands	r2, r3
 800147e:	4b04      	ldr	r3, [pc, #16]	@ (8001490 <__NVIC_EnableIRQ+0x30>)
 8001480:	2101      	movs	r1, #1
 8001482:	4091      	lsls	r1, r2
 8001484:	000a      	movs	r2, r1
 8001486:	601a      	str	r2, [r3, #0]
  }
}
 8001488:	46c0      	nop			@ (mov r8, r8)
 800148a:	46bd      	mov	sp, r7
 800148c:	b002      	add	sp, #8
 800148e:	bd80      	pop	{r7, pc}
 8001490:	e000e100 	.word	0xe000e100

08001494 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001494:	b590      	push	{r4, r7, lr}
 8001496:	b083      	sub	sp, #12
 8001498:	af00      	add	r7, sp, #0
 800149a:	0002      	movs	r2, r0
 800149c:	6039      	str	r1, [r7, #0]
 800149e:	1dfb      	adds	r3, r7, #7
 80014a0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80014a2:	1dfb      	adds	r3, r7, #7
 80014a4:	781b      	ldrb	r3, [r3, #0]
 80014a6:	2b7f      	cmp	r3, #127	@ 0x7f
 80014a8:	d828      	bhi.n	80014fc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80014aa:	4a2f      	ldr	r2, [pc, #188]	@ (8001568 <__NVIC_SetPriority+0xd4>)
 80014ac:	1dfb      	adds	r3, r7, #7
 80014ae:	781b      	ldrb	r3, [r3, #0]
 80014b0:	b25b      	sxtb	r3, r3
 80014b2:	089b      	lsrs	r3, r3, #2
 80014b4:	33c0      	adds	r3, #192	@ 0xc0
 80014b6:	009b      	lsls	r3, r3, #2
 80014b8:	589b      	ldr	r3, [r3, r2]
 80014ba:	1dfa      	adds	r2, r7, #7
 80014bc:	7812      	ldrb	r2, [r2, #0]
 80014be:	0011      	movs	r1, r2
 80014c0:	2203      	movs	r2, #3
 80014c2:	400a      	ands	r2, r1
 80014c4:	00d2      	lsls	r2, r2, #3
 80014c6:	21ff      	movs	r1, #255	@ 0xff
 80014c8:	4091      	lsls	r1, r2
 80014ca:	000a      	movs	r2, r1
 80014cc:	43d2      	mvns	r2, r2
 80014ce:	401a      	ands	r2, r3
 80014d0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	019b      	lsls	r3, r3, #6
 80014d6:	22ff      	movs	r2, #255	@ 0xff
 80014d8:	401a      	ands	r2, r3
 80014da:	1dfb      	adds	r3, r7, #7
 80014dc:	781b      	ldrb	r3, [r3, #0]
 80014de:	0018      	movs	r0, r3
 80014e0:	2303      	movs	r3, #3
 80014e2:	4003      	ands	r3, r0
 80014e4:	00db      	lsls	r3, r3, #3
 80014e6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80014e8:	481f      	ldr	r0, [pc, #124]	@ (8001568 <__NVIC_SetPriority+0xd4>)
 80014ea:	1dfb      	adds	r3, r7, #7
 80014ec:	781b      	ldrb	r3, [r3, #0]
 80014ee:	b25b      	sxtb	r3, r3
 80014f0:	089b      	lsrs	r3, r3, #2
 80014f2:	430a      	orrs	r2, r1
 80014f4:	33c0      	adds	r3, #192	@ 0xc0
 80014f6:	009b      	lsls	r3, r3, #2
 80014f8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80014fa:	e031      	b.n	8001560 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80014fc:	4a1b      	ldr	r2, [pc, #108]	@ (800156c <__NVIC_SetPriority+0xd8>)
 80014fe:	1dfb      	adds	r3, r7, #7
 8001500:	781b      	ldrb	r3, [r3, #0]
 8001502:	0019      	movs	r1, r3
 8001504:	230f      	movs	r3, #15
 8001506:	400b      	ands	r3, r1
 8001508:	3b08      	subs	r3, #8
 800150a:	089b      	lsrs	r3, r3, #2
 800150c:	3306      	adds	r3, #6
 800150e:	009b      	lsls	r3, r3, #2
 8001510:	18d3      	adds	r3, r2, r3
 8001512:	3304      	adds	r3, #4
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	1dfa      	adds	r2, r7, #7
 8001518:	7812      	ldrb	r2, [r2, #0]
 800151a:	0011      	movs	r1, r2
 800151c:	2203      	movs	r2, #3
 800151e:	400a      	ands	r2, r1
 8001520:	00d2      	lsls	r2, r2, #3
 8001522:	21ff      	movs	r1, #255	@ 0xff
 8001524:	4091      	lsls	r1, r2
 8001526:	000a      	movs	r2, r1
 8001528:	43d2      	mvns	r2, r2
 800152a:	401a      	ands	r2, r3
 800152c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	019b      	lsls	r3, r3, #6
 8001532:	22ff      	movs	r2, #255	@ 0xff
 8001534:	401a      	ands	r2, r3
 8001536:	1dfb      	adds	r3, r7, #7
 8001538:	781b      	ldrb	r3, [r3, #0]
 800153a:	0018      	movs	r0, r3
 800153c:	2303      	movs	r3, #3
 800153e:	4003      	ands	r3, r0
 8001540:	00db      	lsls	r3, r3, #3
 8001542:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001544:	4809      	ldr	r0, [pc, #36]	@ (800156c <__NVIC_SetPriority+0xd8>)
 8001546:	1dfb      	adds	r3, r7, #7
 8001548:	781b      	ldrb	r3, [r3, #0]
 800154a:	001c      	movs	r4, r3
 800154c:	230f      	movs	r3, #15
 800154e:	4023      	ands	r3, r4
 8001550:	3b08      	subs	r3, #8
 8001552:	089b      	lsrs	r3, r3, #2
 8001554:	430a      	orrs	r2, r1
 8001556:	3306      	adds	r3, #6
 8001558:	009b      	lsls	r3, r3, #2
 800155a:	18c3      	adds	r3, r0, r3
 800155c:	3304      	adds	r3, #4
 800155e:	601a      	str	r2, [r3, #0]
}
 8001560:	46c0      	nop			@ (mov r8, r8)
 8001562:	46bd      	mov	sp, r7
 8001564:	b003      	add	sp, #12
 8001566:	bd90      	pop	{r4, r7, pc}
 8001568:	e000e100 	.word	0xe000e100
 800156c:	e000ed00 	.word	0xe000ed00

08001570 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b082      	sub	sp, #8
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	1e5a      	subs	r2, r3, #1
 800157c:	2380      	movs	r3, #128	@ 0x80
 800157e:	045b      	lsls	r3, r3, #17
 8001580:	429a      	cmp	r2, r3
 8001582:	d301      	bcc.n	8001588 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001584:	2301      	movs	r3, #1
 8001586:	e010      	b.n	80015aa <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001588:	4b0a      	ldr	r3, [pc, #40]	@ (80015b4 <SysTick_Config+0x44>)
 800158a:	687a      	ldr	r2, [r7, #4]
 800158c:	3a01      	subs	r2, #1
 800158e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001590:	2301      	movs	r3, #1
 8001592:	425b      	negs	r3, r3
 8001594:	2103      	movs	r1, #3
 8001596:	0018      	movs	r0, r3
 8001598:	f7ff ff7c 	bl	8001494 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800159c:	4b05      	ldr	r3, [pc, #20]	@ (80015b4 <SysTick_Config+0x44>)
 800159e:	2200      	movs	r2, #0
 80015a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015a2:	4b04      	ldr	r3, [pc, #16]	@ (80015b4 <SysTick_Config+0x44>)
 80015a4:	2207      	movs	r2, #7
 80015a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015a8:	2300      	movs	r3, #0
}
 80015aa:	0018      	movs	r0, r3
 80015ac:	46bd      	mov	sp, r7
 80015ae:	b002      	add	sp, #8
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	46c0      	nop			@ (mov r8, r8)
 80015b4:	e000e010 	.word	0xe000e010

080015b8 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b084      	sub	sp, #16
 80015bc:	af00      	add	r7, sp, #0
 80015be:	60b9      	str	r1, [r7, #8]
 80015c0:	607a      	str	r2, [r7, #4]
 80015c2:	210f      	movs	r1, #15
 80015c4:	187b      	adds	r3, r7, r1
 80015c6:	1c02      	adds	r2, r0, #0
 80015c8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80015ca:	68ba      	ldr	r2, [r7, #8]
 80015cc:	187b      	adds	r3, r7, r1
 80015ce:	781b      	ldrb	r3, [r3, #0]
 80015d0:	b25b      	sxtb	r3, r3
 80015d2:	0011      	movs	r1, r2
 80015d4:	0018      	movs	r0, r3
 80015d6:	f7ff ff5d 	bl	8001494 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 80015da:	46c0      	nop			@ (mov r8, r8)
 80015dc:	46bd      	mov	sp, r7
 80015de:	b004      	add	sp, #16
 80015e0:	bd80      	pop	{r7, pc}

080015e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015e2:	b580      	push	{r7, lr}
 80015e4:	b082      	sub	sp, #8
 80015e6:	af00      	add	r7, sp, #0
 80015e8:	0002      	movs	r2, r0
 80015ea:	1dfb      	adds	r3, r7, #7
 80015ec:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015ee:	1dfb      	adds	r3, r7, #7
 80015f0:	781b      	ldrb	r3, [r3, #0]
 80015f2:	b25b      	sxtb	r3, r3
 80015f4:	0018      	movs	r0, r3
 80015f6:	f7ff ff33 	bl	8001460 <__NVIC_EnableIRQ>
}
 80015fa:	46c0      	nop			@ (mov r8, r8)
 80015fc:	46bd      	mov	sp, r7
 80015fe:	b002      	add	sp, #8
 8001600:	bd80      	pop	{r7, pc}

08001602 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001602:	b580      	push	{r7, lr}
 8001604:	b082      	sub	sp, #8
 8001606:	af00      	add	r7, sp, #0
 8001608:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	0018      	movs	r0, r3
 800160e:	f7ff ffaf 	bl	8001570 <SysTick_Config>
 8001612:	0003      	movs	r3, r0
}
 8001614:	0018      	movs	r0, r3
 8001616:	46bd      	mov	sp, r7
 8001618:	b002      	add	sp, #8
 800161a:	bd80      	pop	{r7, pc}

0800161c <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b082      	sub	sp, #8
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	2221      	movs	r2, #33	@ 0x21
 8001628:	5c9b      	ldrb	r3, [r3, r2]
 800162a:	b2db      	uxtb	r3, r3
 800162c:	2b02      	cmp	r3, #2
 800162e:	d008      	beq.n	8001642 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2204      	movs	r2, #4
 8001634:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	2220      	movs	r2, #32
 800163a:	2100      	movs	r1, #0
 800163c:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800163e:	2301      	movs	r3, #1
 8001640:	e020      	b.n	8001684 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	681a      	ldr	r2, [r3, #0]
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	210e      	movs	r1, #14
 800164e:	438a      	bics	r2, r1
 8001650:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	681a      	ldr	r2, [r3, #0]
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	2101      	movs	r1, #1
 800165e:	438a      	bics	r2, r1
 8001660:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800166a:	2101      	movs	r1, #1
 800166c:	4091      	lsls	r1, r2
 800166e:	000a      	movs	r2, r1
 8001670:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	2221      	movs	r2, #33	@ 0x21
 8001676:	2101      	movs	r1, #1
 8001678:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	2220      	movs	r2, #32
 800167e:	2100      	movs	r1, #0
 8001680:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001682:	2300      	movs	r3, #0
}
 8001684:	0018      	movs	r0, r3
 8001686:	46bd      	mov	sp, r7
 8001688:	b002      	add	sp, #8
 800168a:	bd80      	pop	{r7, pc}

0800168c <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b084      	sub	sp, #16
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001694:	210f      	movs	r1, #15
 8001696:	187b      	adds	r3, r7, r1
 8001698:	2200      	movs	r2, #0
 800169a:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	2221      	movs	r2, #33	@ 0x21
 80016a0:	5c9b      	ldrb	r3, [r3, r2]
 80016a2:	b2db      	uxtb	r3, r3
 80016a4:	2b02      	cmp	r3, #2
 80016a6:	d006      	beq.n	80016b6 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2204      	movs	r2, #4
 80016ac:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 80016ae:	187b      	adds	r3, r7, r1
 80016b0:	2201      	movs	r2, #1
 80016b2:	701a      	strb	r2, [r3, #0]
 80016b4:	e028      	b.n	8001708 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	681a      	ldr	r2, [r3, #0]
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	210e      	movs	r1, #14
 80016c2:	438a      	bics	r2, r1
 80016c4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	681a      	ldr	r2, [r3, #0]
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	2101      	movs	r1, #1
 80016d2:	438a      	bics	r2, r1
 80016d4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80016de:	2101      	movs	r1, #1
 80016e0:	4091      	lsls	r1, r2
 80016e2:	000a      	movs	r2, r1
 80016e4:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	2221      	movs	r2, #33	@ 0x21
 80016ea:	2101      	movs	r1, #1
 80016ec:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	2220      	movs	r2, #32
 80016f2:	2100      	movs	r1, #0
 80016f4:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d004      	beq.n	8001708 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001702:	687a      	ldr	r2, [r7, #4]
 8001704:	0010      	movs	r0, r2
 8001706:	4798      	blx	r3
    }
  }
  return status;
 8001708:	230f      	movs	r3, #15
 800170a:	18fb      	adds	r3, r7, r3
 800170c:	781b      	ldrb	r3, [r3, #0]
}
 800170e:	0018      	movs	r0, r3
 8001710:	46bd      	mov	sp, r7
 8001712:	b004      	add	sp, #16
 8001714:	bd80      	pop	{r7, pc}
	...

08001718 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b086      	sub	sp, #24
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
 8001720:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001722:	2300      	movs	r3, #0
 8001724:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001726:	e14f      	b.n	80019c8 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	2101      	movs	r1, #1
 800172e:	697a      	ldr	r2, [r7, #20]
 8001730:	4091      	lsls	r1, r2
 8001732:	000a      	movs	r2, r1
 8001734:	4013      	ands	r3, r2
 8001736:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	2b00      	cmp	r3, #0
 800173c:	d100      	bne.n	8001740 <HAL_GPIO_Init+0x28>
 800173e:	e140      	b.n	80019c2 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	2203      	movs	r2, #3
 8001746:	4013      	ands	r3, r2
 8001748:	2b01      	cmp	r3, #1
 800174a:	d005      	beq.n	8001758 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	2203      	movs	r2, #3
 8001752:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001754:	2b02      	cmp	r3, #2
 8001756:	d130      	bne.n	80017ba <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	689b      	ldr	r3, [r3, #8]
 800175c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800175e:	697b      	ldr	r3, [r7, #20]
 8001760:	005b      	lsls	r3, r3, #1
 8001762:	2203      	movs	r2, #3
 8001764:	409a      	lsls	r2, r3
 8001766:	0013      	movs	r3, r2
 8001768:	43da      	mvns	r2, r3
 800176a:	693b      	ldr	r3, [r7, #16]
 800176c:	4013      	ands	r3, r2
 800176e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	68da      	ldr	r2, [r3, #12]
 8001774:	697b      	ldr	r3, [r7, #20]
 8001776:	005b      	lsls	r3, r3, #1
 8001778:	409a      	lsls	r2, r3
 800177a:	0013      	movs	r3, r2
 800177c:	693a      	ldr	r2, [r7, #16]
 800177e:	4313      	orrs	r3, r2
 8001780:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	693a      	ldr	r2, [r7, #16]
 8001786:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800178e:	2201      	movs	r2, #1
 8001790:	697b      	ldr	r3, [r7, #20]
 8001792:	409a      	lsls	r2, r3
 8001794:	0013      	movs	r3, r2
 8001796:	43da      	mvns	r2, r3
 8001798:	693b      	ldr	r3, [r7, #16]
 800179a:	4013      	ands	r3, r2
 800179c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	091b      	lsrs	r3, r3, #4
 80017a4:	2201      	movs	r2, #1
 80017a6:	401a      	ands	r2, r3
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	409a      	lsls	r2, r3
 80017ac:	0013      	movs	r3, r2
 80017ae:	693a      	ldr	r2, [r7, #16]
 80017b0:	4313      	orrs	r3, r2
 80017b2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	693a      	ldr	r2, [r7, #16]
 80017b8:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	2203      	movs	r2, #3
 80017c0:	4013      	ands	r3, r2
 80017c2:	2b03      	cmp	r3, #3
 80017c4:	d017      	beq.n	80017f6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	68db      	ldr	r3, [r3, #12]
 80017ca:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80017cc:	697b      	ldr	r3, [r7, #20]
 80017ce:	005b      	lsls	r3, r3, #1
 80017d0:	2203      	movs	r2, #3
 80017d2:	409a      	lsls	r2, r3
 80017d4:	0013      	movs	r3, r2
 80017d6:	43da      	mvns	r2, r3
 80017d8:	693b      	ldr	r3, [r7, #16]
 80017da:	4013      	ands	r3, r2
 80017dc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	689a      	ldr	r2, [r3, #8]
 80017e2:	697b      	ldr	r3, [r7, #20]
 80017e4:	005b      	lsls	r3, r3, #1
 80017e6:	409a      	lsls	r2, r3
 80017e8:	0013      	movs	r3, r2
 80017ea:	693a      	ldr	r2, [r7, #16]
 80017ec:	4313      	orrs	r3, r2
 80017ee:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	693a      	ldr	r2, [r7, #16]
 80017f4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	2203      	movs	r2, #3
 80017fc:	4013      	ands	r3, r2
 80017fe:	2b02      	cmp	r3, #2
 8001800:	d123      	bne.n	800184a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001802:	697b      	ldr	r3, [r7, #20]
 8001804:	08da      	lsrs	r2, r3, #3
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	3208      	adds	r2, #8
 800180a:	0092      	lsls	r2, r2, #2
 800180c:	58d3      	ldr	r3, [r2, r3]
 800180e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001810:	697b      	ldr	r3, [r7, #20]
 8001812:	2207      	movs	r2, #7
 8001814:	4013      	ands	r3, r2
 8001816:	009b      	lsls	r3, r3, #2
 8001818:	220f      	movs	r2, #15
 800181a:	409a      	lsls	r2, r3
 800181c:	0013      	movs	r3, r2
 800181e:	43da      	mvns	r2, r3
 8001820:	693b      	ldr	r3, [r7, #16]
 8001822:	4013      	ands	r3, r2
 8001824:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	691a      	ldr	r2, [r3, #16]
 800182a:	697b      	ldr	r3, [r7, #20]
 800182c:	2107      	movs	r1, #7
 800182e:	400b      	ands	r3, r1
 8001830:	009b      	lsls	r3, r3, #2
 8001832:	409a      	lsls	r2, r3
 8001834:	0013      	movs	r3, r2
 8001836:	693a      	ldr	r2, [r7, #16]
 8001838:	4313      	orrs	r3, r2
 800183a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800183c:	697b      	ldr	r3, [r7, #20]
 800183e:	08da      	lsrs	r2, r3, #3
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	3208      	adds	r2, #8
 8001844:	0092      	lsls	r2, r2, #2
 8001846:	6939      	ldr	r1, [r7, #16]
 8001848:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001850:	697b      	ldr	r3, [r7, #20]
 8001852:	005b      	lsls	r3, r3, #1
 8001854:	2203      	movs	r2, #3
 8001856:	409a      	lsls	r2, r3
 8001858:	0013      	movs	r3, r2
 800185a:	43da      	mvns	r2, r3
 800185c:	693b      	ldr	r3, [r7, #16]
 800185e:	4013      	ands	r3, r2
 8001860:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	2203      	movs	r2, #3
 8001868:	401a      	ands	r2, r3
 800186a:	697b      	ldr	r3, [r7, #20]
 800186c:	005b      	lsls	r3, r3, #1
 800186e:	409a      	lsls	r2, r3
 8001870:	0013      	movs	r3, r2
 8001872:	693a      	ldr	r2, [r7, #16]
 8001874:	4313      	orrs	r3, r2
 8001876:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	693a      	ldr	r2, [r7, #16]
 800187c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	685a      	ldr	r2, [r3, #4]
 8001882:	23c0      	movs	r3, #192	@ 0xc0
 8001884:	029b      	lsls	r3, r3, #10
 8001886:	4013      	ands	r3, r2
 8001888:	d100      	bne.n	800188c <HAL_GPIO_Init+0x174>
 800188a:	e09a      	b.n	80019c2 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800188c:	4b54      	ldr	r3, [pc, #336]	@ (80019e0 <HAL_GPIO_Init+0x2c8>)
 800188e:	699a      	ldr	r2, [r3, #24]
 8001890:	4b53      	ldr	r3, [pc, #332]	@ (80019e0 <HAL_GPIO_Init+0x2c8>)
 8001892:	2101      	movs	r1, #1
 8001894:	430a      	orrs	r2, r1
 8001896:	619a      	str	r2, [r3, #24]
 8001898:	4b51      	ldr	r3, [pc, #324]	@ (80019e0 <HAL_GPIO_Init+0x2c8>)
 800189a:	699b      	ldr	r3, [r3, #24]
 800189c:	2201      	movs	r2, #1
 800189e:	4013      	ands	r3, r2
 80018a0:	60bb      	str	r3, [r7, #8]
 80018a2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80018a4:	4a4f      	ldr	r2, [pc, #316]	@ (80019e4 <HAL_GPIO_Init+0x2cc>)
 80018a6:	697b      	ldr	r3, [r7, #20]
 80018a8:	089b      	lsrs	r3, r3, #2
 80018aa:	3302      	adds	r3, #2
 80018ac:	009b      	lsls	r3, r3, #2
 80018ae:	589b      	ldr	r3, [r3, r2]
 80018b0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80018b2:	697b      	ldr	r3, [r7, #20]
 80018b4:	2203      	movs	r2, #3
 80018b6:	4013      	ands	r3, r2
 80018b8:	009b      	lsls	r3, r3, #2
 80018ba:	220f      	movs	r2, #15
 80018bc:	409a      	lsls	r2, r3
 80018be:	0013      	movs	r3, r2
 80018c0:	43da      	mvns	r2, r3
 80018c2:	693b      	ldr	r3, [r7, #16]
 80018c4:	4013      	ands	r3, r2
 80018c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80018c8:	687a      	ldr	r2, [r7, #4]
 80018ca:	2390      	movs	r3, #144	@ 0x90
 80018cc:	05db      	lsls	r3, r3, #23
 80018ce:	429a      	cmp	r2, r3
 80018d0:	d013      	beq.n	80018fa <HAL_GPIO_Init+0x1e2>
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	4a44      	ldr	r2, [pc, #272]	@ (80019e8 <HAL_GPIO_Init+0x2d0>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d00d      	beq.n	80018f6 <HAL_GPIO_Init+0x1de>
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	4a43      	ldr	r2, [pc, #268]	@ (80019ec <HAL_GPIO_Init+0x2d4>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d007      	beq.n	80018f2 <HAL_GPIO_Init+0x1da>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	4a42      	ldr	r2, [pc, #264]	@ (80019f0 <HAL_GPIO_Init+0x2d8>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d101      	bne.n	80018ee <HAL_GPIO_Init+0x1d6>
 80018ea:	2303      	movs	r3, #3
 80018ec:	e006      	b.n	80018fc <HAL_GPIO_Init+0x1e4>
 80018ee:	2305      	movs	r3, #5
 80018f0:	e004      	b.n	80018fc <HAL_GPIO_Init+0x1e4>
 80018f2:	2302      	movs	r3, #2
 80018f4:	e002      	b.n	80018fc <HAL_GPIO_Init+0x1e4>
 80018f6:	2301      	movs	r3, #1
 80018f8:	e000      	b.n	80018fc <HAL_GPIO_Init+0x1e4>
 80018fa:	2300      	movs	r3, #0
 80018fc:	697a      	ldr	r2, [r7, #20]
 80018fe:	2103      	movs	r1, #3
 8001900:	400a      	ands	r2, r1
 8001902:	0092      	lsls	r2, r2, #2
 8001904:	4093      	lsls	r3, r2
 8001906:	693a      	ldr	r2, [r7, #16]
 8001908:	4313      	orrs	r3, r2
 800190a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800190c:	4935      	ldr	r1, [pc, #212]	@ (80019e4 <HAL_GPIO_Init+0x2cc>)
 800190e:	697b      	ldr	r3, [r7, #20]
 8001910:	089b      	lsrs	r3, r3, #2
 8001912:	3302      	adds	r3, #2
 8001914:	009b      	lsls	r3, r3, #2
 8001916:	693a      	ldr	r2, [r7, #16]
 8001918:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800191a:	4b36      	ldr	r3, [pc, #216]	@ (80019f4 <HAL_GPIO_Init+0x2dc>)
 800191c:	689b      	ldr	r3, [r3, #8]
 800191e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	43da      	mvns	r2, r3
 8001924:	693b      	ldr	r3, [r7, #16]
 8001926:	4013      	ands	r3, r2
 8001928:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	685a      	ldr	r2, [r3, #4]
 800192e:	2380      	movs	r3, #128	@ 0x80
 8001930:	035b      	lsls	r3, r3, #13
 8001932:	4013      	ands	r3, r2
 8001934:	d003      	beq.n	800193e <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8001936:	693a      	ldr	r2, [r7, #16]
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	4313      	orrs	r3, r2
 800193c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800193e:	4b2d      	ldr	r3, [pc, #180]	@ (80019f4 <HAL_GPIO_Init+0x2dc>)
 8001940:	693a      	ldr	r2, [r7, #16]
 8001942:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001944:	4b2b      	ldr	r3, [pc, #172]	@ (80019f4 <HAL_GPIO_Init+0x2dc>)
 8001946:	68db      	ldr	r3, [r3, #12]
 8001948:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	43da      	mvns	r2, r3
 800194e:	693b      	ldr	r3, [r7, #16]
 8001950:	4013      	ands	r3, r2
 8001952:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	685a      	ldr	r2, [r3, #4]
 8001958:	2380      	movs	r3, #128	@ 0x80
 800195a:	039b      	lsls	r3, r3, #14
 800195c:	4013      	ands	r3, r2
 800195e:	d003      	beq.n	8001968 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8001960:	693a      	ldr	r2, [r7, #16]
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	4313      	orrs	r3, r2
 8001966:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001968:	4b22      	ldr	r3, [pc, #136]	@ (80019f4 <HAL_GPIO_Init+0x2dc>)
 800196a:	693a      	ldr	r2, [r7, #16]
 800196c:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 800196e:	4b21      	ldr	r3, [pc, #132]	@ (80019f4 <HAL_GPIO_Init+0x2dc>)
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	43da      	mvns	r2, r3
 8001978:	693b      	ldr	r3, [r7, #16]
 800197a:	4013      	ands	r3, r2
 800197c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	685a      	ldr	r2, [r3, #4]
 8001982:	2380      	movs	r3, #128	@ 0x80
 8001984:	029b      	lsls	r3, r3, #10
 8001986:	4013      	ands	r3, r2
 8001988:	d003      	beq.n	8001992 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 800198a:	693a      	ldr	r2, [r7, #16]
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	4313      	orrs	r3, r2
 8001990:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001992:	4b18      	ldr	r3, [pc, #96]	@ (80019f4 <HAL_GPIO_Init+0x2dc>)
 8001994:	693a      	ldr	r2, [r7, #16]
 8001996:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8001998:	4b16      	ldr	r3, [pc, #88]	@ (80019f4 <HAL_GPIO_Init+0x2dc>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	43da      	mvns	r2, r3
 80019a2:	693b      	ldr	r3, [r7, #16]
 80019a4:	4013      	ands	r3, r2
 80019a6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	685a      	ldr	r2, [r3, #4]
 80019ac:	2380      	movs	r3, #128	@ 0x80
 80019ae:	025b      	lsls	r3, r3, #9
 80019b0:	4013      	ands	r3, r2
 80019b2:	d003      	beq.n	80019bc <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 80019b4:	693a      	ldr	r2, [r7, #16]
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	4313      	orrs	r3, r2
 80019ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80019bc:	4b0d      	ldr	r3, [pc, #52]	@ (80019f4 <HAL_GPIO_Init+0x2dc>)
 80019be:	693a      	ldr	r2, [r7, #16]
 80019c0:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80019c2:	697b      	ldr	r3, [r7, #20]
 80019c4:	3301      	adds	r3, #1
 80019c6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	681a      	ldr	r2, [r3, #0]
 80019cc:	697b      	ldr	r3, [r7, #20]
 80019ce:	40da      	lsrs	r2, r3
 80019d0:	1e13      	subs	r3, r2, #0
 80019d2:	d000      	beq.n	80019d6 <HAL_GPIO_Init+0x2be>
 80019d4:	e6a8      	b.n	8001728 <HAL_GPIO_Init+0x10>
  } 
}
 80019d6:	46c0      	nop			@ (mov r8, r8)
 80019d8:	46c0      	nop			@ (mov r8, r8)
 80019da:	46bd      	mov	sp, r7
 80019dc:	b006      	add	sp, #24
 80019de:	bd80      	pop	{r7, pc}
 80019e0:	40021000 	.word	0x40021000
 80019e4:	40010000 	.word	0x40010000
 80019e8:	48000400 	.word	0x48000400
 80019ec:	48000800 	.word	0x48000800
 80019f0:	48000c00 	.word	0x48000c00
 80019f4:	40010400 	.word	0x40010400

080019f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b082      	sub	sp, #8
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
 8001a00:	0008      	movs	r0, r1
 8001a02:	0011      	movs	r1, r2
 8001a04:	1cbb      	adds	r3, r7, #2
 8001a06:	1c02      	adds	r2, r0, #0
 8001a08:	801a      	strh	r2, [r3, #0]
 8001a0a:	1c7b      	adds	r3, r7, #1
 8001a0c:	1c0a      	adds	r2, r1, #0
 8001a0e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a10:	1c7b      	adds	r3, r7, #1
 8001a12:	781b      	ldrb	r3, [r3, #0]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d004      	beq.n	8001a22 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001a18:	1cbb      	adds	r3, r7, #2
 8001a1a:	881a      	ldrh	r2, [r3, #0]
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001a20:	e003      	b.n	8001a2a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001a22:	1cbb      	adds	r3, r7, #2
 8001a24:	881a      	ldrh	r2, [r3, #0]
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001a2a:	46c0      	nop			@ (mov r8, r8)
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	b002      	add	sp, #8
 8001a30:	bd80      	pop	{r7, pc}
	...

08001a34 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b088      	sub	sp, #32
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d101      	bne.n	8001a46 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a42:	2301      	movs	r3, #1
 8001a44:	e301      	b.n	800204a <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	2201      	movs	r2, #1
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	d100      	bne.n	8001a52 <HAL_RCC_OscConfig+0x1e>
 8001a50:	e08d      	b.n	8001b6e <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001a52:	4bc3      	ldr	r3, [pc, #780]	@ (8001d60 <HAL_RCC_OscConfig+0x32c>)
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	220c      	movs	r2, #12
 8001a58:	4013      	ands	r3, r2
 8001a5a:	2b04      	cmp	r3, #4
 8001a5c:	d00e      	beq.n	8001a7c <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001a5e:	4bc0      	ldr	r3, [pc, #768]	@ (8001d60 <HAL_RCC_OscConfig+0x32c>)
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	220c      	movs	r2, #12
 8001a64:	4013      	ands	r3, r2
 8001a66:	2b08      	cmp	r3, #8
 8001a68:	d116      	bne.n	8001a98 <HAL_RCC_OscConfig+0x64>
 8001a6a:	4bbd      	ldr	r3, [pc, #756]	@ (8001d60 <HAL_RCC_OscConfig+0x32c>)
 8001a6c:	685a      	ldr	r2, [r3, #4]
 8001a6e:	2380      	movs	r3, #128	@ 0x80
 8001a70:	025b      	lsls	r3, r3, #9
 8001a72:	401a      	ands	r2, r3
 8001a74:	2380      	movs	r3, #128	@ 0x80
 8001a76:	025b      	lsls	r3, r3, #9
 8001a78:	429a      	cmp	r2, r3
 8001a7a:	d10d      	bne.n	8001a98 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a7c:	4bb8      	ldr	r3, [pc, #736]	@ (8001d60 <HAL_RCC_OscConfig+0x32c>)
 8001a7e:	681a      	ldr	r2, [r3, #0]
 8001a80:	2380      	movs	r3, #128	@ 0x80
 8001a82:	029b      	lsls	r3, r3, #10
 8001a84:	4013      	ands	r3, r2
 8001a86:	d100      	bne.n	8001a8a <HAL_RCC_OscConfig+0x56>
 8001a88:	e070      	b.n	8001b6c <HAL_RCC_OscConfig+0x138>
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d000      	beq.n	8001a94 <HAL_RCC_OscConfig+0x60>
 8001a92:	e06b      	b.n	8001b6c <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8001a94:	2301      	movs	r3, #1
 8001a96:	e2d8      	b.n	800204a <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	2b01      	cmp	r3, #1
 8001a9e:	d107      	bne.n	8001ab0 <HAL_RCC_OscConfig+0x7c>
 8001aa0:	4baf      	ldr	r3, [pc, #700]	@ (8001d60 <HAL_RCC_OscConfig+0x32c>)
 8001aa2:	681a      	ldr	r2, [r3, #0]
 8001aa4:	4bae      	ldr	r3, [pc, #696]	@ (8001d60 <HAL_RCC_OscConfig+0x32c>)
 8001aa6:	2180      	movs	r1, #128	@ 0x80
 8001aa8:	0249      	lsls	r1, r1, #9
 8001aaa:	430a      	orrs	r2, r1
 8001aac:	601a      	str	r2, [r3, #0]
 8001aae:	e02f      	b.n	8001b10 <HAL_RCC_OscConfig+0xdc>
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d10c      	bne.n	8001ad2 <HAL_RCC_OscConfig+0x9e>
 8001ab8:	4ba9      	ldr	r3, [pc, #676]	@ (8001d60 <HAL_RCC_OscConfig+0x32c>)
 8001aba:	681a      	ldr	r2, [r3, #0]
 8001abc:	4ba8      	ldr	r3, [pc, #672]	@ (8001d60 <HAL_RCC_OscConfig+0x32c>)
 8001abe:	49a9      	ldr	r1, [pc, #676]	@ (8001d64 <HAL_RCC_OscConfig+0x330>)
 8001ac0:	400a      	ands	r2, r1
 8001ac2:	601a      	str	r2, [r3, #0]
 8001ac4:	4ba6      	ldr	r3, [pc, #664]	@ (8001d60 <HAL_RCC_OscConfig+0x32c>)
 8001ac6:	681a      	ldr	r2, [r3, #0]
 8001ac8:	4ba5      	ldr	r3, [pc, #660]	@ (8001d60 <HAL_RCC_OscConfig+0x32c>)
 8001aca:	49a7      	ldr	r1, [pc, #668]	@ (8001d68 <HAL_RCC_OscConfig+0x334>)
 8001acc:	400a      	ands	r2, r1
 8001ace:	601a      	str	r2, [r3, #0]
 8001ad0:	e01e      	b.n	8001b10 <HAL_RCC_OscConfig+0xdc>
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	2b05      	cmp	r3, #5
 8001ad8:	d10e      	bne.n	8001af8 <HAL_RCC_OscConfig+0xc4>
 8001ada:	4ba1      	ldr	r3, [pc, #644]	@ (8001d60 <HAL_RCC_OscConfig+0x32c>)
 8001adc:	681a      	ldr	r2, [r3, #0]
 8001ade:	4ba0      	ldr	r3, [pc, #640]	@ (8001d60 <HAL_RCC_OscConfig+0x32c>)
 8001ae0:	2180      	movs	r1, #128	@ 0x80
 8001ae2:	02c9      	lsls	r1, r1, #11
 8001ae4:	430a      	orrs	r2, r1
 8001ae6:	601a      	str	r2, [r3, #0]
 8001ae8:	4b9d      	ldr	r3, [pc, #628]	@ (8001d60 <HAL_RCC_OscConfig+0x32c>)
 8001aea:	681a      	ldr	r2, [r3, #0]
 8001aec:	4b9c      	ldr	r3, [pc, #624]	@ (8001d60 <HAL_RCC_OscConfig+0x32c>)
 8001aee:	2180      	movs	r1, #128	@ 0x80
 8001af0:	0249      	lsls	r1, r1, #9
 8001af2:	430a      	orrs	r2, r1
 8001af4:	601a      	str	r2, [r3, #0]
 8001af6:	e00b      	b.n	8001b10 <HAL_RCC_OscConfig+0xdc>
 8001af8:	4b99      	ldr	r3, [pc, #612]	@ (8001d60 <HAL_RCC_OscConfig+0x32c>)
 8001afa:	681a      	ldr	r2, [r3, #0]
 8001afc:	4b98      	ldr	r3, [pc, #608]	@ (8001d60 <HAL_RCC_OscConfig+0x32c>)
 8001afe:	4999      	ldr	r1, [pc, #612]	@ (8001d64 <HAL_RCC_OscConfig+0x330>)
 8001b00:	400a      	ands	r2, r1
 8001b02:	601a      	str	r2, [r3, #0]
 8001b04:	4b96      	ldr	r3, [pc, #600]	@ (8001d60 <HAL_RCC_OscConfig+0x32c>)
 8001b06:	681a      	ldr	r2, [r3, #0]
 8001b08:	4b95      	ldr	r3, [pc, #596]	@ (8001d60 <HAL_RCC_OscConfig+0x32c>)
 8001b0a:	4997      	ldr	r1, [pc, #604]	@ (8001d68 <HAL_RCC_OscConfig+0x334>)
 8001b0c:	400a      	ands	r2, r1
 8001b0e:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d014      	beq.n	8001b42 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b18:	f7ff fc98 	bl	800144c <HAL_GetTick>
 8001b1c:	0003      	movs	r3, r0
 8001b1e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b20:	e008      	b.n	8001b34 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b22:	f7ff fc93 	bl	800144c <HAL_GetTick>
 8001b26:	0002      	movs	r2, r0
 8001b28:	69bb      	ldr	r3, [r7, #24]
 8001b2a:	1ad3      	subs	r3, r2, r3
 8001b2c:	2b64      	cmp	r3, #100	@ 0x64
 8001b2e:	d901      	bls.n	8001b34 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8001b30:	2303      	movs	r3, #3
 8001b32:	e28a      	b.n	800204a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b34:	4b8a      	ldr	r3, [pc, #552]	@ (8001d60 <HAL_RCC_OscConfig+0x32c>)
 8001b36:	681a      	ldr	r2, [r3, #0]
 8001b38:	2380      	movs	r3, #128	@ 0x80
 8001b3a:	029b      	lsls	r3, r3, #10
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	d0f0      	beq.n	8001b22 <HAL_RCC_OscConfig+0xee>
 8001b40:	e015      	b.n	8001b6e <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b42:	f7ff fc83 	bl	800144c <HAL_GetTick>
 8001b46:	0003      	movs	r3, r0
 8001b48:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b4a:	e008      	b.n	8001b5e <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b4c:	f7ff fc7e 	bl	800144c <HAL_GetTick>
 8001b50:	0002      	movs	r2, r0
 8001b52:	69bb      	ldr	r3, [r7, #24]
 8001b54:	1ad3      	subs	r3, r2, r3
 8001b56:	2b64      	cmp	r3, #100	@ 0x64
 8001b58:	d901      	bls.n	8001b5e <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8001b5a:	2303      	movs	r3, #3
 8001b5c:	e275      	b.n	800204a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b5e:	4b80      	ldr	r3, [pc, #512]	@ (8001d60 <HAL_RCC_OscConfig+0x32c>)
 8001b60:	681a      	ldr	r2, [r3, #0]
 8001b62:	2380      	movs	r3, #128	@ 0x80
 8001b64:	029b      	lsls	r3, r3, #10
 8001b66:	4013      	ands	r3, r2
 8001b68:	d1f0      	bne.n	8001b4c <HAL_RCC_OscConfig+0x118>
 8001b6a:	e000      	b.n	8001b6e <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b6c:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	2202      	movs	r2, #2
 8001b74:	4013      	ands	r3, r2
 8001b76:	d100      	bne.n	8001b7a <HAL_RCC_OscConfig+0x146>
 8001b78:	e069      	b.n	8001c4e <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001b7a:	4b79      	ldr	r3, [pc, #484]	@ (8001d60 <HAL_RCC_OscConfig+0x32c>)
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	220c      	movs	r2, #12
 8001b80:	4013      	ands	r3, r2
 8001b82:	d00b      	beq.n	8001b9c <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001b84:	4b76      	ldr	r3, [pc, #472]	@ (8001d60 <HAL_RCC_OscConfig+0x32c>)
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	220c      	movs	r2, #12
 8001b8a:	4013      	ands	r3, r2
 8001b8c:	2b08      	cmp	r3, #8
 8001b8e:	d11c      	bne.n	8001bca <HAL_RCC_OscConfig+0x196>
 8001b90:	4b73      	ldr	r3, [pc, #460]	@ (8001d60 <HAL_RCC_OscConfig+0x32c>)
 8001b92:	685a      	ldr	r2, [r3, #4]
 8001b94:	2380      	movs	r3, #128	@ 0x80
 8001b96:	025b      	lsls	r3, r3, #9
 8001b98:	4013      	ands	r3, r2
 8001b9a:	d116      	bne.n	8001bca <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b9c:	4b70      	ldr	r3, [pc, #448]	@ (8001d60 <HAL_RCC_OscConfig+0x32c>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	2202      	movs	r2, #2
 8001ba2:	4013      	ands	r3, r2
 8001ba4:	d005      	beq.n	8001bb2 <HAL_RCC_OscConfig+0x17e>
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	68db      	ldr	r3, [r3, #12]
 8001baa:	2b01      	cmp	r3, #1
 8001bac:	d001      	beq.n	8001bb2 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	e24b      	b.n	800204a <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bb2:	4b6b      	ldr	r3, [pc, #428]	@ (8001d60 <HAL_RCC_OscConfig+0x32c>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	22f8      	movs	r2, #248	@ 0xf8
 8001bb8:	4393      	bics	r3, r2
 8001bba:	0019      	movs	r1, r3
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	691b      	ldr	r3, [r3, #16]
 8001bc0:	00da      	lsls	r2, r3, #3
 8001bc2:	4b67      	ldr	r3, [pc, #412]	@ (8001d60 <HAL_RCC_OscConfig+0x32c>)
 8001bc4:	430a      	orrs	r2, r1
 8001bc6:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bc8:	e041      	b.n	8001c4e <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	68db      	ldr	r3, [r3, #12]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d024      	beq.n	8001c1c <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001bd2:	4b63      	ldr	r3, [pc, #396]	@ (8001d60 <HAL_RCC_OscConfig+0x32c>)
 8001bd4:	681a      	ldr	r2, [r3, #0]
 8001bd6:	4b62      	ldr	r3, [pc, #392]	@ (8001d60 <HAL_RCC_OscConfig+0x32c>)
 8001bd8:	2101      	movs	r1, #1
 8001bda:	430a      	orrs	r2, r1
 8001bdc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bde:	f7ff fc35 	bl	800144c <HAL_GetTick>
 8001be2:	0003      	movs	r3, r0
 8001be4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001be6:	e008      	b.n	8001bfa <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001be8:	f7ff fc30 	bl	800144c <HAL_GetTick>
 8001bec:	0002      	movs	r2, r0
 8001bee:	69bb      	ldr	r3, [r7, #24]
 8001bf0:	1ad3      	subs	r3, r2, r3
 8001bf2:	2b02      	cmp	r3, #2
 8001bf4:	d901      	bls.n	8001bfa <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8001bf6:	2303      	movs	r3, #3
 8001bf8:	e227      	b.n	800204a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bfa:	4b59      	ldr	r3, [pc, #356]	@ (8001d60 <HAL_RCC_OscConfig+0x32c>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	2202      	movs	r2, #2
 8001c00:	4013      	ands	r3, r2
 8001c02:	d0f1      	beq.n	8001be8 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c04:	4b56      	ldr	r3, [pc, #344]	@ (8001d60 <HAL_RCC_OscConfig+0x32c>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	22f8      	movs	r2, #248	@ 0xf8
 8001c0a:	4393      	bics	r3, r2
 8001c0c:	0019      	movs	r1, r3
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	691b      	ldr	r3, [r3, #16]
 8001c12:	00da      	lsls	r2, r3, #3
 8001c14:	4b52      	ldr	r3, [pc, #328]	@ (8001d60 <HAL_RCC_OscConfig+0x32c>)
 8001c16:	430a      	orrs	r2, r1
 8001c18:	601a      	str	r2, [r3, #0]
 8001c1a:	e018      	b.n	8001c4e <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c1c:	4b50      	ldr	r3, [pc, #320]	@ (8001d60 <HAL_RCC_OscConfig+0x32c>)
 8001c1e:	681a      	ldr	r2, [r3, #0]
 8001c20:	4b4f      	ldr	r3, [pc, #316]	@ (8001d60 <HAL_RCC_OscConfig+0x32c>)
 8001c22:	2101      	movs	r1, #1
 8001c24:	438a      	bics	r2, r1
 8001c26:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c28:	f7ff fc10 	bl	800144c <HAL_GetTick>
 8001c2c:	0003      	movs	r3, r0
 8001c2e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c30:	e008      	b.n	8001c44 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c32:	f7ff fc0b 	bl	800144c <HAL_GetTick>
 8001c36:	0002      	movs	r2, r0
 8001c38:	69bb      	ldr	r3, [r7, #24]
 8001c3a:	1ad3      	subs	r3, r2, r3
 8001c3c:	2b02      	cmp	r3, #2
 8001c3e:	d901      	bls.n	8001c44 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8001c40:	2303      	movs	r3, #3
 8001c42:	e202      	b.n	800204a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c44:	4b46      	ldr	r3, [pc, #280]	@ (8001d60 <HAL_RCC_OscConfig+0x32c>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	2202      	movs	r2, #2
 8001c4a:	4013      	ands	r3, r2
 8001c4c:	d1f1      	bne.n	8001c32 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	2208      	movs	r2, #8
 8001c54:	4013      	ands	r3, r2
 8001c56:	d036      	beq.n	8001cc6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	69db      	ldr	r3, [r3, #28]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d019      	beq.n	8001c94 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c60:	4b3f      	ldr	r3, [pc, #252]	@ (8001d60 <HAL_RCC_OscConfig+0x32c>)
 8001c62:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001c64:	4b3e      	ldr	r3, [pc, #248]	@ (8001d60 <HAL_RCC_OscConfig+0x32c>)
 8001c66:	2101      	movs	r1, #1
 8001c68:	430a      	orrs	r2, r1
 8001c6a:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c6c:	f7ff fbee 	bl	800144c <HAL_GetTick>
 8001c70:	0003      	movs	r3, r0
 8001c72:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c74:	e008      	b.n	8001c88 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c76:	f7ff fbe9 	bl	800144c <HAL_GetTick>
 8001c7a:	0002      	movs	r2, r0
 8001c7c:	69bb      	ldr	r3, [r7, #24]
 8001c7e:	1ad3      	subs	r3, r2, r3
 8001c80:	2b02      	cmp	r3, #2
 8001c82:	d901      	bls.n	8001c88 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8001c84:	2303      	movs	r3, #3
 8001c86:	e1e0      	b.n	800204a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c88:	4b35      	ldr	r3, [pc, #212]	@ (8001d60 <HAL_RCC_OscConfig+0x32c>)
 8001c8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c8c:	2202      	movs	r2, #2
 8001c8e:	4013      	ands	r3, r2
 8001c90:	d0f1      	beq.n	8001c76 <HAL_RCC_OscConfig+0x242>
 8001c92:	e018      	b.n	8001cc6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c94:	4b32      	ldr	r3, [pc, #200]	@ (8001d60 <HAL_RCC_OscConfig+0x32c>)
 8001c96:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001c98:	4b31      	ldr	r3, [pc, #196]	@ (8001d60 <HAL_RCC_OscConfig+0x32c>)
 8001c9a:	2101      	movs	r1, #1
 8001c9c:	438a      	bics	r2, r1
 8001c9e:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ca0:	f7ff fbd4 	bl	800144c <HAL_GetTick>
 8001ca4:	0003      	movs	r3, r0
 8001ca6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ca8:	e008      	b.n	8001cbc <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001caa:	f7ff fbcf 	bl	800144c <HAL_GetTick>
 8001cae:	0002      	movs	r2, r0
 8001cb0:	69bb      	ldr	r3, [r7, #24]
 8001cb2:	1ad3      	subs	r3, r2, r3
 8001cb4:	2b02      	cmp	r3, #2
 8001cb6:	d901      	bls.n	8001cbc <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8001cb8:	2303      	movs	r3, #3
 8001cba:	e1c6      	b.n	800204a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cbc:	4b28      	ldr	r3, [pc, #160]	@ (8001d60 <HAL_RCC_OscConfig+0x32c>)
 8001cbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cc0:	2202      	movs	r2, #2
 8001cc2:	4013      	ands	r3, r2
 8001cc4:	d1f1      	bne.n	8001caa <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	2204      	movs	r2, #4
 8001ccc:	4013      	ands	r3, r2
 8001cce:	d100      	bne.n	8001cd2 <HAL_RCC_OscConfig+0x29e>
 8001cd0:	e0b4      	b.n	8001e3c <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cd2:	201f      	movs	r0, #31
 8001cd4:	183b      	adds	r3, r7, r0
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cda:	4b21      	ldr	r3, [pc, #132]	@ (8001d60 <HAL_RCC_OscConfig+0x32c>)
 8001cdc:	69da      	ldr	r2, [r3, #28]
 8001cde:	2380      	movs	r3, #128	@ 0x80
 8001ce0:	055b      	lsls	r3, r3, #21
 8001ce2:	4013      	ands	r3, r2
 8001ce4:	d110      	bne.n	8001d08 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ce6:	4b1e      	ldr	r3, [pc, #120]	@ (8001d60 <HAL_RCC_OscConfig+0x32c>)
 8001ce8:	69da      	ldr	r2, [r3, #28]
 8001cea:	4b1d      	ldr	r3, [pc, #116]	@ (8001d60 <HAL_RCC_OscConfig+0x32c>)
 8001cec:	2180      	movs	r1, #128	@ 0x80
 8001cee:	0549      	lsls	r1, r1, #21
 8001cf0:	430a      	orrs	r2, r1
 8001cf2:	61da      	str	r2, [r3, #28]
 8001cf4:	4b1a      	ldr	r3, [pc, #104]	@ (8001d60 <HAL_RCC_OscConfig+0x32c>)
 8001cf6:	69da      	ldr	r2, [r3, #28]
 8001cf8:	2380      	movs	r3, #128	@ 0x80
 8001cfa:	055b      	lsls	r3, r3, #21
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	60fb      	str	r3, [r7, #12]
 8001d00:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001d02:	183b      	adds	r3, r7, r0
 8001d04:	2201      	movs	r2, #1
 8001d06:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d08:	4b18      	ldr	r3, [pc, #96]	@ (8001d6c <HAL_RCC_OscConfig+0x338>)
 8001d0a:	681a      	ldr	r2, [r3, #0]
 8001d0c:	2380      	movs	r3, #128	@ 0x80
 8001d0e:	005b      	lsls	r3, r3, #1
 8001d10:	4013      	ands	r3, r2
 8001d12:	d11a      	bne.n	8001d4a <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d14:	4b15      	ldr	r3, [pc, #84]	@ (8001d6c <HAL_RCC_OscConfig+0x338>)
 8001d16:	681a      	ldr	r2, [r3, #0]
 8001d18:	4b14      	ldr	r3, [pc, #80]	@ (8001d6c <HAL_RCC_OscConfig+0x338>)
 8001d1a:	2180      	movs	r1, #128	@ 0x80
 8001d1c:	0049      	lsls	r1, r1, #1
 8001d1e:	430a      	orrs	r2, r1
 8001d20:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d22:	f7ff fb93 	bl	800144c <HAL_GetTick>
 8001d26:	0003      	movs	r3, r0
 8001d28:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d2a:	e008      	b.n	8001d3e <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d2c:	f7ff fb8e 	bl	800144c <HAL_GetTick>
 8001d30:	0002      	movs	r2, r0
 8001d32:	69bb      	ldr	r3, [r7, #24]
 8001d34:	1ad3      	subs	r3, r2, r3
 8001d36:	2b64      	cmp	r3, #100	@ 0x64
 8001d38:	d901      	bls.n	8001d3e <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8001d3a:	2303      	movs	r3, #3
 8001d3c:	e185      	b.n	800204a <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d3e:	4b0b      	ldr	r3, [pc, #44]	@ (8001d6c <HAL_RCC_OscConfig+0x338>)
 8001d40:	681a      	ldr	r2, [r3, #0]
 8001d42:	2380      	movs	r3, #128	@ 0x80
 8001d44:	005b      	lsls	r3, r3, #1
 8001d46:	4013      	ands	r3, r2
 8001d48:	d0f0      	beq.n	8001d2c <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	689b      	ldr	r3, [r3, #8]
 8001d4e:	2b01      	cmp	r3, #1
 8001d50:	d10e      	bne.n	8001d70 <HAL_RCC_OscConfig+0x33c>
 8001d52:	4b03      	ldr	r3, [pc, #12]	@ (8001d60 <HAL_RCC_OscConfig+0x32c>)
 8001d54:	6a1a      	ldr	r2, [r3, #32]
 8001d56:	4b02      	ldr	r3, [pc, #8]	@ (8001d60 <HAL_RCC_OscConfig+0x32c>)
 8001d58:	2101      	movs	r1, #1
 8001d5a:	430a      	orrs	r2, r1
 8001d5c:	621a      	str	r2, [r3, #32]
 8001d5e:	e035      	b.n	8001dcc <HAL_RCC_OscConfig+0x398>
 8001d60:	40021000 	.word	0x40021000
 8001d64:	fffeffff 	.word	0xfffeffff
 8001d68:	fffbffff 	.word	0xfffbffff
 8001d6c:	40007000 	.word	0x40007000
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	689b      	ldr	r3, [r3, #8]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d10c      	bne.n	8001d92 <HAL_RCC_OscConfig+0x35e>
 8001d78:	4bb6      	ldr	r3, [pc, #728]	@ (8002054 <HAL_RCC_OscConfig+0x620>)
 8001d7a:	6a1a      	ldr	r2, [r3, #32]
 8001d7c:	4bb5      	ldr	r3, [pc, #724]	@ (8002054 <HAL_RCC_OscConfig+0x620>)
 8001d7e:	2101      	movs	r1, #1
 8001d80:	438a      	bics	r2, r1
 8001d82:	621a      	str	r2, [r3, #32]
 8001d84:	4bb3      	ldr	r3, [pc, #716]	@ (8002054 <HAL_RCC_OscConfig+0x620>)
 8001d86:	6a1a      	ldr	r2, [r3, #32]
 8001d88:	4bb2      	ldr	r3, [pc, #712]	@ (8002054 <HAL_RCC_OscConfig+0x620>)
 8001d8a:	2104      	movs	r1, #4
 8001d8c:	438a      	bics	r2, r1
 8001d8e:	621a      	str	r2, [r3, #32]
 8001d90:	e01c      	b.n	8001dcc <HAL_RCC_OscConfig+0x398>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	689b      	ldr	r3, [r3, #8]
 8001d96:	2b05      	cmp	r3, #5
 8001d98:	d10c      	bne.n	8001db4 <HAL_RCC_OscConfig+0x380>
 8001d9a:	4bae      	ldr	r3, [pc, #696]	@ (8002054 <HAL_RCC_OscConfig+0x620>)
 8001d9c:	6a1a      	ldr	r2, [r3, #32]
 8001d9e:	4bad      	ldr	r3, [pc, #692]	@ (8002054 <HAL_RCC_OscConfig+0x620>)
 8001da0:	2104      	movs	r1, #4
 8001da2:	430a      	orrs	r2, r1
 8001da4:	621a      	str	r2, [r3, #32]
 8001da6:	4bab      	ldr	r3, [pc, #684]	@ (8002054 <HAL_RCC_OscConfig+0x620>)
 8001da8:	6a1a      	ldr	r2, [r3, #32]
 8001daa:	4baa      	ldr	r3, [pc, #680]	@ (8002054 <HAL_RCC_OscConfig+0x620>)
 8001dac:	2101      	movs	r1, #1
 8001dae:	430a      	orrs	r2, r1
 8001db0:	621a      	str	r2, [r3, #32]
 8001db2:	e00b      	b.n	8001dcc <HAL_RCC_OscConfig+0x398>
 8001db4:	4ba7      	ldr	r3, [pc, #668]	@ (8002054 <HAL_RCC_OscConfig+0x620>)
 8001db6:	6a1a      	ldr	r2, [r3, #32]
 8001db8:	4ba6      	ldr	r3, [pc, #664]	@ (8002054 <HAL_RCC_OscConfig+0x620>)
 8001dba:	2101      	movs	r1, #1
 8001dbc:	438a      	bics	r2, r1
 8001dbe:	621a      	str	r2, [r3, #32]
 8001dc0:	4ba4      	ldr	r3, [pc, #656]	@ (8002054 <HAL_RCC_OscConfig+0x620>)
 8001dc2:	6a1a      	ldr	r2, [r3, #32]
 8001dc4:	4ba3      	ldr	r3, [pc, #652]	@ (8002054 <HAL_RCC_OscConfig+0x620>)
 8001dc6:	2104      	movs	r1, #4
 8001dc8:	438a      	bics	r2, r1
 8001dca:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	689b      	ldr	r3, [r3, #8]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d014      	beq.n	8001dfe <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dd4:	f7ff fb3a 	bl	800144c <HAL_GetTick>
 8001dd8:	0003      	movs	r3, r0
 8001dda:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ddc:	e009      	b.n	8001df2 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001dde:	f7ff fb35 	bl	800144c <HAL_GetTick>
 8001de2:	0002      	movs	r2, r0
 8001de4:	69bb      	ldr	r3, [r7, #24]
 8001de6:	1ad3      	subs	r3, r2, r3
 8001de8:	4a9b      	ldr	r2, [pc, #620]	@ (8002058 <HAL_RCC_OscConfig+0x624>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d901      	bls.n	8001df2 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8001dee:	2303      	movs	r3, #3
 8001df0:	e12b      	b.n	800204a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001df2:	4b98      	ldr	r3, [pc, #608]	@ (8002054 <HAL_RCC_OscConfig+0x620>)
 8001df4:	6a1b      	ldr	r3, [r3, #32]
 8001df6:	2202      	movs	r2, #2
 8001df8:	4013      	ands	r3, r2
 8001dfa:	d0f0      	beq.n	8001dde <HAL_RCC_OscConfig+0x3aa>
 8001dfc:	e013      	b.n	8001e26 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dfe:	f7ff fb25 	bl	800144c <HAL_GetTick>
 8001e02:	0003      	movs	r3, r0
 8001e04:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e06:	e009      	b.n	8001e1c <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e08:	f7ff fb20 	bl	800144c <HAL_GetTick>
 8001e0c:	0002      	movs	r2, r0
 8001e0e:	69bb      	ldr	r3, [r7, #24]
 8001e10:	1ad3      	subs	r3, r2, r3
 8001e12:	4a91      	ldr	r2, [pc, #580]	@ (8002058 <HAL_RCC_OscConfig+0x624>)
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d901      	bls.n	8001e1c <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8001e18:	2303      	movs	r3, #3
 8001e1a:	e116      	b.n	800204a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e1c:	4b8d      	ldr	r3, [pc, #564]	@ (8002054 <HAL_RCC_OscConfig+0x620>)
 8001e1e:	6a1b      	ldr	r3, [r3, #32]
 8001e20:	2202      	movs	r2, #2
 8001e22:	4013      	ands	r3, r2
 8001e24:	d1f0      	bne.n	8001e08 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001e26:	231f      	movs	r3, #31
 8001e28:	18fb      	adds	r3, r7, r3
 8001e2a:	781b      	ldrb	r3, [r3, #0]
 8001e2c:	2b01      	cmp	r3, #1
 8001e2e:	d105      	bne.n	8001e3c <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e30:	4b88      	ldr	r3, [pc, #544]	@ (8002054 <HAL_RCC_OscConfig+0x620>)
 8001e32:	69da      	ldr	r2, [r3, #28]
 8001e34:	4b87      	ldr	r3, [pc, #540]	@ (8002054 <HAL_RCC_OscConfig+0x620>)
 8001e36:	4989      	ldr	r1, [pc, #548]	@ (800205c <HAL_RCC_OscConfig+0x628>)
 8001e38:	400a      	ands	r2, r1
 8001e3a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	2210      	movs	r2, #16
 8001e42:	4013      	ands	r3, r2
 8001e44:	d063      	beq.n	8001f0e <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	695b      	ldr	r3, [r3, #20]
 8001e4a:	2b01      	cmp	r3, #1
 8001e4c:	d12a      	bne.n	8001ea4 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001e4e:	4b81      	ldr	r3, [pc, #516]	@ (8002054 <HAL_RCC_OscConfig+0x620>)
 8001e50:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001e52:	4b80      	ldr	r3, [pc, #512]	@ (8002054 <HAL_RCC_OscConfig+0x620>)
 8001e54:	2104      	movs	r1, #4
 8001e56:	430a      	orrs	r2, r1
 8001e58:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001e5a:	4b7e      	ldr	r3, [pc, #504]	@ (8002054 <HAL_RCC_OscConfig+0x620>)
 8001e5c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001e5e:	4b7d      	ldr	r3, [pc, #500]	@ (8002054 <HAL_RCC_OscConfig+0x620>)
 8001e60:	2101      	movs	r1, #1
 8001e62:	430a      	orrs	r2, r1
 8001e64:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e66:	f7ff faf1 	bl	800144c <HAL_GetTick>
 8001e6a:	0003      	movs	r3, r0
 8001e6c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001e6e:	e008      	b.n	8001e82 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001e70:	f7ff faec 	bl	800144c <HAL_GetTick>
 8001e74:	0002      	movs	r2, r0
 8001e76:	69bb      	ldr	r3, [r7, #24]
 8001e78:	1ad3      	subs	r3, r2, r3
 8001e7a:	2b02      	cmp	r3, #2
 8001e7c:	d901      	bls.n	8001e82 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8001e7e:	2303      	movs	r3, #3
 8001e80:	e0e3      	b.n	800204a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001e82:	4b74      	ldr	r3, [pc, #464]	@ (8002054 <HAL_RCC_OscConfig+0x620>)
 8001e84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e86:	2202      	movs	r2, #2
 8001e88:	4013      	ands	r3, r2
 8001e8a:	d0f1      	beq.n	8001e70 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001e8c:	4b71      	ldr	r3, [pc, #452]	@ (8002054 <HAL_RCC_OscConfig+0x620>)
 8001e8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e90:	22f8      	movs	r2, #248	@ 0xf8
 8001e92:	4393      	bics	r3, r2
 8001e94:	0019      	movs	r1, r3
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	699b      	ldr	r3, [r3, #24]
 8001e9a:	00da      	lsls	r2, r3, #3
 8001e9c:	4b6d      	ldr	r3, [pc, #436]	@ (8002054 <HAL_RCC_OscConfig+0x620>)
 8001e9e:	430a      	orrs	r2, r1
 8001ea0:	635a      	str	r2, [r3, #52]	@ 0x34
 8001ea2:	e034      	b.n	8001f0e <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	695b      	ldr	r3, [r3, #20]
 8001ea8:	3305      	adds	r3, #5
 8001eaa:	d111      	bne.n	8001ed0 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001eac:	4b69      	ldr	r3, [pc, #420]	@ (8002054 <HAL_RCC_OscConfig+0x620>)
 8001eae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001eb0:	4b68      	ldr	r3, [pc, #416]	@ (8002054 <HAL_RCC_OscConfig+0x620>)
 8001eb2:	2104      	movs	r1, #4
 8001eb4:	438a      	bics	r2, r1
 8001eb6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001eb8:	4b66      	ldr	r3, [pc, #408]	@ (8002054 <HAL_RCC_OscConfig+0x620>)
 8001eba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ebc:	22f8      	movs	r2, #248	@ 0xf8
 8001ebe:	4393      	bics	r3, r2
 8001ec0:	0019      	movs	r1, r3
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	699b      	ldr	r3, [r3, #24]
 8001ec6:	00da      	lsls	r2, r3, #3
 8001ec8:	4b62      	ldr	r3, [pc, #392]	@ (8002054 <HAL_RCC_OscConfig+0x620>)
 8001eca:	430a      	orrs	r2, r1
 8001ecc:	635a      	str	r2, [r3, #52]	@ 0x34
 8001ece:	e01e      	b.n	8001f0e <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001ed0:	4b60      	ldr	r3, [pc, #384]	@ (8002054 <HAL_RCC_OscConfig+0x620>)
 8001ed2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001ed4:	4b5f      	ldr	r3, [pc, #380]	@ (8002054 <HAL_RCC_OscConfig+0x620>)
 8001ed6:	2104      	movs	r1, #4
 8001ed8:	430a      	orrs	r2, r1
 8001eda:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001edc:	4b5d      	ldr	r3, [pc, #372]	@ (8002054 <HAL_RCC_OscConfig+0x620>)
 8001ede:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001ee0:	4b5c      	ldr	r3, [pc, #368]	@ (8002054 <HAL_RCC_OscConfig+0x620>)
 8001ee2:	2101      	movs	r1, #1
 8001ee4:	438a      	bics	r2, r1
 8001ee6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ee8:	f7ff fab0 	bl	800144c <HAL_GetTick>
 8001eec:	0003      	movs	r3, r0
 8001eee:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001ef0:	e008      	b.n	8001f04 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001ef2:	f7ff faab 	bl	800144c <HAL_GetTick>
 8001ef6:	0002      	movs	r2, r0
 8001ef8:	69bb      	ldr	r3, [r7, #24]
 8001efa:	1ad3      	subs	r3, r2, r3
 8001efc:	2b02      	cmp	r3, #2
 8001efe:	d901      	bls.n	8001f04 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8001f00:	2303      	movs	r3, #3
 8001f02:	e0a2      	b.n	800204a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001f04:	4b53      	ldr	r3, [pc, #332]	@ (8002054 <HAL_RCC_OscConfig+0x620>)
 8001f06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f08:	2202      	movs	r2, #2
 8001f0a:	4013      	ands	r3, r2
 8001f0c:	d1f1      	bne.n	8001ef2 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6a1b      	ldr	r3, [r3, #32]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d100      	bne.n	8001f18 <HAL_RCC_OscConfig+0x4e4>
 8001f16:	e097      	b.n	8002048 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f18:	4b4e      	ldr	r3, [pc, #312]	@ (8002054 <HAL_RCC_OscConfig+0x620>)
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	220c      	movs	r2, #12
 8001f1e:	4013      	ands	r3, r2
 8001f20:	2b08      	cmp	r3, #8
 8001f22:	d100      	bne.n	8001f26 <HAL_RCC_OscConfig+0x4f2>
 8001f24:	e06b      	b.n	8001ffe <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6a1b      	ldr	r3, [r3, #32]
 8001f2a:	2b02      	cmp	r3, #2
 8001f2c:	d14c      	bne.n	8001fc8 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f2e:	4b49      	ldr	r3, [pc, #292]	@ (8002054 <HAL_RCC_OscConfig+0x620>)
 8001f30:	681a      	ldr	r2, [r3, #0]
 8001f32:	4b48      	ldr	r3, [pc, #288]	@ (8002054 <HAL_RCC_OscConfig+0x620>)
 8001f34:	494a      	ldr	r1, [pc, #296]	@ (8002060 <HAL_RCC_OscConfig+0x62c>)
 8001f36:	400a      	ands	r2, r1
 8001f38:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f3a:	f7ff fa87 	bl	800144c <HAL_GetTick>
 8001f3e:	0003      	movs	r3, r0
 8001f40:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f42:	e008      	b.n	8001f56 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f44:	f7ff fa82 	bl	800144c <HAL_GetTick>
 8001f48:	0002      	movs	r2, r0
 8001f4a:	69bb      	ldr	r3, [r7, #24]
 8001f4c:	1ad3      	subs	r3, r2, r3
 8001f4e:	2b02      	cmp	r3, #2
 8001f50:	d901      	bls.n	8001f56 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8001f52:	2303      	movs	r3, #3
 8001f54:	e079      	b.n	800204a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f56:	4b3f      	ldr	r3, [pc, #252]	@ (8002054 <HAL_RCC_OscConfig+0x620>)
 8001f58:	681a      	ldr	r2, [r3, #0]
 8001f5a:	2380      	movs	r3, #128	@ 0x80
 8001f5c:	049b      	lsls	r3, r3, #18
 8001f5e:	4013      	ands	r3, r2
 8001f60:	d1f0      	bne.n	8001f44 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f62:	4b3c      	ldr	r3, [pc, #240]	@ (8002054 <HAL_RCC_OscConfig+0x620>)
 8001f64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f66:	220f      	movs	r2, #15
 8001f68:	4393      	bics	r3, r2
 8001f6a:	0019      	movs	r1, r3
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001f70:	4b38      	ldr	r3, [pc, #224]	@ (8002054 <HAL_RCC_OscConfig+0x620>)
 8001f72:	430a      	orrs	r2, r1
 8001f74:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001f76:	4b37      	ldr	r3, [pc, #220]	@ (8002054 <HAL_RCC_OscConfig+0x620>)
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	4a3a      	ldr	r2, [pc, #232]	@ (8002064 <HAL_RCC_OscConfig+0x630>)
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	0019      	movs	r1, r3
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f88:	431a      	orrs	r2, r3
 8001f8a:	4b32      	ldr	r3, [pc, #200]	@ (8002054 <HAL_RCC_OscConfig+0x620>)
 8001f8c:	430a      	orrs	r2, r1
 8001f8e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f90:	4b30      	ldr	r3, [pc, #192]	@ (8002054 <HAL_RCC_OscConfig+0x620>)
 8001f92:	681a      	ldr	r2, [r3, #0]
 8001f94:	4b2f      	ldr	r3, [pc, #188]	@ (8002054 <HAL_RCC_OscConfig+0x620>)
 8001f96:	2180      	movs	r1, #128	@ 0x80
 8001f98:	0449      	lsls	r1, r1, #17
 8001f9a:	430a      	orrs	r2, r1
 8001f9c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f9e:	f7ff fa55 	bl	800144c <HAL_GetTick>
 8001fa2:	0003      	movs	r3, r0
 8001fa4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001fa6:	e008      	b.n	8001fba <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fa8:	f7ff fa50 	bl	800144c <HAL_GetTick>
 8001fac:	0002      	movs	r2, r0
 8001fae:	69bb      	ldr	r3, [r7, #24]
 8001fb0:	1ad3      	subs	r3, r2, r3
 8001fb2:	2b02      	cmp	r3, #2
 8001fb4:	d901      	bls.n	8001fba <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8001fb6:	2303      	movs	r3, #3
 8001fb8:	e047      	b.n	800204a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001fba:	4b26      	ldr	r3, [pc, #152]	@ (8002054 <HAL_RCC_OscConfig+0x620>)
 8001fbc:	681a      	ldr	r2, [r3, #0]
 8001fbe:	2380      	movs	r3, #128	@ 0x80
 8001fc0:	049b      	lsls	r3, r3, #18
 8001fc2:	4013      	ands	r3, r2
 8001fc4:	d0f0      	beq.n	8001fa8 <HAL_RCC_OscConfig+0x574>
 8001fc6:	e03f      	b.n	8002048 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fc8:	4b22      	ldr	r3, [pc, #136]	@ (8002054 <HAL_RCC_OscConfig+0x620>)
 8001fca:	681a      	ldr	r2, [r3, #0]
 8001fcc:	4b21      	ldr	r3, [pc, #132]	@ (8002054 <HAL_RCC_OscConfig+0x620>)
 8001fce:	4924      	ldr	r1, [pc, #144]	@ (8002060 <HAL_RCC_OscConfig+0x62c>)
 8001fd0:	400a      	ands	r2, r1
 8001fd2:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fd4:	f7ff fa3a 	bl	800144c <HAL_GetTick>
 8001fd8:	0003      	movs	r3, r0
 8001fda:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fdc:	e008      	b.n	8001ff0 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fde:	f7ff fa35 	bl	800144c <HAL_GetTick>
 8001fe2:	0002      	movs	r2, r0
 8001fe4:	69bb      	ldr	r3, [r7, #24]
 8001fe6:	1ad3      	subs	r3, r2, r3
 8001fe8:	2b02      	cmp	r3, #2
 8001fea:	d901      	bls.n	8001ff0 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8001fec:	2303      	movs	r3, #3
 8001fee:	e02c      	b.n	800204a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ff0:	4b18      	ldr	r3, [pc, #96]	@ (8002054 <HAL_RCC_OscConfig+0x620>)
 8001ff2:	681a      	ldr	r2, [r3, #0]
 8001ff4:	2380      	movs	r3, #128	@ 0x80
 8001ff6:	049b      	lsls	r3, r3, #18
 8001ff8:	4013      	ands	r3, r2
 8001ffa:	d1f0      	bne.n	8001fde <HAL_RCC_OscConfig+0x5aa>
 8001ffc:	e024      	b.n	8002048 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6a1b      	ldr	r3, [r3, #32]
 8002002:	2b01      	cmp	r3, #1
 8002004:	d101      	bne.n	800200a <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8002006:	2301      	movs	r3, #1
 8002008:	e01f      	b.n	800204a <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 800200a:	4b12      	ldr	r3, [pc, #72]	@ (8002054 <HAL_RCC_OscConfig+0x620>)
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8002010:	4b10      	ldr	r3, [pc, #64]	@ (8002054 <HAL_RCC_OscConfig+0x620>)
 8002012:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002014:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002016:	697a      	ldr	r2, [r7, #20]
 8002018:	2380      	movs	r3, #128	@ 0x80
 800201a:	025b      	lsls	r3, r3, #9
 800201c:	401a      	ands	r2, r3
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002022:	429a      	cmp	r2, r3
 8002024:	d10e      	bne.n	8002044 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002026:	693b      	ldr	r3, [r7, #16]
 8002028:	220f      	movs	r2, #15
 800202a:	401a      	ands	r2, r3
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002030:	429a      	cmp	r2, r3
 8002032:	d107      	bne.n	8002044 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002034:	697a      	ldr	r2, [r7, #20]
 8002036:	23f0      	movs	r3, #240	@ 0xf0
 8002038:	039b      	lsls	r3, r3, #14
 800203a:	401a      	ands	r2, r3
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002040:	429a      	cmp	r2, r3
 8002042:	d001      	beq.n	8002048 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8002044:	2301      	movs	r3, #1
 8002046:	e000      	b.n	800204a <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8002048:	2300      	movs	r3, #0
}
 800204a:	0018      	movs	r0, r3
 800204c:	46bd      	mov	sp, r7
 800204e:	b008      	add	sp, #32
 8002050:	bd80      	pop	{r7, pc}
 8002052:	46c0      	nop			@ (mov r8, r8)
 8002054:	40021000 	.word	0x40021000
 8002058:	00001388 	.word	0x00001388
 800205c:	efffffff 	.word	0xefffffff
 8002060:	feffffff 	.word	0xfeffffff
 8002064:	ffc2ffff 	.word	0xffc2ffff

08002068 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b084      	sub	sp, #16
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
 8002070:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d101      	bne.n	800207c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002078:	2301      	movs	r3, #1
 800207a:	e0b3      	b.n	80021e4 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800207c:	4b5b      	ldr	r3, [pc, #364]	@ (80021ec <HAL_RCC_ClockConfig+0x184>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	2201      	movs	r2, #1
 8002082:	4013      	ands	r3, r2
 8002084:	683a      	ldr	r2, [r7, #0]
 8002086:	429a      	cmp	r2, r3
 8002088:	d911      	bls.n	80020ae <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800208a:	4b58      	ldr	r3, [pc, #352]	@ (80021ec <HAL_RCC_ClockConfig+0x184>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	2201      	movs	r2, #1
 8002090:	4393      	bics	r3, r2
 8002092:	0019      	movs	r1, r3
 8002094:	4b55      	ldr	r3, [pc, #340]	@ (80021ec <HAL_RCC_ClockConfig+0x184>)
 8002096:	683a      	ldr	r2, [r7, #0]
 8002098:	430a      	orrs	r2, r1
 800209a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800209c:	4b53      	ldr	r3, [pc, #332]	@ (80021ec <HAL_RCC_ClockConfig+0x184>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	2201      	movs	r2, #1
 80020a2:	4013      	ands	r3, r2
 80020a4:	683a      	ldr	r2, [r7, #0]
 80020a6:	429a      	cmp	r2, r3
 80020a8:	d001      	beq.n	80020ae <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80020aa:	2301      	movs	r3, #1
 80020ac:	e09a      	b.n	80021e4 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	2202      	movs	r2, #2
 80020b4:	4013      	ands	r3, r2
 80020b6:	d015      	beq.n	80020e4 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	2204      	movs	r2, #4
 80020be:	4013      	ands	r3, r2
 80020c0:	d006      	beq.n	80020d0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80020c2:	4b4b      	ldr	r3, [pc, #300]	@ (80021f0 <HAL_RCC_ClockConfig+0x188>)
 80020c4:	685a      	ldr	r2, [r3, #4]
 80020c6:	4b4a      	ldr	r3, [pc, #296]	@ (80021f0 <HAL_RCC_ClockConfig+0x188>)
 80020c8:	21e0      	movs	r1, #224	@ 0xe0
 80020ca:	00c9      	lsls	r1, r1, #3
 80020cc:	430a      	orrs	r2, r1
 80020ce:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020d0:	4b47      	ldr	r3, [pc, #284]	@ (80021f0 <HAL_RCC_ClockConfig+0x188>)
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	22f0      	movs	r2, #240	@ 0xf0
 80020d6:	4393      	bics	r3, r2
 80020d8:	0019      	movs	r1, r3
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	689a      	ldr	r2, [r3, #8]
 80020de:	4b44      	ldr	r3, [pc, #272]	@ (80021f0 <HAL_RCC_ClockConfig+0x188>)
 80020e0:	430a      	orrs	r2, r1
 80020e2:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	2201      	movs	r2, #1
 80020ea:	4013      	ands	r3, r2
 80020ec:	d040      	beq.n	8002170 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	2b01      	cmp	r3, #1
 80020f4:	d107      	bne.n	8002106 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020f6:	4b3e      	ldr	r3, [pc, #248]	@ (80021f0 <HAL_RCC_ClockConfig+0x188>)
 80020f8:	681a      	ldr	r2, [r3, #0]
 80020fa:	2380      	movs	r3, #128	@ 0x80
 80020fc:	029b      	lsls	r3, r3, #10
 80020fe:	4013      	ands	r3, r2
 8002100:	d114      	bne.n	800212c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002102:	2301      	movs	r3, #1
 8002104:	e06e      	b.n	80021e4 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	2b02      	cmp	r3, #2
 800210c:	d107      	bne.n	800211e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800210e:	4b38      	ldr	r3, [pc, #224]	@ (80021f0 <HAL_RCC_ClockConfig+0x188>)
 8002110:	681a      	ldr	r2, [r3, #0]
 8002112:	2380      	movs	r3, #128	@ 0x80
 8002114:	049b      	lsls	r3, r3, #18
 8002116:	4013      	ands	r3, r2
 8002118:	d108      	bne.n	800212c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800211a:	2301      	movs	r3, #1
 800211c:	e062      	b.n	80021e4 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800211e:	4b34      	ldr	r3, [pc, #208]	@ (80021f0 <HAL_RCC_ClockConfig+0x188>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	2202      	movs	r2, #2
 8002124:	4013      	ands	r3, r2
 8002126:	d101      	bne.n	800212c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002128:	2301      	movs	r3, #1
 800212a:	e05b      	b.n	80021e4 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800212c:	4b30      	ldr	r3, [pc, #192]	@ (80021f0 <HAL_RCC_ClockConfig+0x188>)
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	2203      	movs	r2, #3
 8002132:	4393      	bics	r3, r2
 8002134:	0019      	movs	r1, r3
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	685a      	ldr	r2, [r3, #4]
 800213a:	4b2d      	ldr	r3, [pc, #180]	@ (80021f0 <HAL_RCC_ClockConfig+0x188>)
 800213c:	430a      	orrs	r2, r1
 800213e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002140:	f7ff f984 	bl	800144c <HAL_GetTick>
 8002144:	0003      	movs	r3, r0
 8002146:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002148:	e009      	b.n	800215e <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800214a:	f7ff f97f 	bl	800144c <HAL_GetTick>
 800214e:	0002      	movs	r2, r0
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	1ad3      	subs	r3, r2, r3
 8002154:	4a27      	ldr	r2, [pc, #156]	@ (80021f4 <HAL_RCC_ClockConfig+0x18c>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d901      	bls.n	800215e <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 800215a:	2303      	movs	r3, #3
 800215c:	e042      	b.n	80021e4 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800215e:	4b24      	ldr	r3, [pc, #144]	@ (80021f0 <HAL_RCC_ClockConfig+0x188>)
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	220c      	movs	r2, #12
 8002164:	401a      	ands	r2, r3
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	009b      	lsls	r3, r3, #2
 800216c:	429a      	cmp	r2, r3
 800216e:	d1ec      	bne.n	800214a <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002170:	4b1e      	ldr	r3, [pc, #120]	@ (80021ec <HAL_RCC_ClockConfig+0x184>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	2201      	movs	r2, #1
 8002176:	4013      	ands	r3, r2
 8002178:	683a      	ldr	r2, [r7, #0]
 800217a:	429a      	cmp	r2, r3
 800217c:	d211      	bcs.n	80021a2 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800217e:	4b1b      	ldr	r3, [pc, #108]	@ (80021ec <HAL_RCC_ClockConfig+0x184>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	2201      	movs	r2, #1
 8002184:	4393      	bics	r3, r2
 8002186:	0019      	movs	r1, r3
 8002188:	4b18      	ldr	r3, [pc, #96]	@ (80021ec <HAL_RCC_ClockConfig+0x184>)
 800218a:	683a      	ldr	r2, [r7, #0]
 800218c:	430a      	orrs	r2, r1
 800218e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002190:	4b16      	ldr	r3, [pc, #88]	@ (80021ec <HAL_RCC_ClockConfig+0x184>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	2201      	movs	r2, #1
 8002196:	4013      	ands	r3, r2
 8002198:	683a      	ldr	r2, [r7, #0]
 800219a:	429a      	cmp	r2, r3
 800219c:	d001      	beq.n	80021a2 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 800219e:	2301      	movs	r3, #1
 80021a0:	e020      	b.n	80021e4 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	2204      	movs	r2, #4
 80021a8:	4013      	ands	r3, r2
 80021aa:	d009      	beq.n	80021c0 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80021ac:	4b10      	ldr	r3, [pc, #64]	@ (80021f0 <HAL_RCC_ClockConfig+0x188>)
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	4a11      	ldr	r2, [pc, #68]	@ (80021f8 <HAL_RCC_ClockConfig+0x190>)
 80021b2:	4013      	ands	r3, r2
 80021b4:	0019      	movs	r1, r3
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	68da      	ldr	r2, [r3, #12]
 80021ba:	4b0d      	ldr	r3, [pc, #52]	@ (80021f0 <HAL_RCC_ClockConfig+0x188>)
 80021bc:	430a      	orrs	r2, r1
 80021be:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80021c0:	f000 f820 	bl	8002204 <HAL_RCC_GetSysClockFreq>
 80021c4:	0001      	movs	r1, r0
 80021c6:	4b0a      	ldr	r3, [pc, #40]	@ (80021f0 <HAL_RCC_ClockConfig+0x188>)
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	091b      	lsrs	r3, r3, #4
 80021cc:	220f      	movs	r2, #15
 80021ce:	4013      	ands	r3, r2
 80021d0:	4a0a      	ldr	r2, [pc, #40]	@ (80021fc <HAL_RCC_ClockConfig+0x194>)
 80021d2:	5cd3      	ldrb	r3, [r2, r3]
 80021d4:	000a      	movs	r2, r1
 80021d6:	40da      	lsrs	r2, r3
 80021d8:	4b09      	ldr	r3, [pc, #36]	@ (8002200 <HAL_RCC_ClockConfig+0x198>)
 80021da:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80021dc:	2000      	movs	r0, #0
 80021de:	f7ff f8ef 	bl	80013c0 <HAL_InitTick>
  
  return HAL_OK;
 80021e2:	2300      	movs	r3, #0
}
 80021e4:	0018      	movs	r0, r3
 80021e6:	46bd      	mov	sp, r7
 80021e8:	b004      	add	sp, #16
 80021ea:	bd80      	pop	{r7, pc}
 80021ec:	40022000 	.word	0x40022000
 80021f0:	40021000 	.word	0x40021000
 80021f4:	00001388 	.word	0x00001388
 80021f8:	fffff8ff 	.word	0xfffff8ff
 80021fc:	080035b8 	.word	0x080035b8
 8002200:	20000000 	.word	0x20000000

08002204 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b086      	sub	sp, #24
 8002208:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800220a:	2300      	movs	r3, #0
 800220c:	60fb      	str	r3, [r7, #12]
 800220e:	2300      	movs	r3, #0
 8002210:	60bb      	str	r3, [r7, #8]
 8002212:	2300      	movs	r3, #0
 8002214:	617b      	str	r3, [r7, #20]
 8002216:	2300      	movs	r3, #0
 8002218:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800221a:	2300      	movs	r3, #0
 800221c:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800221e:	4b20      	ldr	r3, [pc, #128]	@ (80022a0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	220c      	movs	r2, #12
 8002228:	4013      	ands	r3, r2
 800222a:	2b04      	cmp	r3, #4
 800222c:	d002      	beq.n	8002234 <HAL_RCC_GetSysClockFreq+0x30>
 800222e:	2b08      	cmp	r3, #8
 8002230:	d003      	beq.n	800223a <HAL_RCC_GetSysClockFreq+0x36>
 8002232:	e02c      	b.n	800228e <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002234:	4b1b      	ldr	r3, [pc, #108]	@ (80022a4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002236:	613b      	str	r3, [r7, #16]
      break;
 8002238:	e02c      	b.n	8002294 <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	0c9b      	lsrs	r3, r3, #18
 800223e:	220f      	movs	r2, #15
 8002240:	4013      	ands	r3, r2
 8002242:	4a19      	ldr	r2, [pc, #100]	@ (80022a8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002244:	5cd3      	ldrb	r3, [r2, r3]
 8002246:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002248:	4b15      	ldr	r3, [pc, #84]	@ (80022a0 <HAL_RCC_GetSysClockFreq+0x9c>)
 800224a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800224c:	220f      	movs	r2, #15
 800224e:	4013      	ands	r3, r2
 8002250:	4a16      	ldr	r2, [pc, #88]	@ (80022ac <HAL_RCC_GetSysClockFreq+0xa8>)
 8002252:	5cd3      	ldrb	r3, [r2, r3]
 8002254:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002256:	68fa      	ldr	r2, [r7, #12]
 8002258:	2380      	movs	r3, #128	@ 0x80
 800225a:	025b      	lsls	r3, r3, #9
 800225c:	4013      	ands	r3, r2
 800225e:	d009      	beq.n	8002274 <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002260:	68b9      	ldr	r1, [r7, #8]
 8002262:	4810      	ldr	r0, [pc, #64]	@ (80022a4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002264:	f7fd ff50 	bl	8000108 <__udivsi3>
 8002268:	0003      	movs	r3, r0
 800226a:	001a      	movs	r2, r3
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	4353      	muls	r3, r2
 8002270:	617b      	str	r3, [r7, #20]
 8002272:	e009      	b.n	8002288 <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002274:	6879      	ldr	r1, [r7, #4]
 8002276:	000a      	movs	r2, r1
 8002278:	0152      	lsls	r2, r2, #5
 800227a:	1a52      	subs	r2, r2, r1
 800227c:	0193      	lsls	r3, r2, #6
 800227e:	1a9b      	subs	r3, r3, r2
 8002280:	00db      	lsls	r3, r3, #3
 8002282:	185b      	adds	r3, r3, r1
 8002284:	021b      	lsls	r3, r3, #8
 8002286:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 8002288:	697b      	ldr	r3, [r7, #20]
 800228a:	613b      	str	r3, [r7, #16]
      break;
 800228c:	e002      	b.n	8002294 <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800228e:	4b05      	ldr	r3, [pc, #20]	@ (80022a4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002290:	613b      	str	r3, [r7, #16]
      break;
 8002292:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002294:	693b      	ldr	r3, [r7, #16]
}
 8002296:	0018      	movs	r0, r3
 8002298:	46bd      	mov	sp, r7
 800229a:	b006      	add	sp, #24
 800229c:	bd80      	pop	{r7, pc}
 800229e:	46c0      	nop			@ (mov r8, r8)
 80022a0:	40021000 	.word	0x40021000
 80022a4:	007a1200 	.word	0x007a1200
 80022a8:	080035d0 	.word	0x080035d0
 80022ac:	080035e0 	.word	0x080035e0

080022b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80022b4:	4b02      	ldr	r3, [pc, #8]	@ (80022c0 <HAL_RCC_GetHCLKFreq+0x10>)
 80022b6:	681b      	ldr	r3, [r3, #0]
}
 80022b8:	0018      	movs	r0, r3
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}
 80022be:	46c0      	nop			@ (mov r8, r8)
 80022c0:	20000000 	.word	0x20000000

080022c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80022c8:	f7ff fff2 	bl	80022b0 <HAL_RCC_GetHCLKFreq>
 80022cc:	0001      	movs	r1, r0
 80022ce:	4b06      	ldr	r3, [pc, #24]	@ (80022e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	0a1b      	lsrs	r3, r3, #8
 80022d4:	2207      	movs	r2, #7
 80022d6:	4013      	ands	r3, r2
 80022d8:	4a04      	ldr	r2, [pc, #16]	@ (80022ec <HAL_RCC_GetPCLK1Freq+0x28>)
 80022da:	5cd3      	ldrb	r3, [r2, r3]
 80022dc:	40d9      	lsrs	r1, r3
 80022de:	000b      	movs	r3, r1
}    
 80022e0:	0018      	movs	r0, r3
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}
 80022e6:	46c0      	nop			@ (mov r8, r8)
 80022e8:	40021000 	.word	0x40021000
 80022ec:	080035c8 	.word	0x080035c8

080022f0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b086      	sub	sp, #24
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80022f8:	2300      	movs	r3, #0
 80022fa:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 80022fc:	2300      	movs	r3, #0
 80022fe:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681a      	ldr	r2, [r3, #0]
 8002304:	2380      	movs	r3, #128	@ 0x80
 8002306:	025b      	lsls	r3, r3, #9
 8002308:	4013      	ands	r3, r2
 800230a:	d100      	bne.n	800230e <HAL_RCCEx_PeriphCLKConfig+0x1e>
 800230c:	e08e      	b.n	800242c <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 800230e:	2017      	movs	r0, #23
 8002310:	183b      	adds	r3, r7, r0
 8002312:	2200      	movs	r2, #0
 8002314:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002316:	4b57      	ldr	r3, [pc, #348]	@ (8002474 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002318:	69da      	ldr	r2, [r3, #28]
 800231a:	2380      	movs	r3, #128	@ 0x80
 800231c:	055b      	lsls	r3, r3, #21
 800231e:	4013      	ands	r3, r2
 8002320:	d110      	bne.n	8002344 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002322:	4b54      	ldr	r3, [pc, #336]	@ (8002474 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002324:	69da      	ldr	r2, [r3, #28]
 8002326:	4b53      	ldr	r3, [pc, #332]	@ (8002474 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002328:	2180      	movs	r1, #128	@ 0x80
 800232a:	0549      	lsls	r1, r1, #21
 800232c:	430a      	orrs	r2, r1
 800232e:	61da      	str	r2, [r3, #28]
 8002330:	4b50      	ldr	r3, [pc, #320]	@ (8002474 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002332:	69da      	ldr	r2, [r3, #28]
 8002334:	2380      	movs	r3, #128	@ 0x80
 8002336:	055b      	lsls	r3, r3, #21
 8002338:	4013      	ands	r3, r2
 800233a:	60bb      	str	r3, [r7, #8]
 800233c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800233e:	183b      	adds	r3, r7, r0
 8002340:	2201      	movs	r2, #1
 8002342:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002344:	4b4c      	ldr	r3, [pc, #304]	@ (8002478 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002346:	681a      	ldr	r2, [r3, #0]
 8002348:	2380      	movs	r3, #128	@ 0x80
 800234a:	005b      	lsls	r3, r3, #1
 800234c:	4013      	ands	r3, r2
 800234e:	d11a      	bne.n	8002386 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002350:	4b49      	ldr	r3, [pc, #292]	@ (8002478 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002352:	681a      	ldr	r2, [r3, #0]
 8002354:	4b48      	ldr	r3, [pc, #288]	@ (8002478 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002356:	2180      	movs	r1, #128	@ 0x80
 8002358:	0049      	lsls	r1, r1, #1
 800235a:	430a      	orrs	r2, r1
 800235c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800235e:	f7ff f875 	bl	800144c <HAL_GetTick>
 8002362:	0003      	movs	r3, r0
 8002364:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002366:	e008      	b.n	800237a <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002368:	f7ff f870 	bl	800144c <HAL_GetTick>
 800236c:	0002      	movs	r2, r0
 800236e:	693b      	ldr	r3, [r7, #16]
 8002370:	1ad3      	subs	r3, r2, r3
 8002372:	2b64      	cmp	r3, #100	@ 0x64
 8002374:	d901      	bls.n	800237a <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8002376:	2303      	movs	r3, #3
 8002378:	e077      	b.n	800246a <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800237a:	4b3f      	ldr	r3, [pc, #252]	@ (8002478 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 800237c:	681a      	ldr	r2, [r3, #0]
 800237e:	2380      	movs	r3, #128	@ 0x80
 8002380:	005b      	lsls	r3, r3, #1
 8002382:	4013      	ands	r3, r2
 8002384:	d0f0      	beq.n	8002368 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002386:	4b3b      	ldr	r3, [pc, #236]	@ (8002474 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002388:	6a1a      	ldr	r2, [r3, #32]
 800238a:	23c0      	movs	r3, #192	@ 0xc0
 800238c:	009b      	lsls	r3, r3, #2
 800238e:	4013      	ands	r3, r2
 8002390:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d034      	beq.n	8002402 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	685a      	ldr	r2, [r3, #4]
 800239c:	23c0      	movs	r3, #192	@ 0xc0
 800239e:	009b      	lsls	r3, r3, #2
 80023a0:	4013      	ands	r3, r2
 80023a2:	68fa      	ldr	r2, [r7, #12]
 80023a4:	429a      	cmp	r2, r3
 80023a6:	d02c      	beq.n	8002402 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80023a8:	4b32      	ldr	r3, [pc, #200]	@ (8002474 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80023aa:	6a1b      	ldr	r3, [r3, #32]
 80023ac:	4a33      	ldr	r2, [pc, #204]	@ (800247c <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 80023ae:	4013      	ands	r3, r2
 80023b0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80023b2:	4b30      	ldr	r3, [pc, #192]	@ (8002474 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80023b4:	6a1a      	ldr	r2, [r3, #32]
 80023b6:	4b2f      	ldr	r3, [pc, #188]	@ (8002474 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80023b8:	2180      	movs	r1, #128	@ 0x80
 80023ba:	0249      	lsls	r1, r1, #9
 80023bc:	430a      	orrs	r2, r1
 80023be:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80023c0:	4b2c      	ldr	r3, [pc, #176]	@ (8002474 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80023c2:	6a1a      	ldr	r2, [r3, #32]
 80023c4:	4b2b      	ldr	r3, [pc, #172]	@ (8002474 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80023c6:	492e      	ldr	r1, [pc, #184]	@ (8002480 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 80023c8:	400a      	ands	r2, r1
 80023ca:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80023cc:	4b29      	ldr	r3, [pc, #164]	@ (8002474 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80023ce:	68fa      	ldr	r2, [r7, #12]
 80023d0:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	2201      	movs	r2, #1
 80023d6:	4013      	ands	r3, r2
 80023d8:	d013      	beq.n	8002402 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023da:	f7ff f837 	bl	800144c <HAL_GetTick>
 80023de:	0003      	movs	r3, r0
 80023e0:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023e2:	e009      	b.n	80023f8 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023e4:	f7ff f832 	bl	800144c <HAL_GetTick>
 80023e8:	0002      	movs	r2, r0
 80023ea:	693b      	ldr	r3, [r7, #16]
 80023ec:	1ad3      	subs	r3, r2, r3
 80023ee:	4a25      	ldr	r2, [pc, #148]	@ (8002484 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d901      	bls.n	80023f8 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 80023f4:	2303      	movs	r3, #3
 80023f6:	e038      	b.n	800246a <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023f8:	4b1e      	ldr	r3, [pc, #120]	@ (8002474 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80023fa:	6a1b      	ldr	r3, [r3, #32]
 80023fc:	2202      	movs	r2, #2
 80023fe:	4013      	ands	r3, r2
 8002400:	d0f0      	beq.n	80023e4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002402:	4b1c      	ldr	r3, [pc, #112]	@ (8002474 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002404:	6a1b      	ldr	r3, [r3, #32]
 8002406:	4a1d      	ldr	r2, [pc, #116]	@ (800247c <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8002408:	4013      	ands	r3, r2
 800240a:	0019      	movs	r1, r3
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	685a      	ldr	r2, [r3, #4]
 8002410:	4b18      	ldr	r3, [pc, #96]	@ (8002474 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002412:	430a      	orrs	r2, r1
 8002414:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002416:	2317      	movs	r3, #23
 8002418:	18fb      	adds	r3, r7, r3
 800241a:	781b      	ldrb	r3, [r3, #0]
 800241c:	2b01      	cmp	r3, #1
 800241e:	d105      	bne.n	800242c <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002420:	4b14      	ldr	r3, [pc, #80]	@ (8002474 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002422:	69da      	ldr	r2, [r3, #28]
 8002424:	4b13      	ldr	r3, [pc, #76]	@ (8002474 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002426:	4918      	ldr	r1, [pc, #96]	@ (8002488 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8002428:	400a      	ands	r2, r1
 800242a:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	2201      	movs	r2, #1
 8002432:	4013      	ands	r3, r2
 8002434:	d009      	beq.n	800244a <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002436:	4b0f      	ldr	r3, [pc, #60]	@ (8002474 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002438:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800243a:	2203      	movs	r2, #3
 800243c:	4393      	bics	r3, r2
 800243e:	0019      	movs	r1, r3
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	689a      	ldr	r2, [r3, #8]
 8002444:	4b0b      	ldr	r3, [pc, #44]	@ (8002474 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002446:	430a      	orrs	r2, r1
 8002448:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	2220      	movs	r2, #32
 8002450:	4013      	ands	r3, r2
 8002452:	d009      	beq.n	8002468 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002454:	4b07      	ldr	r3, [pc, #28]	@ (8002474 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002456:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002458:	2210      	movs	r2, #16
 800245a:	4393      	bics	r3, r2
 800245c:	0019      	movs	r1, r3
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	68da      	ldr	r2, [r3, #12]
 8002462:	4b04      	ldr	r3, [pc, #16]	@ (8002474 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002464:	430a      	orrs	r2, r1
 8002466:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8002468:	2300      	movs	r3, #0
}
 800246a:	0018      	movs	r0, r3
 800246c:	46bd      	mov	sp, r7
 800246e:	b006      	add	sp, #24
 8002470:	bd80      	pop	{r7, pc}
 8002472:	46c0      	nop			@ (mov r8, r8)
 8002474:	40021000 	.word	0x40021000
 8002478:	40007000 	.word	0x40007000
 800247c:	fffffcff 	.word	0xfffffcff
 8002480:	fffeffff 	.word	0xfffeffff
 8002484:	00001388 	.word	0x00001388
 8002488:	efffffff 	.word	0xefffffff

0800248c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b082      	sub	sp, #8
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d101      	bne.n	800249e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800249a:	2301      	movs	r3, #1
 800249c:	e044      	b.n	8002528 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d107      	bne.n	80024b6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2278      	movs	r2, #120	@ 0x78
 80024aa:	2100      	movs	r1, #0
 80024ac:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	0018      	movs	r0, r3
 80024b2:	f7fe fec5 	bl	8001240 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2224      	movs	r2, #36	@ 0x24
 80024ba:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	681a      	ldr	r2, [r3, #0]
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	2101      	movs	r1, #1
 80024c8:	438a      	bics	r2, r1
 80024ca:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d003      	beq.n	80024dc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	0018      	movs	r0, r3
 80024d8:	f000 fdc4 	bl	8003064 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	0018      	movs	r0, r3
 80024e0:	f000 fc80 	bl	8002de4 <UART_SetConfig>
 80024e4:	0003      	movs	r3, r0
 80024e6:	2b01      	cmp	r3, #1
 80024e8:	d101      	bne.n	80024ee <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 80024ea:	2301      	movs	r3, #1
 80024ec:	e01c      	b.n	8002528 <HAL_UART_Init+0x9c>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	685a      	ldr	r2, [r3, #4]
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	490d      	ldr	r1, [pc, #52]	@ (8002530 <HAL_UART_Init+0xa4>)
 80024fa:	400a      	ands	r2, r1
 80024fc:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	689a      	ldr	r2, [r3, #8]
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	2108      	movs	r1, #8
 800250a:	438a      	bics	r2, r1
 800250c:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	681a      	ldr	r2, [r3, #0]
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	2101      	movs	r1, #1
 800251a:	430a      	orrs	r2, r1
 800251c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	0018      	movs	r0, r3
 8002522:	f000 fe53 	bl	80031cc <UART_CheckIdleState>
 8002526:	0003      	movs	r3, r0
}
 8002528:	0018      	movs	r0, r3
 800252a:	46bd      	mov	sp, r7
 800252c:	b002      	add	sp, #8
 800252e:	bd80      	pop	{r7, pc}
 8002530:	fffff7ff 	.word	0xfffff7ff

08002534 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b08a      	sub	sp, #40	@ 0x28
 8002538:	af02      	add	r7, sp, #8
 800253a:	60f8      	str	r0, [r7, #12]
 800253c:	60b9      	str	r1, [r7, #8]
 800253e:	603b      	str	r3, [r7, #0]
 8002540:	1dbb      	adds	r3, r7, #6
 8002542:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002548:	2b20      	cmp	r3, #32
 800254a:	d000      	beq.n	800254e <HAL_UART_Transmit+0x1a>
 800254c:	e08c      	b.n	8002668 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 800254e:	68bb      	ldr	r3, [r7, #8]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d003      	beq.n	800255c <HAL_UART_Transmit+0x28>
 8002554:	1dbb      	adds	r3, r7, #6
 8002556:	881b      	ldrh	r3, [r3, #0]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d101      	bne.n	8002560 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800255c:	2301      	movs	r3, #1
 800255e:	e084      	b.n	800266a <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	689a      	ldr	r2, [r3, #8]
 8002564:	2380      	movs	r3, #128	@ 0x80
 8002566:	015b      	lsls	r3, r3, #5
 8002568:	429a      	cmp	r2, r3
 800256a:	d109      	bne.n	8002580 <HAL_UART_Transmit+0x4c>
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	691b      	ldr	r3, [r3, #16]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d105      	bne.n	8002580 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002574:	68bb      	ldr	r3, [r7, #8]
 8002576:	2201      	movs	r2, #1
 8002578:	4013      	ands	r3, r2
 800257a:	d001      	beq.n	8002580 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 800257c:	2301      	movs	r3, #1
 800257e:	e074      	b.n	800266a <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	2284      	movs	r2, #132	@ 0x84
 8002584:	2100      	movs	r1, #0
 8002586:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	2221      	movs	r2, #33	@ 0x21
 800258c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800258e:	f7fe ff5d 	bl	800144c <HAL_GetTick>
 8002592:	0003      	movs	r3, r0
 8002594:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	1dba      	adds	r2, r7, #6
 800259a:	2150      	movs	r1, #80	@ 0x50
 800259c:	8812      	ldrh	r2, [r2, #0]
 800259e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	1dba      	adds	r2, r7, #6
 80025a4:	2152      	movs	r1, #82	@ 0x52
 80025a6:	8812      	ldrh	r2, [r2, #0]
 80025a8:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	689a      	ldr	r2, [r3, #8]
 80025ae:	2380      	movs	r3, #128	@ 0x80
 80025b0:	015b      	lsls	r3, r3, #5
 80025b2:	429a      	cmp	r2, r3
 80025b4:	d108      	bne.n	80025c8 <HAL_UART_Transmit+0x94>
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	691b      	ldr	r3, [r3, #16]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d104      	bne.n	80025c8 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 80025be:	2300      	movs	r3, #0
 80025c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80025c2:	68bb      	ldr	r3, [r7, #8]
 80025c4:	61bb      	str	r3, [r7, #24]
 80025c6:	e003      	b.n	80025d0 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 80025c8:	68bb      	ldr	r3, [r7, #8]
 80025ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80025cc:	2300      	movs	r3, #0
 80025ce:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80025d0:	e02f      	b.n	8002632 <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80025d2:	697a      	ldr	r2, [r7, #20]
 80025d4:	68f8      	ldr	r0, [r7, #12]
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	9300      	str	r3, [sp, #0]
 80025da:	0013      	movs	r3, r2
 80025dc:	2200      	movs	r2, #0
 80025de:	2180      	movs	r1, #128	@ 0x80
 80025e0:	f000 fe9c 	bl	800331c <UART_WaitOnFlagUntilTimeout>
 80025e4:	1e03      	subs	r3, r0, #0
 80025e6:	d004      	beq.n	80025f2 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	2220      	movs	r2, #32
 80025ec:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80025ee:	2303      	movs	r3, #3
 80025f0:	e03b      	b.n	800266a <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 80025f2:	69fb      	ldr	r3, [r7, #28]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d10b      	bne.n	8002610 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80025f8:	69bb      	ldr	r3, [r7, #24]
 80025fa:	881a      	ldrh	r2, [r3, #0]
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	05d2      	lsls	r2, r2, #23
 8002602:	0dd2      	lsrs	r2, r2, #23
 8002604:	b292      	uxth	r2, r2
 8002606:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002608:	69bb      	ldr	r3, [r7, #24]
 800260a:	3302      	adds	r3, #2
 800260c:	61bb      	str	r3, [r7, #24]
 800260e:	e007      	b.n	8002620 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002610:	69fb      	ldr	r3, [r7, #28]
 8002612:	781a      	ldrb	r2, [r3, #0]
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800261a:	69fb      	ldr	r3, [r7, #28]
 800261c:	3301      	adds	r3, #1
 800261e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	2252      	movs	r2, #82	@ 0x52
 8002624:	5a9b      	ldrh	r3, [r3, r2]
 8002626:	b29b      	uxth	r3, r3
 8002628:	3b01      	subs	r3, #1
 800262a:	b299      	uxth	r1, r3
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	2252      	movs	r2, #82	@ 0x52
 8002630:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	2252      	movs	r2, #82	@ 0x52
 8002636:	5a9b      	ldrh	r3, [r3, r2]
 8002638:	b29b      	uxth	r3, r3
 800263a:	2b00      	cmp	r3, #0
 800263c:	d1c9      	bne.n	80025d2 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800263e:	697a      	ldr	r2, [r7, #20]
 8002640:	68f8      	ldr	r0, [r7, #12]
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	9300      	str	r3, [sp, #0]
 8002646:	0013      	movs	r3, r2
 8002648:	2200      	movs	r2, #0
 800264a:	2140      	movs	r1, #64	@ 0x40
 800264c:	f000 fe66 	bl	800331c <UART_WaitOnFlagUntilTimeout>
 8002650:	1e03      	subs	r3, r0, #0
 8002652:	d004      	beq.n	800265e <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	2220      	movs	r2, #32
 8002658:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800265a:	2303      	movs	r3, #3
 800265c:	e005      	b.n	800266a <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	2220      	movs	r2, #32
 8002662:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8002664:	2300      	movs	r3, #0
 8002666:	e000      	b.n	800266a <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8002668:	2302      	movs	r3, #2
  }
}
 800266a:	0018      	movs	r0, r3
 800266c:	46bd      	mov	sp, r7
 800266e:	b008      	add	sp, #32
 8002670:	bd80      	pop	{r7, pc}
	...

08002674 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b08a      	sub	sp, #40	@ 0x28
 8002678:	af02      	add	r7, sp, #8
 800267a:	60f8      	str	r0, [r7, #12]
 800267c:	60b9      	str	r1, [r7, #8]
 800267e:	603b      	str	r3, [r7, #0]
 8002680:	1dbb      	adds	r3, r7, #6
 8002682:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	2280      	movs	r2, #128	@ 0x80
 8002688:	589b      	ldr	r3, [r3, r2]
 800268a:	2b20      	cmp	r3, #32
 800268c:	d000      	beq.n	8002690 <HAL_UART_Receive+0x1c>
 800268e:	e0bd      	b.n	800280c <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 8002690:	68bb      	ldr	r3, [r7, #8]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d003      	beq.n	800269e <HAL_UART_Receive+0x2a>
 8002696:	1dbb      	adds	r3, r7, #6
 8002698:	881b      	ldrh	r3, [r3, #0]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d101      	bne.n	80026a2 <HAL_UART_Receive+0x2e>
    {
      return  HAL_ERROR;
 800269e:	2301      	movs	r3, #1
 80026a0:	e0b5      	b.n	800280e <HAL_UART_Receive+0x19a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	689a      	ldr	r2, [r3, #8]
 80026a6:	2380      	movs	r3, #128	@ 0x80
 80026a8:	015b      	lsls	r3, r3, #5
 80026aa:	429a      	cmp	r2, r3
 80026ac:	d109      	bne.n	80026c2 <HAL_UART_Receive+0x4e>
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	691b      	ldr	r3, [r3, #16]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d105      	bne.n	80026c2 <HAL_UART_Receive+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80026b6:	68bb      	ldr	r3, [r7, #8]
 80026b8:	2201      	movs	r2, #1
 80026ba:	4013      	ands	r3, r2
 80026bc:	d001      	beq.n	80026c2 <HAL_UART_Receive+0x4e>
      {
        return  HAL_ERROR;
 80026be:	2301      	movs	r3, #1
 80026c0:	e0a5      	b.n	800280e <HAL_UART_Receive+0x19a>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	2284      	movs	r2, #132	@ 0x84
 80026c6:	2100      	movs	r1, #0
 80026c8:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	2280      	movs	r2, #128	@ 0x80
 80026ce:	2122      	movs	r1, #34	@ 0x22
 80026d0:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	2200      	movs	r2, #0
 80026d6:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80026d8:	f7fe feb8 	bl	800144c <HAL_GetTick>
 80026dc:	0003      	movs	r3, r0
 80026de:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	1dba      	adds	r2, r7, #6
 80026e4:	2158      	movs	r1, #88	@ 0x58
 80026e6:	8812      	ldrh	r2, [r2, #0]
 80026e8:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	1dba      	adds	r2, r7, #6
 80026ee:	215a      	movs	r1, #90	@ 0x5a
 80026f0:	8812      	ldrh	r2, [r2, #0]
 80026f2:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	689a      	ldr	r2, [r3, #8]
 80026f8:	2380      	movs	r3, #128	@ 0x80
 80026fa:	015b      	lsls	r3, r3, #5
 80026fc:	429a      	cmp	r2, r3
 80026fe:	d10d      	bne.n	800271c <HAL_UART_Receive+0xa8>
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	691b      	ldr	r3, [r3, #16]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d104      	bne.n	8002712 <HAL_UART_Receive+0x9e>
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	225c      	movs	r2, #92	@ 0x5c
 800270c:	4942      	ldr	r1, [pc, #264]	@ (8002818 <HAL_UART_Receive+0x1a4>)
 800270e:	5299      	strh	r1, [r3, r2]
 8002710:	e01a      	b.n	8002748 <HAL_UART_Receive+0xd4>
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	225c      	movs	r2, #92	@ 0x5c
 8002716:	21ff      	movs	r1, #255	@ 0xff
 8002718:	5299      	strh	r1, [r3, r2]
 800271a:	e015      	b.n	8002748 <HAL_UART_Receive+0xd4>
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	689b      	ldr	r3, [r3, #8]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d10d      	bne.n	8002740 <HAL_UART_Receive+0xcc>
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	691b      	ldr	r3, [r3, #16]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d104      	bne.n	8002736 <HAL_UART_Receive+0xc2>
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	225c      	movs	r2, #92	@ 0x5c
 8002730:	21ff      	movs	r1, #255	@ 0xff
 8002732:	5299      	strh	r1, [r3, r2]
 8002734:	e008      	b.n	8002748 <HAL_UART_Receive+0xd4>
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	225c      	movs	r2, #92	@ 0x5c
 800273a:	217f      	movs	r1, #127	@ 0x7f
 800273c:	5299      	strh	r1, [r3, r2]
 800273e:	e003      	b.n	8002748 <HAL_UART_Receive+0xd4>
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	225c      	movs	r2, #92	@ 0x5c
 8002744:	2100      	movs	r1, #0
 8002746:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 8002748:	2312      	movs	r3, #18
 800274a:	18fb      	adds	r3, r7, r3
 800274c:	68fa      	ldr	r2, [r7, #12]
 800274e:	215c      	movs	r1, #92	@ 0x5c
 8002750:	5a52      	ldrh	r2, [r2, r1]
 8002752:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	689a      	ldr	r2, [r3, #8]
 8002758:	2380      	movs	r3, #128	@ 0x80
 800275a:	015b      	lsls	r3, r3, #5
 800275c:	429a      	cmp	r2, r3
 800275e:	d108      	bne.n	8002772 <HAL_UART_Receive+0xfe>
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	691b      	ldr	r3, [r3, #16]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d104      	bne.n	8002772 <HAL_UART_Receive+0xfe>
    {
      pdata8bits  = NULL;
 8002768:	2300      	movs	r3, #0
 800276a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800276c:	68bb      	ldr	r3, [r7, #8]
 800276e:	61bb      	str	r3, [r7, #24]
 8002770:	e003      	b.n	800277a <HAL_UART_Receive+0x106>
    }
    else
    {
      pdata8bits  = pData;
 8002772:	68bb      	ldr	r3, [r7, #8]
 8002774:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002776:	2300      	movs	r3, #0
 8002778:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800277a:	e03b      	b.n	80027f4 <HAL_UART_Receive+0x180>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800277c:	697a      	ldr	r2, [r7, #20]
 800277e:	68f8      	ldr	r0, [r7, #12]
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	9300      	str	r3, [sp, #0]
 8002784:	0013      	movs	r3, r2
 8002786:	2200      	movs	r2, #0
 8002788:	2120      	movs	r1, #32
 800278a:	f000 fdc7 	bl	800331c <UART_WaitOnFlagUntilTimeout>
 800278e:	1e03      	subs	r3, r0, #0
 8002790:	d005      	beq.n	800279e <HAL_UART_Receive+0x12a>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	2280      	movs	r2, #128	@ 0x80
 8002796:	2120      	movs	r1, #32
 8002798:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 800279a:	2303      	movs	r3, #3
 800279c:	e037      	b.n	800280e <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 800279e:	69fb      	ldr	r3, [r7, #28]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d10e      	bne.n	80027c2 <HAL_UART_Receive+0x14e>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80027aa:	b29b      	uxth	r3, r3
 80027ac:	2212      	movs	r2, #18
 80027ae:	18ba      	adds	r2, r7, r2
 80027b0:	8812      	ldrh	r2, [r2, #0]
 80027b2:	4013      	ands	r3, r2
 80027b4:	b29a      	uxth	r2, r3
 80027b6:	69bb      	ldr	r3, [r7, #24]
 80027b8:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80027ba:	69bb      	ldr	r3, [r7, #24]
 80027bc:	3302      	adds	r3, #2
 80027be:	61bb      	str	r3, [r7, #24]
 80027c0:	e00f      	b.n	80027e2 <HAL_UART_Receive+0x16e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80027c8:	b29b      	uxth	r3, r3
 80027ca:	b2db      	uxtb	r3, r3
 80027cc:	2212      	movs	r2, #18
 80027ce:	18ba      	adds	r2, r7, r2
 80027d0:	8812      	ldrh	r2, [r2, #0]
 80027d2:	b2d2      	uxtb	r2, r2
 80027d4:	4013      	ands	r3, r2
 80027d6:	b2da      	uxtb	r2, r3
 80027d8:	69fb      	ldr	r3, [r7, #28]
 80027da:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80027dc:	69fb      	ldr	r3, [r7, #28]
 80027de:	3301      	adds	r3, #1
 80027e0:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	225a      	movs	r2, #90	@ 0x5a
 80027e6:	5a9b      	ldrh	r3, [r3, r2]
 80027e8:	b29b      	uxth	r3, r3
 80027ea:	3b01      	subs	r3, #1
 80027ec:	b299      	uxth	r1, r3
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	225a      	movs	r2, #90	@ 0x5a
 80027f2:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	225a      	movs	r2, #90	@ 0x5a
 80027f8:	5a9b      	ldrh	r3, [r3, r2]
 80027fa:	b29b      	uxth	r3, r3
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d1bd      	bne.n	800277c <HAL_UART_Receive+0x108>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	2280      	movs	r2, #128	@ 0x80
 8002804:	2120      	movs	r1, #32
 8002806:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8002808:	2300      	movs	r3, #0
 800280a:	e000      	b.n	800280e <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 800280c:	2302      	movs	r3, #2
  }
}
 800280e:	0018      	movs	r0, r3
 8002810:	46bd      	mov	sp, r7
 8002812:	b008      	add	sp, #32
 8002814:	bd80      	pop	{r7, pc}
 8002816:	46c0      	nop			@ (mov r8, r8)
 8002818:	000001ff 	.word	0x000001ff

0800281c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800281c:	b590      	push	{r4, r7, lr}
 800281e:	b0ab      	sub	sp, #172	@ 0xac
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	69db      	ldr	r3, [r3, #28]
 800282a:	22a4      	movs	r2, #164	@ 0xa4
 800282c:	18b9      	adds	r1, r7, r2
 800282e:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	20a0      	movs	r0, #160	@ 0xa0
 8002838:	1839      	adds	r1, r7, r0
 800283a:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	689b      	ldr	r3, [r3, #8]
 8002842:	219c      	movs	r1, #156	@ 0x9c
 8002844:	1879      	adds	r1, r7, r1
 8002846:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002848:	0011      	movs	r1, r2
 800284a:	18bb      	adds	r3, r7, r2
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4a99      	ldr	r2, [pc, #612]	@ (8002ab4 <HAL_UART_IRQHandler+0x298>)
 8002850:	4013      	ands	r3, r2
 8002852:	2298      	movs	r2, #152	@ 0x98
 8002854:	18bc      	adds	r4, r7, r2
 8002856:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8002858:	18bb      	adds	r3, r7, r2
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d114      	bne.n	800288a <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002860:	187b      	adds	r3, r7, r1
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	2220      	movs	r2, #32
 8002866:	4013      	ands	r3, r2
 8002868:	d00f      	beq.n	800288a <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800286a:	183b      	adds	r3, r7, r0
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	2220      	movs	r2, #32
 8002870:	4013      	ands	r3, r2
 8002872:	d00a      	beq.n	800288a <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002878:	2b00      	cmp	r3, #0
 800287a:	d100      	bne.n	800287e <HAL_UART_IRQHandler+0x62>
 800287c:	e286      	b.n	8002d8c <HAL_UART_IRQHandler+0x570>
      {
        huart->RxISR(huart);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002882:	687a      	ldr	r2, [r7, #4]
 8002884:	0010      	movs	r0, r2
 8002886:	4798      	blx	r3
      }
      return;
 8002888:	e280      	b.n	8002d8c <HAL_UART_IRQHandler+0x570>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800288a:	2398      	movs	r3, #152	@ 0x98
 800288c:	18fb      	adds	r3, r7, r3
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d100      	bne.n	8002896 <HAL_UART_IRQHandler+0x7a>
 8002894:	e114      	b.n	8002ac0 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002896:	239c      	movs	r3, #156	@ 0x9c
 8002898:	18fb      	adds	r3, r7, r3
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	2201      	movs	r2, #1
 800289e:	4013      	ands	r3, r2
 80028a0:	d106      	bne.n	80028b0 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80028a2:	23a0      	movs	r3, #160	@ 0xa0
 80028a4:	18fb      	adds	r3, r7, r3
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a83      	ldr	r2, [pc, #524]	@ (8002ab8 <HAL_UART_IRQHandler+0x29c>)
 80028aa:	4013      	ands	r3, r2
 80028ac:	d100      	bne.n	80028b0 <HAL_UART_IRQHandler+0x94>
 80028ae:	e107      	b.n	8002ac0 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80028b0:	23a4      	movs	r3, #164	@ 0xa4
 80028b2:	18fb      	adds	r3, r7, r3
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	2201      	movs	r2, #1
 80028b8:	4013      	ands	r3, r2
 80028ba:	d012      	beq.n	80028e2 <HAL_UART_IRQHandler+0xc6>
 80028bc:	23a0      	movs	r3, #160	@ 0xa0
 80028be:	18fb      	adds	r3, r7, r3
 80028c0:	681a      	ldr	r2, [r3, #0]
 80028c2:	2380      	movs	r3, #128	@ 0x80
 80028c4:	005b      	lsls	r3, r3, #1
 80028c6:	4013      	ands	r3, r2
 80028c8:	d00b      	beq.n	80028e2 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	2201      	movs	r2, #1
 80028d0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2284      	movs	r2, #132	@ 0x84
 80028d6:	589b      	ldr	r3, [r3, r2]
 80028d8:	2201      	movs	r2, #1
 80028da:	431a      	orrs	r2, r3
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2184      	movs	r1, #132	@ 0x84
 80028e0:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80028e2:	23a4      	movs	r3, #164	@ 0xa4
 80028e4:	18fb      	adds	r3, r7, r3
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	2202      	movs	r2, #2
 80028ea:	4013      	ands	r3, r2
 80028ec:	d011      	beq.n	8002912 <HAL_UART_IRQHandler+0xf6>
 80028ee:	239c      	movs	r3, #156	@ 0x9c
 80028f0:	18fb      	adds	r3, r7, r3
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	2201      	movs	r2, #1
 80028f6:	4013      	ands	r3, r2
 80028f8:	d00b      	beq.n	8002912 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	2202      	movs	r2, #2
 8002900:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2284      	movs	r2, #132	@ 0x84
 8002906:	589b      	ldr	r3, [r3, r2]
 8002908:	2204      	movs	r2, #4
 800290a:	431a      	orrs	r2, r3
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2184      	movs	r1, #132	@ 0x84
 8002910:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002912:	23a4      	movs	r3, #164	@ 0xa4
 8002914:	18fb      	adds	r3, r7, r3
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	2204      	movs	r2, #4
 800291a:	4013      	ands	r3, r2
 800291c:	d011      	beq.n	8002942 <HAL_UART_IRQHandler+0x126>
 800291e:	239c      	movs	r3, #156	@ 0x9c
 8002920:	18fb      	adds	r3, r7, r3
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	2201      	movs	r2, #1
 8002926:	4013      	ands	r3, r2
 8002928:	d00b      	beq.n	8002942 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	2204      	movs	r2, #4
 8002930:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2284      	movs	r2, #132	@ 0x84
 8002936:	589b      	ldr	r3, [r3, r2]
 8002938:	2202      	movs	r2, #2
 800293a:	431a      	orrs	r2, r3
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2184      	movs	r1, #132	@ 0x84
 8002940:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002942:	23a4      	movs	r3, #164	@ 0xa4
 8002944:	18fb      	adds	r3, r7, r3
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	2208      	movs	r2, #8
 800294a:	4013      	ands	r3, r2
 800294c:	d017      	beq.n	800297e <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800294e:	23a0      	movs	r3, #160	@ 0xa0
 8002950:	18fb      	adds	r3, r7, r3
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	2220      	movs	r2, #32
 8002956:	4013      	ands	r3, r2
 8002958:	d105      	bne.n	8002966 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800295a:	239c      	movs	r3, #156	@ 0x9c
 800295c:	18fb      	adds	r3, r7, r3
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	2201      	movs	r2, #1
 8002962:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002964:	d00b      	beq.n	800297e <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	2208      	movs	r2, #8
 800296c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2284      	movs	r2, #132	@ 0x84
 8002972:	589b      	ldr	r3, [r3, r2]
 8002974:	2208      	movs	r2, #8
 8002976:	431a      	orrs	r2, r3
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2184      	movs	r1, #132	@ 0x84
 800297c:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800297e:	23a4      	movs	r3, #164	@ 0xa4
 8002980:	18fb      	adds	r3, r7, r3
 8002982:	681a      	ldr	r2, [r3, #0]
 8002984:	2380      	movs	r3, #128	@ 0x80
 8002986:	011b      	lsls	r3, r3, #4
 8002988:	4013      	ands	r3, r2
 800298a:	d013      	beq.n	80029b4 <HAL_UART_IRQHandler+0x198>
 800298c:	23a0      	movs	r3, #160	@ 0xa0
 800298e:	18fb      	adds	r3, r7, r3
 8002990:	681a      	ldr	r2, [r3, #0]
 8002992:	2380      	movs	r3, #128	@ 0x80
 8002994:	04db      	lsls	r3, r3, #19
 8002996:	4013      	ands	r3, r2
 8002998:	d00c      	beq.n	80029b4 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	2280      	movs	r2, #128	@ 0x80
 80029a0:	0112      	lsls	r2, r2, #4
 80029a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2284      	movs	r2, #132	@ 0x84
 80029a8:	589b      	ldr	r3, [r3, r2]
 80029aa:	2220      	movs	r2, #32
 80029ac:	431a      	orrs	r2, r3
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2184      	movs	r1, #132	@ 0x84
 80029b2:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2284      	movs	r2, #132	@ 0x84
 80029b8:	589b      	ldr	r3, [r3, r2]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d100      	bne.n	80029c0 <HAL_UART_IRQHandler+0x1a4>
 80029be:	e1e7      	b.n	8002d90 <HAL_UART_IRQHandler+0x574>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80029c0:	23a4      	movs	r3, #164	@ 0xa4
 80029c2:	18fb      	adds	r3, r7, r3
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	2220      	movs	r2, #32
 80029c8:	4013      	ands	r3, r2
 80029ca:	d00e      	beq.n	80029ea <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80029cc:	23a0      	movs	r3, #160	@ 0xa0
 80029ce:	18fb      	adds	r3, r7, r3
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	2220      	movs	r2, #32
 80029d4:	4013      	ands	r3, r2
 80029d6:	d008      	beq.n	80029ea <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d004      	beq.n	80029ea <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80029e4:	687a      	ldr	r2, [r7, #4]
 80029e6:	0010      	movs	r0, r2
 80029e8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2284      	movs	r2, #132	@ 0x84
 80029ee:	589b      	ldr	r3, [r3, r2]
 80029f0:	2194      	movs	r1, #148	@ 0x94
 80029f2:	187a      	adds	r2, r7, r1
 80029f4:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	689b      	ldr	r3, [r3, #8]
 80029fc:	2240      	movs	r2, #64	@ 0x40
 80029fe:	4013      	ands	r3, r2
 8002a00:	2b40      	cmp	r3, #64	@ 0x40
 8002a02:	d004      	beq.n	8002a0e <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002a04:	187b      	adds	r3, r7, r1
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	2228      	movs	r2, #40	@ 0x28
 8002a0a:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002a0c:	d047      	beq.n	8002a9e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	0018      	movs	r0, r3
 8002a12:	f000 fcf3 	bl	80033fc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	689b      	ldr	r3, [r3, #8]
 8002a1c:	2240      	movs	r2, #64	@ 0x40
 8002a1e:	4013      	ands	r3, r2
 8002a20:	2b40      	cmp	r3, #64	@ 0x40
 8002a22:	d137      	bne.n	8002a94 <HAL_UART_IRQHandler+0x278>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a24:	f3ef 8310 	mrs	r3, PRIMASK
 8002a28:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 8002a2a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002a2c:	2090      	movs	r0, #144	@ 0x90
 8002a2e:	183a      	adds	r2, r7, r0
 8002a30:	6013      	str	r3, [r2, #0]
 8002a32:	2301      	movs	r3, #1
 8002a34:	667b      	str	r3, [r7, #100]	@ 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a36:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002a38:	f383 8810 	msr	PRIMASK, r3
}
 8002a3c:	46c0      	nop			@ (mov r8, r8)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	689a      	ldr	r2, [r3, #8]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	2140      	movs	r1, #64	@ 0x40
 8002a4a:	438a      	bics	r2, r1
 8002a4c:	609a      	str	r2, [r3, #8]
 8002a4e:	183b      	adds	r3, r7, r0
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a54:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002a56:	f383 8810 	msr	PRIMASK, r3
}
 8002a5a:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d012      	beq.n	8002a8a <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a68:	4a14      	ldr	r2, [pc, #80]	@ (8002abc <HAL_UART_IRQHandler+0x2a0>)
 8002a6a:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a70:	0018      	movs	r0, r3
 8002a72:	f7fe fe0b 	bl	800168c <HAL_DMA_Abort_IT>
 8002a76:	1e03      	subs	r3, r0, #0
 8002a78:	d01a      	beq.n	8002ab0 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a7e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a84:	0018      	movs	r0, r3
 8002a86:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a88:	e012      	b.n	8002ab0 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	0018      	movs	r0, r3
 8002a8e:	f000 f995 	bl	8002dbc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a92:	e00d      	b.n	8002ab0 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	0018      	movs	r0, r3
 8002a98:	f000 f990 	bl	8002dbc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a9c:	e008      	b.n	8002ab0 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	0018      	movs	r0, r3
 8002aa2:	f000 f98b 	bl	8002dbc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2284      	movs	r2, #132	@ 0x84
 8002aaa:	2100      	movs	r1, #0
 8002aac:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8002aae:	e16f      	b.n	8002d90 <HAL_UART_IRQHandler+0x574>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ab0:	46c0      	nop			@ (mov r8, r8)
    return;
 8002ab2:	e16d      	b.n	8002d90 <HAL_UART_IRQHandler+0x574>
 8002ab4:	0000080f 	.word	0x0000080f
 8002ab8:	04000120 	.word	0x04000120
 8002abc:	080034c5 	.word	0x080034c5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ac4:	2b01      	cmp	r3, #1
 8002ac6:	d000      	beq.n	8002aca <HAL_UART_IRQHandler+0x2ae>
 8002ac8:	e139      	b.n	8002d3e <HAL_UART_IRQHandler+0x522>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002aca:	23a4      	movs	r3, #164	@ 0xa4
 8002acc:	18fb      	adds	r3, r7, r3
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	2210      	movs	r2, #16
 8002ad2:	4013      	ands	r3, r2
 8002ad4:	d100      	bne.n	8002ad8 <HAL_UART_IRQHandler+0x2bc>
 8002ad6:	e132      	b.n	8002d3e <HAL_UART_IRQHandler+0x522>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002ad8:	23a0      	movs	r3, #160	@ 0xa0
 8002ada:	18fb      	adds	r3, r7, r3
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	2210      	movs	r2, #16
 8002ae0:	4013      	ands	r3, r2
 8002ae2:	d100      	bne.n	8002ae6 <HAL_UART_IRQHandler+0x2ca>
 8002ae4:	e12b      	b.n	8002d3e <HAL_UART_IRQHandler+0x522>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	2210      	movs	r2, #16
 8002aec:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	689b      	ldr	r3, [r3, #8]
 8002af4:	2240      	movs	r2, #64	@ 0x40
 8002af6:	4013      	ands	r3, r2
 8002af8:	2b40      	cmp	r3, #64	@ 0x40
 8002afa:	d000      	beq.n	8002afe <HAL_UART_IRQHandler+0x2e2>
 8002afc:	e09f      	b.n	8002c3e <HAL_UART_IRQHandler+0x422>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	685a      	ldr	r2, [r3, #4]
 8002b06:	217e      	movs	r1, #126	@ 0x7e
 8002b08:	187b      	adds	r3, r7, r1
 8002b0a:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8002b0c:	187b      	adds	r3, r7, r1
 8002b0e:	881b      	ldrh	r3, [r3, #0]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d100      	bne.n	8002b16 <HAL_UART_IRQHandler+0x2fa>
 8002b14:	e13e      	b.n	8002d94 <HAL_UART_IRQHandler+0x578>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2258      	movs	r2, #88	@ 0x58
 8002b1a:	5a9b      	ldrh	r3, [r3, r2]
 8002b1c:	187a      	adds	r2, r7, r1
 8002b1e:	8812      	ldrh	r2, [r2, #0]
 8002b20:	429a      	cmp	r2, r3
 8002b22:	d300      	bcc.n	8002b26 <HAL_UART_IRQHandler+0x30a>
 8002b24:	e136      	b.n	8002d94 <HAL_UART_IRQHandler+0x578>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	187a      	adds	r2, r7, r1
 8002b2a:	215a      	movs	r1, #90	@ 0x5a
 8002b2c:	8812      	ldrh	r2, [r2, #0]
 8002b2e:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b34:	699b      	ldr	r3, [r3, #24]
 8002b36:	2b20      	cmp	r3, #32
 8002b38:	d06f      	beq.n	8002c1a <HAL_UART_IRQHandler+0x3fe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b3a:	f3ef 8310 	mrs	r3, PRIMASK
 8002b3e:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8002b40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002b42:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002b44:	2301      	movs	r3, #1
 8002b46:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b4a:	f383 8810 	msr	PRIMASK, r3
}
 8002b4e:	46c0      	nop			@ (mov r8, r8)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	681a      	ldr	r2, [r3, #0]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4992      	ldr	r1, [pc, #584]	@ (8002da4 <HAL_UART_IRQHandler+0x588>)
 8002b5c:	400a      	ands	r2, r1
 8002b5e:	601a      	str	r2, [r3, #0]
 8002b60:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002b62:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b66:	f383 8810 	msr	PRIMASK, r3
}
 8002b6a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b6c:	f3ef 8310 	mrs	r3, PRIMASK
 8002b70:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8002b72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b74:	677b      	str	r3, [r7, #116]	@ 0x74
 8002b76:	2301      	movs	r3, #1
 8002b78:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b7a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002b7c:	f383 8810 	msr	PRIMASK, r3
}
 8002b80:	46c0      	nop			@ (mov r8, r8)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	689a      	ldr	r2, [r3, #8]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	2101      	movs	r1, #1
 8002b8e:	438a      	bics	r2, r1
 8002b90:	609a      	str	r2, [r3, #8]
 8002b92:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002b94:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b96:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002b98:	f383 8810 	msr	PRIMASK, r3
}
 8002b9c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b9e:	f3ef 8310 	mrs	r3, PRIMASK
 8002ba2:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8002ba4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002ba6:	673b      	str	r3, [r7, #112]	@ 0x70
 8002ba8:	2301      	movs	r3, #1
 8002baa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002bac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002bae:	f383 8810 	msr	PRIMASK, r3
}
 8002bb2:	46c0      	nop			@ (mov r8, r8)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	689a      	ldr	r2, [r3, #8]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	2140      	movs	r1, #64	@ 0x40
 8002bc0:	438a      	bics	r2, r1
 8002bc2:	609a      	str	r2, [r3, #8]
 8002bc4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002bc6:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002bc8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002bca:	f383 8810 	msr	PRIMASK, r3
}
 8002bce:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2280      	movs	r2, #128	@ 0x80
 8002bd4:	2120      	movs	r1, #32
 8002bd6:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2200      	movs	r2, #0
 8002bdc:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002bde:	f3ef 8310 	mrs	r3, PRIMASK
 8002be2:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 8002be4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002be6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002be8:	2301      	movs	r3, #1
 8002bea:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002bec:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002bee:	f383 8810 	msr	PRIMASK, r3
}
 8002bf2:	46c0      	nop			@ (mov r8, r8)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	681a      	ldr	r2, [r3, #0]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	2110      	movs	r1, #16
 8002c00:	438a      	bics	r2, r1
 8002c02:	601a      	str	r2, [r3, #0]
 8002c04:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002c06:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c08:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002c0a:	f383 8810 	msr	PRIMASK, r3
}
 8002c0e:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c14:	0018      	movs	r0, r3
 8002c16:	f7fe fd01 	bl	800161c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2202      	movs	r2, #2
 8002c1e:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2258      	movs	r2, #88	@ 0x58
 8002c24:	5a9a      	ldrh	r2, [r3, r2]
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	215a      	movs	r1, #90	@ 0x5a
 8002c2a:	5a5b      	ldrh	r3, [r3, r1]
 8002c2c:	b29b      	uxth	r3, r3
 8002c2e:	1ad3      	subs	r3, r2, r3
 8002c30:	b29a      	uxth	r2, r3
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	0011      	movs	r1, r2
 8002c36:	0018      	movs	r0, r3
 8002c38:	f000 f8c8 	bl	8002dcc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002c3c:	e0aa      	b.n	8002d94 <HAL_UART_IRQHandler+0x578>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2258      	movs	r2, #88	@ 0x58
 8002c42:	5a99      	ldrh	r1, [r3, r2]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	225a      	movs	r2, #90	@ 0x5a
 8002c48:	5a9b      	ldrh	r3, [r3, r2]
 8002c4a:	b29a      	uxth	r2, r3
 8002c4c:	208e      	movs	r0, #142	@ 0x8e
 8002c4e:	183b      	adds	r3, r7, r0
 8002c50:	1a8a      	subs	r2, r1, r2
 8002c52:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	225a      	movs	r2, #90	@ 0x5a
 8002c58:	5a9b      	ldrh	r3, [r3, r2]
 8002c5a:	b29b      	uxth	r3, r3
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d100      	bne.n	8002c62 <HAL_UART_IRQHandler+0x446>
 8002c60:	e09a      	b.n	8002d98 <HAL_UART_IRQHandler+0x57c>
          && (nb_rx_data > 0U))
 8002c62:	183b      	adds	r3, r7, r0
 8002c64:	881b      	ldrh	r3, [r3, #0]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d100      	bne.n	8002c6c <HAL_UART_IRQHandler+0x450>
 8002c6a:	e095      	b.n	8002d98 <HAL_UART_IRQHandler+0x57c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c6c:	f3ef 8310 	mrs	r3, PRIMASK
 8002c70:	60fb      	str	r3, [r7, #12]
  return(result);
 8002c72:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002c74:	2488      	movs	r4, #136	@ 0x88
 8002c76:	193a      	adds	r2, r7, r4
 8002c78:	6013      	str	r3, [r2, #0]
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c7e:	693b      	ldr	r3, [r7, #16]
 8002c80:	f383 8810 	msr	PRIMASK, r3
}
 8002c84:	46c0      	nop			@ (mov r8, r8)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	681a      	ldr	r2, [r3, #0]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4945      	ldr	r1, [pc, #276]	@ (8002da8 <HAL_UART_IRQHandler+0x58c>)
 8002c92:	400a      	ands	r2, r1
 8002c94:	601a      	str	r2, [r3, #0]
 8002c96:	193b      	adds	r3, r7, r4
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c9c:	697b      	ldr	r3, [r7, #20]
 8002c9e:	f383 8810 	msr	PRIMASK, r3
}
 8002ca2:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ca4:	f3ef 8310 	mrs	r3, PRIMASK
 8002ca8:	61bb      	str	r3, [r7, #24]
  return(result);
 8002caa:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002cac:	2484      	movs	r4, #132	@ 0x84
 8002cae:	193a      	adds	r2, r7, r4
 8002cb0:	6013      	str	r3, [r2, #0]
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002cb6:	69fb      	ldr	r3, [r7, #28]
 8002cb8:	f383 8810 	msr	PRIMASK, r3
}
 8002cbc:	46c0      	nop			@ (mov r8, r8)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	689a      	ldr	r2, [r3, #8]
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	2101      	movs	r1, #1
 8002cca:	438a      	bics	r2, r1
 8002ccc:	609a      	str	r2, [r3, #8]
 8002cce:	193b      	adds	r3, r7, r4
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002cd4:	6a3b      	ldr	r3, [r7, #32]
 8002cd6:	f383 8810 	msr	PRIMASK, r3
}
 8002cda:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2280      	movs	r2, #128	@ 0x80
 8002ce0:	2120      	movs	r1, #32
 8002ce2:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2200      	movs	r2, #0
 8002cee:	669a      	str	r2, [r3, #104]	@ 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002cf0:	f3ef 8310 	mrs	r3, PRIMASK
 8002cf4:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8002cf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002cf8:	2480      	movs	r4, #128	@ 0x80
 8002cfa:	193a      	adds	r2, r7, r4
 8002cfc:	6013      	str	r3, [r2, #0]
 8002cfe:	2301      	movs	r3, #1
 8002d00:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d04:	f383 8810 	msr	PRIMASK, r3
}
 8002d08:	46c0      	nop			@ (mov r8, r8)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	681a      	ldr	r2, [r3, #0]
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	2110      	movs	r1, #16
 8002d16:	438a      	bics	r2, r1
 8002d18:	601a      	str	r2, [r3, #0]
 8002d1a:	193b      	adds	r3, r7, r4
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d22:	f383 8810 	msr	PRIMASK, r3
}
 8002d26:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2202      	movs	r2, #2
 8002d2c:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002d2e:	183b      	adds	r3, r7, r0
 8002d30:	881a      	ldrh	r2, [r3, #0]
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	0011      	movs	r1, r2
 8002d36:	0018      	movs	r0, r3
 8002d38:	f000 f848 	bl	8002dcc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002d3c:	e02c      	b.n	8002d98 <HAL_UART_IRQHandler+0x57c>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002d3e:	23a4      	movs	r3, #164	@ 0xa4
 8002d40:	18fb      	adds	r3, r7, r3
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	2280      	movs	r2, #128	@ 0x80
 8002d46:	4013      	ands	r3, r2
 8002d48:	d00f      	beq.n	8002d6a <HAL_UART_IRQHandler+0x54e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002d4a:	23a0      	movs	r3, #160	@ 0xa0
 8002d4c:	18fb      	adds	r3, r7, r3
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	2280      	movs	r2, #128	@ 0x80
 8002d52:	4013      	ands	r3, r2
 8002d54:	d009      	beq.n	8002d6a <HAL_UART_IRQHandler+0x54e>
  {
    if (huart->TxISR != NULL)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d01e      	beq.n	8002d9c <HAL_UART_IRQHandler+0x580>
    {
      huart->TxISR(huart);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002d62:	687a      	ldr	r2, [r7, #4]
 8002d64:	0010      	movs	r0, r2
 8002d66:	4798      	blx	r3
    }
    return;
 8002d68:	e018      	b.n	8002d9c <HAL_UART_IRQHandler+0x580>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002d6a:	23a4      	movs	r3, #164	@ 0xa4
 8002d6c:	18fb      	adds	r3, r7, r3
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	2240      	movs	r2, #64	@ 0x40
 8002d72:	4013      	ands	r3, r2
 8002d74:	d013      	beq.n	8002d9e <HAL_UART_IRQHandler+0x582>
 8002d76:	23a0      	movs	r3, #160	@ 0xa0
 8002d78:	18fb      	adds	r3, r7, r3
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	2240      	movs	r2, #64	@ 0x40
 8002d7e:	4013      	ands	r3, r2
 8002d80:	d00d      	beq.n	8002d9e <HAL_UART_IRQHandler+0x582>
  {
    UART_EndTransmit_IT(huart);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	0018      	movs	r0, r3
 8002d86:	f000 fbb4 	bl	80034f2 <UART_EndTransmit_IT>
    return;
 8002d8a:	e008      	b.n	8002d9e <HAL_UART_IRQHandler+0x582>
      return;
 8002d8c:	46c0      	nop			@ (mov r8, r8)
 8002d8e:	e006      	b.n	8002d9e <HAL_UART_IRQHandler+0x582>
    return;
 8002d90:	46c0      	nop			@ (mov r8, r8)
 8002d92:	e004      	b.n	8002d9e <HAL_UART_IRQHandler+0x582>
      return;
 8002d94:	46c0      	nop			@ (mov r8, r8)
 8002d96:	e002      	b.n	8002d9e <HAL_UART_IRQHandler+0x582>
      return;
 8002d98:	46c0      	nop			@ (mov r8, r8)
 8002d9a:	e000      	b.n	8002d9e <HAL_UART_IRQHandler+0x582>
    return;
 8002d9c:	46c0      	nop			@ (mov r8, r8)
  }

}
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	b02b      	add	sp, #172	@ 0xac
 8002da2:	bd90      	pop	{r4, r7, pc}
 8002da4:	fffffeff 	.word	0xfffffeff
 8002da8:	fffffedf 	.word	0xfffffedf

08002dac <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b082      	sub	sp, #8
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002db4:	46c0      	nop			@ (mov r8, r8)
 8002db6:	46bd      	mov	sp, r7
 8002db8:	b002      	add	sp, #8
 8002dba:	bd80      	pop	{r7, pc}

08002dbc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b082      	sub	sp, #8
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002dc4:	46c0      	nop			@ (mov r8, r8)
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	b002      	add	sp, #8
 8002dca:	bd80      	pop	{r7, pc}

08002dcc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b082      	sub	sp, #8
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
 8002dd4:	000a      	movs	r2, r1
 8002dd6:	1cbb      	adds	r3, r7, #2
 8002dd8:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002dda:	46c0      	nop			@ (mov r8, r8)
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	b002      	add	sp, #8
 8002de0:	bd80      	pop	{r7, pc}
	...

08002de4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b088      	sub	sp, #32
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002dec:	231e      	movs	r3, #30
 8002dee:	18fb      	adds	r3, r7, r3
 8002df0:	2200      	movs	r2, #0
 8002df2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	689a      	ldr	r2, [r3, #8]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	691b      	ldr	r3, [r3, #16]
 8002dfc:	431a      	orrs	r2, r3
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	695b      	ldr	r3, [r3, #20]
 8002e02:	431a      	orrs	r2, r3
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	69db      	ldr	r3, [r3, #28]
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a8d      	ldr	r2, [pc, #564]	@ (8003048 <UART_SetConfig+0x264>)
 8002e14:	4013      	ands	r3, r2
 8002e16:	0019      	movs	r1, r3
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	697a      	ldr	r2, [r7, #20]
 8002e1e:	430a      	orrs	r2, r1
 8002e20:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	4a88      	ldr	r2, [pc, #544]	@ (800304c <UART_SetConfig+0x268>)
 8002e2a:	4013      	ands	r3, r2
 8002e2c:	0019      	movs	r1, r3
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	68da      	ldr	r2, [r3, #12]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	430a      	orrs	r2, r1
 8002e38:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	699b      	ldr	r3, [r3, #24]
 8002e3e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6a1b      	ldr	r3, [r3, #32]
 8002e44:	697a      	ldr	r2, [r7, #20]
 8002e46:	4313      	orrs	r3, r2
 8002e48:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	689b      	ldr	r3, [r3, #8]
 8002e50:	4a7f      	ldr	r2, [pc, #508]	@ (8003050 <UART_SetConfig+0x26c>)
 8002e52:	4013      	ands	r3, r2
 8002e54:	0019      	movs	r1, r3
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	697a      	ldr	r2, [r7, #20]
 8002e5c:	430a      	orrs	r2, r1
 8002e5e:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a7b      	ldr	r2, [pc, #492]	@ (8003054 <UART_SetConfig+0x270>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d127      	bne.n	8002eba <UART_SetConfig+0xd6>
 8002e6a:	4b7b      	ldr	r3, [pc, #492]	@ (8003058 <UART_SetConfig+0x274>)
 8002e6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e6e:	2203      	movs	r2, #3
 8002e70:	4013      	ands	r3, r2
 8002e72:	2b03      	cmp	r3, #3
 8002e74:	d00d      	beq.n	8002e92 <UART_SetConfig+0xae>
 8002e76:	d81b      	bhi.n	8002eb0 <UART_SetConfig+0xcc>
 8002e78:	2b02      	cmp	r3, #2
 8002e7a:	d014      	beq.n	8002ea6 <UART_SetConfig+0xc2>
 8002e7c:	d818      	bhi.n	8002eb0 <UART_SetConfig+0xcc>
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d002      	beq.n	8002e88 <UART_SetConfig+0xa4>
 8002e82:	2b01      	cmp	r3, #1
 8002e84:	d00a      	beq.n	8002e9c <UART_SetConfig+0xb8>
 8002e86:	e013      	b.n	8002eb0 <UART_SetConfig+0xcc>
 8002e88:	231f      	movs	r3, #31
 8002e8a:	18fb      	adds	r3, r7, r3
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	701a      	strb	r2, [r3, #0]
 8002e90:	e021      	b.n	8002ed6 <UART_SetConfig+0xf2>
 8002e92:	231f      	movs	r3, #31
 8002e94:	18fb      	adds	r3, r7, r3
 8002e96:	2202      	movs	r2, #2
 8002e98:	701a      	strb	r2, [r3, #0]
 8002e9a:	e01c      	b.n	8002ed6 <UART_SetConfig+0xf2>
 8002e9c:	231f      	movs	r3, #31
 8002e9e:	18fb      	adds	r3, r7, r3
 8002ea0:	2204      	movs	r2, #4
 8002ea2:	701a      	strb	r2, [r3, #0]
 8002ea4:	e017      	b.n	8002ed6 <UART_SetConfig+0xf2>
 8002ea6:	231f      	movs	r3, #31
 8002ea8:	18fb      	adds	r3, r7, r3
 8002eaa:	2208      	movs	r2, #8
 8002eac:	701a      	strb	r2, [r3, #0]
 8002eae:	e012      	b.n	8002ed6 <UART_SetConfig+0xf2>
 8002eb0:	231f      	movs	r3, #31
 8002eb2:	18fb      	adds	r3, r7, r3
 8002eb4:	2210      	movs	r2, #16
 8002eb6:	701a      	strb	r2, [r3, #0]
 8002eb8:	e00d      	b.n	8002ed6 <UART_SetConfig+0xf2>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4a67      	ldr	r2, [pc, #412]	@ (800305c <UART_SetConfig+0x278>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d104      	bne.n	8002ece <UART_SetConfig+0xea>
 8002ec4:	231f      	movs	r3, #31
 8002ec6:	18fb      	adds	r3, r7, r3
 8002ec8:	2200      	movs	r2, #0
 8002eca:	701a      	strb	r2, [r3, #0]
 8002ecc:	e003      	b.n	8002ed6 <UART_SetConfig+0xf2>
 8002ece:	231f      	movs	r3, #31
 8002ed0:	18fb      	adds	r3, r7, r3
 8002ed2:	2210      	movs	r2, #16
 8002ed4:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	69da      	ldr	r2, [r3, #28]
 8002eda:	2380      	movs	r3, #128	@ 0x80
 8002edc:	021b      	lsls	r3, r3, #8
 8002ede:	429a      	cmp	r2, r3
 8002ee0:	d15c      	bne.n	8002f9c <UART_SetConfig+0x1b8>
  {
    switch (clocksource)
 8002ee2:	231f      	movs	r3, #31
 8002ee4:	18fb      	adds	r3, r7, r3
 8002ee6:	781b      	ldrb	r3, [r3, #0]
 8002ee8:	2b08      	cmp	r3, #8
 8002eea:	d015      	beq.n	8002f18 <UART_SetConfig+0x134>
 8002eec:	dc18      	bgt.n	8002f20 <UART_SetConfig+0x13c>
 8002eee:	2b04      	cmp	r3, #4
 8002ef0:	d00d      	beq.n	8002f0e <UART_SetConfig+0x12a>
 8002ef2:	dc15      	bgt.n	8002f20 <UART_SetConfig+0x13c>
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d002      	beq.n	8002efe <UART_SetConfig+0x11a>
 8002ef8:	2b02      	cmp	r3, #2
 8002efa:	d005      	beq.n	8002f08 <UART_SetConfig+0x124>
 8002efc:	e010      	b.n	8002f20 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002efe:	f7ff f9e1 	bl	80022c4 <HAL_RCC_GetPCLK1Freq>
 8002f02:	0003      	movs	r3, r0
 8002f04:	61bb      	str	r3, [r7, #24]
        break;
 8002f06:	e012      	b.n	8002f2e <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002f08:	4b55      	ldr	r3, [pc, #340]	@ (8003060 <UART_SetConfig+0x27c>)
 8002f0a:	61bb      	str	r3, [r7, #24]
        break;
 8002f0c:	e00f      	b.n	8002f2e <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002f0e:	f7ff f979 	bl	8002204 <HAL_RCC_GetSysClockFreq>
 8002f12:	0003      	movs	r3, r0
 8002f14:	61bb      	str	r3, [r7, #24]
        break;
 8002f16:	e00a      	b.n	8002f2e <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002f18:	2380      	movs	r3, #128	@ 0x80
 8002f1a:	021b      	lsls	r3, r3, #8
 8002f1c:	61bb      	str	r3, [r7, #24]
        break;
 8002f1e:	e006      	b.n	8002f2e <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8002f20:	2300      	movs	r3, #0
 8002f22:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002f24:	231e      	movs	r3, #30
 8002f26:	18fb      	adds	r3, r7, r3
 8002f28:	2201      	movs	r2, #1
 8002f2a:	701a      	strb	r2, [r3, #0]
        break;
 8002f2c:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002f2e:	69bb      	ldr	r3, [r7, #24]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d100      	bne.n	8002f36 <UART_SetConfig+0x152>
 8002f34:	e07a      	b.n	800302c <UART_SetConfig+0x248>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002f36:	69bb      	ldr	r3, [r7, #24]
 8002f38:	005a      	lsls	r2, r3, #1
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	085b      	lsrs	r3, r3, #1
 8002f40:	18d2      	adds	r2, r2, r3
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	0019      	movs	r1, r3
 8002f48:	0010      	movs	r0, r2
 8002f4a:	f7fd f8dd 	bl	8000108 <__udivsi3>
 8002f4e:	0003      	movs	r3, r0
 8002f50:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002f52:	693b      	ldr	r3, [r7, #16]
 8002f54:	2b0f      	cmp	r3, #15
 8002f56:	d91c      	bls.n	8002f92 <UART_SetConfig+0x1ae>
 8002f58:	693a      	ldr	r2, [r7, #16]
 8002f5a:	2380      	movs	r3, #128	@ 0x80
 8002f5c:	025b      	lsls	r3, r3, #9
 8002f5e:	429a      	cmp	r2, r3
 8002f60:	d217      	bcs.n	8002f92 <UART_SetConfig+0x1ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002f62:	693b      	ldr	r3, [r7, #16]
 8002f64:	b29a      	uxth	r2, r3
 8002f66:	200e      	movs	r0, #14
 8002f68:	183b      	adds	r3, r7, r0
 8002f6a:	210f      	movs	r1, #15
 8002f6c:	438a      	bics	r2, r1
 8002f6e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002f70:	693b      	ldr	r3, [r7, #16]
 8002f72:	085b      	lsrs	r3, r3, #1
 8002f74:	b29b      	uxth	r3, r3
 8002f76:	2207      	movs	r2, #7
 8002f78:	4013      	ands	r3, r2
 8002f7a:	b299      	uxth	r1, r3
 8002f7c:	183b      	adds	r3, r7, r0
 8002f7e:	183a      	adds	r2, r7, r0
 8002f80:	8812      	ldrh	r2, [r2, #0]
 8002f82:	430a      	orrs	r2, r1
 8002f84:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	183a      	adds	r2, r7, r0
 8002f8c:	8812      	ldrh	r2, [r2, #0]
 8002f8e:	60da      	str	r2, [r3, #12]
 8002f90:	e04c      	b.n	800302c <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8002f92:	231e      	movs	r3, #30
 8002f94:	18fb      	adds	r3, r7, r3
 8002f96:	2201      	movs	r2, #1
 8002f98:	701a      	strb	r2, [r3, #0]
 8002f9a:	e047      	b.n	800302c <UART_SetConfig+0x248>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002f9c:	231f      	movs	r3, #31
 8002f9e:	18fb      	adds	r3, r7, r3
 8002fa0:	781b      	ldrb	r3, [r3, #0]
 8002fa2:	2b08      	cmp	r3, #8
 8002fa4:	d015      	beq.n	8002fd2 <UART_SetConfig+0x1ee>
 8002fa6:	dc18      	bgt.n	8002fda <UART_SetConfig+0x1f6>
 8002fa8:	2b04      	cmp	r3, #4
 8002faa:	d00d      	beq.n	8002fc8 <UART_SetConfig+0x1e4>
 8002fac:	dc15      	bgt.n	8002fda <UART_SetConfig+0x1f6>
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d002      	beq.n	8002fb8 <UART_SetConfig+0x1d4>
 8002fb2:	2b02      	cmp	r3, #2
 8002fb4:	d005      	beq.n	8002fc2 <UART_SetConfig+0x1de>
 8002fb6:	e010      	b.n	8002fda <UART_SetConfig+0x1f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002fb8:	f7ff f984 	bl	80022c4 <HAL_RCC_GetPCLK1Freq>
 8002fbc:	0003      	movs	r3, r0
 8002fbe:	61bb      	str	r3, [r7, #24]
        break;
 8002fc0:	e012      	b.n	8002fe8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002fc2:	4b27      	ldr	r3, [pc, #156]	@ (8003060 <UART_SetConfig+0x27c>)
 8002fc4:	61bb      	str	r3, [r7, #24]
        break;
 8002fc6:	e00f      	b.n	8002fe8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002fc8:	f7ff f91c 	bl	8002204 <HAL_RCC_GetSysClockFreq>
 8002fcc:	0003      	movs	r3, r0
 8002fce:	61bb      	str	r3, [r7, #24]
        break;
 8002fd0:	e00a      	b.n	8002fe8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002fd2:	2380      	movs	r3, #128	@ 0x80
 8002fd4:	021b      	lsls	r3, r3, #8
 8002fd6:	61bb      	str	r3, [r7, #24]
        break;
 8002fd8:	e006      	b.n	8002fe8 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8002fda:	2300      	movs	r3, #0
 8002fdc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002fde:	231e      	movs	r3, #30
 8002fe0:	18fb      	adds	r3, r7, r3
 8002fe2:	2201      	movs	r2, #1
 8002fe4:	701a      	strb	r2, [r3, #0]
        break;
 8002fe6:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8002fe8:	69bb      	ldr	r3, [r7, #24]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d01e      	beq.n	800302c <UART_SetConfig+0x248>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	085a      	lsrs	r2, r3, #1
 8002ff4:	69bb      	ldr	r3, [r7, #24]
 8002ff6:	18d2      	adds	r2, r2, r3
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	0019      	movs	r1, r3
 8002ffe:	0010      	movs	r0, r2
 8003000:	f7fd f882 	bl	8000108 <__udivsi3>
 8003004:	0003      	movs	r3, r0
 8003006:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003008:	693b      	ldr	r3, [r7, #16]
 800300a:	2b0f      	cmp	r3, #15
 800300c:	d90a      	bls.n	8003024 <UART_SetConfig+0x240>
 800300e:	693a      	ldr	r2, [r7, #16]
 8003010:	2380      	movs	r3, #128	@ 0x80
 8003012:	025b      	lsls	r3, r3, #9
 8003014:	429a      	cmp	r2, r3
 8003016:	d205      	bcs.n	8003024 <UART_SetConfig+0x240>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003018:	693b      	ldr	r3, [r7, #16]
 800301a:	b29a      	uxth	r2, r3
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	60da      	str	r2, [r3, #12]
 8003022:	e003      	b.n	800302c <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8003024:	231e      	movs	r3, #30
 8003026:	18fb      	adds	r3, r7, r3
 8003028:	2201      	movs	r2, #1
 800302a:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2200      	movs	r2, #0
 8003030:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2200      	movs	r2, #0
 8003036:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003038:	231e      	movs	r3, #30
 800303a:	18fb      	adds	r3, r7, r3
 800303c:	781b      	ldrb	r3, [r3, #0]
}
 800303e:	0018      	movs	r0, r3
 8003040:	46bd      	mov	sp, r7
 8003042:	b008      	add	sp, #32
 8003044:	bd80      	pop	{r7, pc}
 8003046:	46c0      	nop			@ (mov r8, r8)
 8003048:	ffff69f3 	.word	0xffff69f3
 800304c:	ffffcfff 	.word	0xffffcfff
 8003050:	fffff4ff 	.word	0xfffff4ff
 8003054:	40013800 	.word	0x40013800
 8003058:	40021000 	.word	0x40021000
 800305c:	40004400 	.word	0x40004400
 8003060:	007a1200 	.word	0x007a1200

08003064 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b082      	sub	sp, #8
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003070:	2208      	movs	r2, #8
 8003072:	4013      	ands	r3, r2
 8003074:	d00b      	beq.n	800308e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	4a4a      	ldr	r2, [pc, #296]	@ (80031a8 <UART_AdvFeatureConfig+0x144>)
 800307e:	4013      	ands	r3, r2
 8003080:	0019      	movs	r1, r3
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	430a      	orrs	r2, r1
 800308c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003092:	2201      	movs	r2, #1
 8003094:	4013      	ands	r3, r2
 8003096:	d00b      	beq.n	80030b0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	4a43      	ldr	r2, [pc, #268]	@ (80031ac <UART_AdvFeatureConfig+0x148>)
 80030a0:	4013      	ands	r3, r2
 80030a2:	0019      	movs	r1, r3
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	430a      	orrs	r2, r1
 80030ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030b4:	2202      	movs	r2, #2
 80030b6:	4013      	ands	r3, r2
 80030b8:	d00b      	beq.n	80030d2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	4a3b      	ldr	r2, [pc, #236]	@ (80031b0 <UART_AdvFeatureConfig+0x14c>)
 80030c2:	4013      	ands	r3, r2
 80030c4:	0019      	movs	r1, r3
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	430a      	orrs	r2, r1
 80030d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030d6:	2204      	movs	r2, #4
 80030d8:	4013      	ands	r3, r2
 80030da:	d00b      	beq.n	80030f4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	4a34      	ldr	r2, [pc, #208]	@ (80031b4 <UART_AdvFeatureConfig+0x150>)
 80030e4:	4013      	ands	r3, r2
 80030e6:	0019      	movs	r1, r3
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	430a      	orrs	r2, r1
 80030f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030f8:	2210      	movs	r2, #16
 80030fa:	4013      	ands	r3, r2
 80030fc:	d00b      	beq.n	8003116 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	689b      	ldr	r3, [r3, #8]
 8003104:	4a2c      	ldr	r2, [pc, #176]	@ (80031b8 <UART_AdvFeatureConfig+0x154>)
 8003106:	4013      	ands	r3, r2
 8003108:	0019      	movs	r1, r3
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	430a      	orrs	r2, r1
 8003114:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800311a:	2220      	movs	r2, #32
 800311c:	4013      	ands	r3, r2
 800311e:	d00b      	beq.n	8003138 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	689b      	ldr	r3, [r3, #8]
 8003126:	4a25      	ldr	r2, [pc, #148]	@ (80031bc <UART_AdvFeatureConfig+0x158>)
 8003128:	4013      	ands	r3, r2
 800312a:	0019      	movs	r1, r3
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	430a      	orrs	r2, r1
 8003136:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800313c:	2240      	movs	r2, #64	@ 0x40
 800313e:	4013      	ands	r3, r2
 8003140:	d01d      	beq.n	800317e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	4a1d      	ldr	r2, [pc, #116]	@ (80031c0 <UART_AdvFeatureConfig+0x15c>)
 800314a:	4013      	ands	r3, r2
 800314c:	0019      	movs	r1, r3
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	430a      	orrs	r2, r1
 8003158:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800315e:	2380      	movs	r3, #128	@ 0x80
 8003160:	035b      	lsls	r3, r3, #13
 8003162:	429a      	cmp	r2, r3
 8003164:	d10b      	bne.n	800317e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	4a15      	ldr	r2, [pc, #84]	@ (80031c4 <UART_AdvFeatureConfig+0x160>)
 800316e:	4013      	ands	r3, r2
 8003170:	0019      	movs	r1, r3
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	430a      	orrs	r2, r1
 800317c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003182:	2280      	movs	r2, #128	@ 0x80
 8003184:	4013      	ands	r3, r2
 8003186:	d00b      	beq.n	80031a0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	4a0e      	ldr	r2, [pc, #56]	@ (80031c8 <UART_AdvFeatureConfig+0x164>)
 8003190:	4013      	ands	r3, r2
 8003192:	0019      	movs	r1, r3
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	430a      	orrs	r2, r1
 800319e:	605a      	str	r2, [r3, #4]
  }
}
 80031a0:	46c0      	nop			@ (mov r8, r8)
 80031a2:	46bd      	mov	sp, r7
 80031a4:	b002      	add	sp, #8
 80031a6:	bd80      	pop	{r7, pc}
 80031a8:	ffff7fff 	.word	0xffff7fff
 80031ac:	fffdffff 	.word	0xfffdffff
 80031b0:	fffeffff 	.word	0xfffeffff
 80031b4:	fffbffff 	.word	0xfffbffff
 80031b8:	ffffefff 	.word	0xffffefff
 80031bc:	ffffdfff 	.word	0xffffdfff
 80031c0:	ffefffff 	.word	0xffefffff
 80031c4:	ff9fffff 	.word	0xff9fffff
 80031c8:	fff7ffff 	.word	0xfff7ffff

080031cc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b092      	sub	sp, #72	@ 0x48
 80031d0:	af02      	add	r7, sp, #8
 80031d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2284      	movs	r2, #132	@ 0x84
 80031d8:	2100      	movs	r1, #0
 80031da:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80031dc:	f7fe f936 	bl	800144c <HAL_GetTick>
 80031e0:	0003      	movs	r3, r0
 80031e2:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	2208      	movs	r2, #8
 80031ec:	4013      	ands	r3, r2
 80031ee:	2b08      	cmp	r3, #8
 80031f0:	d12c      	bne.n	800324c <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80031f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80031f4:	2280      	movs	r2, #128	@ 0x80
 80031f6:	0391      	lsls	r1, r2, #14
 80031f8:	6878      	ldr	r0, [r7, #4]
 80031fa:	4a46      	ldr	r2, [pc, #280]	@ (8003314 <UART_CheckIdleState+0x148>)
 80031fc:	9200      	str	r2, [sp, #0]
 80031fe:	2200      	movs	r2, #0
 8003200:	f000 f88c 	bl	800331c <UART_WaitOnFlagUntilTimeout>
 8003204:	1e03      	subs	r3, r0, #0
 8003206:	d021      	beq.n	800324c <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003208:	f3ef 8310 	mrs	r3, PRIMASK
 800320c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800320e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003210:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003212:	2301      	movs	r3, #1
 8003214:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003216:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003218:	f383 8810 	msr	PRIMASK, r3
}
 800321c:	46c0      	nop			@ (mov r8, r8)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	681a      	ldr	r2, [r3, #0]
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	2180      	movs	r1, #128	@ 0x80
 800322a:	438a      	bics	r2, r1
 800322c:	601a      	str	r2, [r3, #0]
 800322e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003230:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003232:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003234:	f383 8810 	msr	PRIMASK, r3
}
 8003238:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2220      	movs	r2, #32
 800323e:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2278      	movs	r2, #120	@ 0x78
 8003244:	2100      	movs	r1, #0
 8003246:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003248:	2303      	movs	r3, #3
 800324a:	e05f      	b.n	800330c <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	2204      	movs	r2, #4
 8003254:	4013      	ands	r3, r2
 8003256:	2b04      	cmp	r3, #4
 8003258:	d146      	bne.n	80032e8 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800325a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800325c:	2280      	movs	r2, #128	@ 0x80
 800325e:	03d1      	lsls	r1, r2, #15
 8003260:	6878      	ldr	r0, [r7, #4]
 8003262:	4a2c      	ldr	r2, [pc, #176]	@ (8003314 <UART_CheckIdleState+0x148>)
 8003264:	9200      	str	r2, [sp, #0]
 8003266:	2200      	movs	r2, #0
 8003268:	f000 f858 	bl	800331c <UART_WaitOnFlagUntilTimeout>
 800326c:	1e03      	subs	r3, r0, #0
 800326e:	d03b      	beq.n	80032e8 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003270:	f3ef 8310 	mrs	r3, PRIMASK
 8003274:	60fb      	str	r3, [r7, #12]
  return(result);
 8003276:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003278:	637b      	str	r3, [r7, #52]	@ 0x34
 800327a:	2301      	movs	r3, #1
 800327c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800327e:	693b      	ldr	r3, [r7, #16]
 8003280:	f383 8810 	msr	PRIMASK, r3
}
 8003284:	46c0      	nop			@ (mov r8, r8)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	681a      	ldr	r2, [r3, #0]
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4921      	ldr	r1, [pc, #132]	@ (8003318 <UART_CheckIdleState+0x14c>)
 8003292:	400a      	ands	r2, r1
 8003294:	601a      	str	r2, [r3, #0]
 8003296:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003298:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800329a:	697b      	ldr	r3, [r7, #20]
 800329c:	f383 8810 	msr	PRIMASK, r3
}
 80032a0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80032a2:	f3ef 8310 	mrs	r3, PRIMASK
 80032a6:	61bb      	str	r3, [r7, #24]
  return(result);
 80032a8:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032aa:	633b      	str	r3, [r7, #48]	@ 0x30
 80032ac:	2301      	movs	r3, #1
 80032ae:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032b0:	69fb      	ldr	r3, [r7, #28]
 80032b2:	f383 8810 	msr	PRIMASK, r3
}
 80032b6:	46c0      	nop			@ (mov r8, r8)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	689a      	ldr	r2, [r3, #8]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	2101      	movs	r1, #1
 80032c4:	438a      	bics	r2, r1
 80032c6:	609a      	str	r2, [r3, #8]
 80032c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032ca:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032cc:	6a3b      	ldr	r3, [r7, #32]
 80032ce:	f383 8810 	msr	PRIMASK, r3
}
 80032d2:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2280      	movs	r2, #128	@ 0x80
 80032d8:	2120      	movs	r1, #32
 80032da:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2278      	movs	r2, #120	@ 0x78
 80032e0:	2100      	movs	r1, #0
 80032e2:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80032e4:	2303      	movs	r3, #3
 80032e6:	e011      	b.n	800330c <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2220      	movs	r2, #32
 80032ec:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2280      	movs	r2, #128	@ 0x80
 80032f2:	2120      	movs	r1, #32
 80032f4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2200      	movs	r2, #0
 80032fa:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2200      	movs	r2, #0
 8003300:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2278      	movs	r2, #120	@ 0x78
 8003306:	2100      	movs	r1, #0
 8003308:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800330a:	2300      	movs	r3, #0
}
 800330c:	0018      	movs	r0, r3
 800330e:	46bd      	mov	sp, r7
 8003310:	b010      	add	sp, #64	@ 0x40
 8003312:	bd80      	pop	{r7, pc}
 8003314:	01ffffff 	.word	0x01ffffff
 8003318:	fffffedf 	.word	0xfffffedf

0800331c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b084      	sub	sp, #16
 8003320:	af00      	add	r7, sp, #0
 8003322:	60f8      	str	r0, [r7, #12]
 8003324:	60b9      	str	r1, [r7, #8]
 8003326:	603b      	str	r3, [r7, #0]
 8003328:	1dfb      	adds	r3, r7, #7
 800332a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800332c:	e051      	b.n	80033d2 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800332e:	69bb      	ldr	r3, [r7, #24]
 8003330:	3301      	adds	r3, #1
 8003332:	d04e      	beq.n	80033d2 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003334:	f7fe f88a 	bl	800144c <HAL_GetTick>
 8003338:	0002      	movs	r2, r0
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	1ad3      	subs	r3, r2, r3
 800333e:	69ba      	ldr	r2, [r7, #24]
 8003340:	429a      	cmp	r2, r3
 8003342:	d302      	bcc.n	800334a <UART_WaitOnFlagUntilTimeout+0x2e>
 8003344:	69bb      	ldr	r3, [r7, #24]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d101      	bne.n	800334e <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800334a:	2303      	movs	r3, #3
 800334c:	e051      	b.n	80033f2 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	2204      	movs	r2, #4
 8003356:	4013      	ands	r3, r2
 8003358:	d03b      	beq.n	80033d2 <UART_WaitOnFlagUntilTimeout+0xb6>
 800335a:	68bb      	ldr	r3, [r7, #8]
 800335c:	2b80      	cmp	r3, #128	@ 0x80
 800335e:	d038      	beq.n	80033d2 <UART_WaitOnFlagUntilTimeout+0xb6>
 8003360:	68bb      	ldr	r3, [r7, #8]
 8003362:	2b40      	cmp	r3, #64	@ 0x40
 8003364:	d035      	beq.n	80033d2 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	69db      	ldr	r3, [r3, #28]
 800336c:	2208      	movs	r2, #8
 800336e:	4013      	ands	r3, r2
 8003370:	2b08      	cmp	r3, #8
 8003372:	d111      	bne.n	8003398 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	2208      	movs	r2, #8
 800337a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	0018      	movs	r0, r3
 8003380:	f000 f83c 	bl	80033fc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	2284      	movs	r2, #132	@ 0x84
 8003388:	2108      	movs	r1, #8
 800338a:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	2278      	movs	r2, #120	@ 0x78
 8003390:	2100      	movs	r1, #0
 8003392:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003394:	2301      	movs	r3, #1
 8003396:	e02c      	b.n	80033f2 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	69da      	ldr	r2, [r3, #28]
 800339e:	2380      	movs	r3, #128	@ 0x80
 80033a0:	011b      	lsls	r3, r3, #4
 80033a2:	401a      	ands	r2, r3
 80033a4:	2380      	movs	r3, #128	@ 0x80
 80033a6:	011b      	lsls	r3, r3, #4
 80033a8:	429a      	cmp	r2, r3
 80033aa:	d112      	bne.n	80033d2 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	2280      	movs	r2, #128	@ 0x80
 80033b2:	0112      	lsls	r2, r2, #4
 80033b4:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	0018      	movs	r0, r3
 80033ba:	f000 f81f 	bl	80033fc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	2284      	movs	r2, #132	@ 0x84
 80033c2:	2120      	movs	r1, #32
 80033c4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	2278      	movs	r2, #120	@ 0x78
 80033ca:	2100      	movs	r1, #0
 80033cc:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80033ce:	2303      	movs	r3, #3
 80033d0:	e00f      	b.n	80033f2 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	69db      	ldr	r3, [r3, #28]
 80033d8:	68ba      	ldr	r2, [r7, #8]
 80033da:	4013      	ands	r3, r2
 80033dc:	68ba      	ldr	r2, [r7, #8]
 80033de:	1ad3      	subs	r3, r2, r3
 80033e0:	425a      	negs	r2, r3
 80033e2:	4153      	adcs	r3, r2
 80033e4:	b2db      	uxtb	r3, r3
 80033e6:	001a      	movs	r2, r3
 80033e8:	1dfb      	adds	r3, r7, #7
 80033ea:	781b      	ldrb	r3, [r3, #0]
 80033ec:	429a      	cmp	r2, r3
 80033ee:	d09e      	beq.n	800332e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80033f0:	2300      	movs	r3, #0
}
 80033f2:	0018      	movs	r0, r3
 80033f4:	46bd      	mov	sp, r7
 80033f6:	b004      	add	sp, #16
 80033f8:	bd80      	pop	{r7, pc}
	...

080033fc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b08e      	sub	sp, #56	@ 0x38
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003404:	f3ef 8310 	mrs	r3, PRIMASK
 8003408:	617b      	str	r3, [r7, #20]
  return(result);
 800340a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800340c:	637b      	str	r3, [r7, #52]	@ 0x34
 800340e:	2301      	movs	r3, #1
 8003410:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003412:	69bb      	ldr	r3, [r7, #24]
 8003414:	f383 8810 	msr	PRIMASK, r3
}
 8003418:	46c0      	nop			@ (mov r8, r8)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	681a      	ldr	r2, [r3, #0]
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4926      	ldr	r1, [pc, #152]	@ (80034c0 <UART_EndRxTransfer+0xc4>)
 8003426:	400a      	ands	r2, r1
 8003428:	601a      	str	r2, [r3, #0]
 800342a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800342c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800342e:	69fb      	ldr	r3, [r7, #28]
 8003430:	f383 8810 	msr	PRIMASK, r3
}
 8003434:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003436:	f3ef 8310 	mrs	r3, PRIMASK
 800343a:	623b      	str	r3, [r7, #32]
  return(result);
 800343c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800343e:	633b      	str	r3, [r7, #48]	@ 0x30
 8003440:	2301      	movs	r3, #1
 8003442:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003444:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003446:	f383 8810 	msr	PRIMASK, r3
}
 800344a:	46c0      	nop			@ (mov r8, r8)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	689a      	ldr	r2, [r3, #8]
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	2101      	movs	r1, #1
 8003458:	438a      	bics	r2, r1
 800345a:	609a      	str	r2, [r3, #8]
 800345c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800345e:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003460:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003462:	f383 8810 	msr	PRIMASK, r3
}
 8003466:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800346c:	2b01      	cmp	r3, #1
 800346e:	d118      	bne.n	80034a2 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003470:	f3ef 8310 	mrs	r3, PRIMASK
 8003474:	60bb      	str	r3, [r7, #8]
  return(result);
 8003476:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003478:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800347a:	2301      	movs	r3, #1
 800347c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	f383 8810 	msr	PRIMASK, r3
}
 8003484:	46c0      	nop			@ (mov r8, r8)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	681a      	ldr	r2, [r3, #0]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	2110      	movs	r1, #16
 8003492:	438a      	bics	r2, r1
 8003494:	601a      	str	r2, [r3, #0]
 8003496:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003498:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800349a:	693b      	ldr	r3, [r7, #16]
 800349c:	f383 8810 	msr	PRIMASK, r3
}
 80034a0:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2280      	movs	r2, #128	@ 0x80
 80034a6:	2120      	movs	r1, #32
 80034a8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2200      	movs	r2, #0
 80034ae:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2200      	movs	r2, #0
 80034b4:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80034b6:	46c0      	nop			@ (mov r8, r8)
 80034b8:	46bd      	mov	sp, r7
 80034ba:	b00e      	add	sp, #56	@ 0x38
 80034bc:	bd80      	pop	{r7, pc}
 80034be:	46c0      	nop			@ (mov r8, r8)
 80034c0:	fffffedf 	.word	0xfffffedf

080034c4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b084      	sub	sp, #16
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034d0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	225a      	movs	r2, #90	@ 0x5a
 80034d6:	2100      	movs	r1, #0
 80034d8:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	2252      	movs	r2, #82	@ 0x52
 80034de:	2100      	movs	r1, #0
 80034e0:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	0018      	movs	r0, r3
 80034e6:	f7ff fc69 	bl	8002dbc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80034ea:	46c0      	nop			@ (mov r8, r8)
 80034ec:	46bd      	mov	sp, r7
 80034ee:	b004      	add	sp, #16
 80034f0:	bd80      	pop	{r7, pc}

080034f2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80034f2:	b580      	push	{r7, lr}
 80034f4:	b086      	sub	sp, #24
 80034f6:	af00      	add	r7, sp, #0
 80034f8:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80034fa:	f3ef 8310 	mrs	r3, PRIMASK
 80034fe:	60bb      	str	r3, [r7, #8]
  return(result);
 8003500:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003502:	617b      	str	r3, [r7, #20]
 8003504:	2301      	movs	r3, #1
 8003506:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	f383 8810 	msr	PRIMASK, r3
}
 800350e:	46c0      	nop			@ (mov r8, r8)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	681a      	ldr	r2, [r3, #0]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	2140      	movs	r1, #64	@ 0x40
 800351c:	438a      	bics	r2, r1
 800351e:	601a      	str	r2, [r3, #0]
 8003520:	697b      	ldr	r3, [r7, #20]
 8003522:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003524:	693b      	ldr	r3, [r7, #16]
 8003526:	f383 8810 	msr	PRIMASK, r3
}
 800352a:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2220      	movs	r2, #32
 8003530:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2200      	movs	r2, #0
 8003536:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	0018      	movs	r0, r3
 800353c:	f7ff fc36 	bl	8002dac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003540:	46c0      	nop			@ (mov r8, r8)
 8003542:	46bd      	mov	sp, r7
 8003544:	b006      	add	sp, #24
 8003546:	bd80      	pop	{r7, pc}

08003548 <memset>:
 8003548:	0003      	movs	r3, r0
 800354a:	1882      	adds	r2, r0, r2
 800354c:	4293      	cmp	r3, r2
 800354e:	d100      	bne.n	8003552 <memset+0xa>
 8003550:	4770      	bx	lr
 8003552:	7019      	strb	r1, [r3, #0]
 8003554:	3301      	adds	r3, #1
 8003556:	e7f9      	b.n	800354c <memset+0x4>

08003558 <__libc_init_array>:
 8003558:	b570      	push	{r4, r5, r6, lr}
 800355a:	2600      	movs	r6, #0
 800355c:	4c0c      	ldr	r4, [pc, #48]	@ (8003590 <__libc_init_array+0x38>)
 800355e:	4d0d      	ldr	r5, [pc, #52]	@ (8003594 <__libc_init_array+0x3c>)
 8003560:	1b64      	subs	r4, r4, r5
 8003562:	10a4      	asrs	r4, r4, #2
 8003564:	42a6      	cmp	r6, r4
 8003566:	d109      	bne.n	800357c <__libc_init_array+0x24>
 8003568:	2600      	movs	r6, #0
 800356a:	f000 f819 	bl	80035a0 <_init>
 800356e:	4c0a      	ldr	r4, [pc, #40]	@ (8003598 <__libc_init_array+0x40>)
 8003570:	4d0a      	ldr	r5, [pc, #40]	@ (800359c <__libc_init_array+0x44>)
 8003572:	1b64      	subs	r4, r4, r5
 8003574:	10a4      	asrs	r4, r4, #2
 8003576:	42a6      	cmp	r6, r4
 8003578:	d105      	bne.n	8003586 <__libc_init_array+0x2e>
 800357a:	bd70      	pop	{r4, r5, r6, pc}
 800357c:	00b3      	lsls	r3, r6, #2
 800357e:	58eb      	ldr	r3, [r5, r3]
 8003580:	4798      	blx	r3
 8003582:	3601      	adds	r6, #1
 8003584:	e7ee      	b.n	8003564 <__libc_init_array+0xc>
 8003586:	00b3      	lsls	r3, r6, #2
 8003588:	58eb      	ldr	r3, [r5, r3]
 800358a:	4798      	blx	r3
 800358c:	3601      	adds	r6, #1
 800358e:	e7f2      	b.n	8003576 <__libc_init_array+0x1e>
 8003590:	080035f0 	.word	0x080035f0
 8003594:	080035f0 	.word	0x080035f0
 8003598:	080035f4 	.word	0x080035f4
 800359c:	080035f0 	.word	0x080035f0

080035a0 <_init>:
 80035a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035a2:	46c0      	nop			@ (mov r8, r8)
 80035a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80035a6:	bc08      	pop	{r3}
 80035a8:	469e      	mov	lr, r3
 80035aa:	4770      	bx	lr

080035ac <_fini>:
 80035ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035ae:	46c0      	nop			@ (mov r8, r8)
 80035b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80035b2:	bc08      	pop	{r3}
 80035b4:	469e      	mov	lr, r3
 80035b6:	4770      	bx	lr
